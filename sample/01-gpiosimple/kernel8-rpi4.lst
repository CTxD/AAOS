
kernel8-rpi4.elf:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000080000 <_start>:
   80000:	d5384240 	mrs	x0, currentel
   80004:	f100101f 	cmp	x0, #0x4
   80008:	54000380 	b.eq	80078 <_start+0x78>  // b.none
   8000c:	58000420 	ldr	x0, 80090 <_start+0x90>
   80010:	d51c4100 	msr	sp_el1, x0
   80014:	58000420 	ldr	x0, 80098 <_start+0x98>
   80018:	d51cc000 	msr	vbar_el2, x0
   8001c:	d53ce100 	mrs	x0, cnthctl_el2
   80020:	b2400400 	orr	x0, x0, #0x3
   80024:	d51ce100 	msr	cnthctl_el2, x0
   80028:	d51ce07f 	msr	cntvoff_el2, xzr
   8002c:	d5380000 	mrs	x0, midr_el1
   80030:	d53800a1 	mrs	x1, mpidr_el1
   80034:	d51c0000 	msr	vpidr_el2, x0
   80038:	d51c00a1 	msr	vmpidr_el2, x1
   8003c:	d2867fe0 	mov	x0, #0x33ff                	// #13311
   80040:	d51c1140 	msr	cptr_el2, x0
   80044:	d51c117f 	msr	hstr_el2, xzr
   80048:	d2a00600 	mov	x0, #0x300000              	// #3145728
   8004c:	d5181040 	msr	cpacr_el1, x0
   80050:	d2b00000 	mov	x0, #0x80000000            	// #2147483648
   80054:	d51c1100 	msr	hcr_el2, x0
   80058:	d2810000 	mov	x0, #0x800                 	// #2048
   8005c:	f2a61a00 	movk	x0, #0x30d0, lsl #16
   80060:	d5181000 	msr	sctlr_el1, x0
   80064:	d2807880 	mov	x0, #0x3c4                 	// #964
   80068:	d51c4000 	msr	spsr_el2, x0
   8006c:	10000060 	adr	x0, 80078 <_start+0x78>
   80070:	d51c4020 	msr	elr_el2, x0
   80074:	d69f03e0 	eret
   80078:	58000140 	ldr	x0, 800a0 <_start+0xa0>
   8007c:	9100001f 	mov	sp, x0
   80080:	580000c0 	ldr	x0, 80098 <_start+0x98>
   80084:	d518c000 	msr	vbar_el1, x0
   80088:	140008e6 	b	82420 <sysinit>
   8008c:	00000000 	.inst	0x00000000 ; undefined
   80090:	00308000 	.word	0x00308000
   80094:	00000000 	.word	0x00000000
   80098:	00088800 	.word	0x00088800
   8009c:	00000000 	.word	0x00000000
   800a0:	002a0000 	.word	0x002a0000
   800a4:	00000000 	.word	0x00000000

Disassembly of section .text:

0000000000080800 <main>:
   80800:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   80804:	910003fd 	mov	x29, sp
   80808:	910043e0 	add	x0, sp, #0x10
   8080c:	9400000d 	bl	80840 <CKernel::CKernel()>
   80810:	910043e0 	add	x0, sp, #0x10
   80814:	94000023 	bl	808a0 <CKernel::Initialize()>
   80818:	72001c1f 	tst	w0, #0xff
   8081c:	540000a0 	b.eq	80830 <main+0x30>  // b.none
   80820:	910043e0 	add	x0, sp, #0x10
   80824:	94000023 	bl	808b0 <CKernel::Run()>
   80828:	7100081f 	cmp	w0, #0x2
   8082c:	54000040 	b.eq	80834 <main+0x34>  // b.none
   80830:	940006e8 	bl	823d0 <halt>
   80834:	940006ef 	bl	823f0 <reboot>
	...

0000000000080840 <CKernel::CKernel()>:
   80840:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80844:	52800021 	mov	w1, #0x1                   	// #1
   80848:	910003fd 	mov	x29, sp
   8084c:	f9000bf3 	str	x19, [sp, #16]
   80850:	aa0003f3 	mov	x19, x0
   80854:	94000bef 	bl	83810 <CMemorySystem::CMemorySystem(bool)>
   80858:	91006260 	add	x0, x19, #0x18
   8085c:	52800001 	mov	w1, #0x0                   	// #0
   80860:	f9400bf3 	ldr	x19, [sp, #16]
   80864:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80868:	1400003a 	b	80950 <CActLED::CActLED(bool)>
   8086c:	d503201f 	nop

0000000000080870 <CKernel::~CKernel()>:
   80870:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80874:	910003fd 	mov	x29, sp
   80878:	f9000bf3 	str	x19, [sp, #16]
   8087c:	aa0003f3 	mov	x19, x0
   80880:	91006000 	add	x0, x0, #0x18
   80884:	9400005f 	bl	80a00 <CActLED::~CActLED()>
   80888:	aa1303e0 	mov	x0, x19
   8088c:	f9400bf3 	ldr	x19, [sp, #16]
   80890:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80894:	14000c1b 	b	83900 <CMemorySystem::~CMemorySystem()>
   80898:	d503201f 	nop
   8089c:	d503201f 	nop

00000000000808a0 <CKernel::Initialize()>:
   808a0:	52800020 	mov	w0, #0x1                   	// #1
   808a4:	d65f03c0 	ret
   808a8:	d503201f 	nop
   808ac:	d503201f 	nop

00000000000808b0 <CKernel::Run()>:
   808b0:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   808b4:	910003fd 	mov	x29, sp
   808b8:	d2800003 	mov	x3, #0x0                   	// #0
   808bc:	52800022 	mov	w2, #0x1                   	// #1
   808c0:	528006c1 	mov	w1, #0x36                  	// #54
   808c4:	a90153f3 	stp	x19, x20, [sp, #16]
   808c8:	aa0003f4 	mov	x20, x0
   808cc:	910083e0 	add	x0, sp, #0x20
   808d0:	91006294 	add	x20, x20, #0x18
   808d4:	52800153 	mov	w19, #0xa                   	// #10
   808d8:	9400009a 	bl	80b40 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   808dc:	910183e0 	add	x0, sp, #0x60
   808e0:	d2800003 	mov	x3, #0x0                   	// #0
   808e4:	52800022 	mov	w2, #0x1                   	// #1
   808e8:	528006e1 	mov	w1, #0x37                  	// #55
   808ec:	94000095 	bl	80b40 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   808f0:	aa1403e0 	mov	x0, x20
   808f4:	94000047 	bl	80a10 <CActLED::On()>
   808f8:	910083e0 	add	x0, sp, #0x20
   808fc:	940001a5 	bl	80f90 <CGPIOPin::Invert()>
   80900:	910183e0 	add	x0, sp, #0x60
   80904:	940001a3 	bl	80f90 <CGPIOPin::Invert()>
   80908:	52801900 	mov	w0, #0xc8                  	// #200
   8090c:	94000a85 	bl	83320 <CTimer::SimpleMsDelay(unsigned int)>
   80910:	aa1403e0 	mov	x0, x20
   80914:	9400004b 	bl	80a40 <CActLED::Off()>
   80918:	52803e80 	mov	w0, #0x1f4                 	// #500
   8091c:	94000a81 	bl	83320 <CTimer::SimpleMsDelay(unsigned int)>
   80920:	71000673 	subs	w19, w19, #0x1
   80924:	54fffe61 	b.ne	808f0 <CKernel::Run()+0x40>  // b.any
   80928:	910183e0 	add	x0, sp, #0x60
   8092c:	9400009d 	bl	80ba0 <CGPIOPin::~CGPIOPin()>
   80930:	910083e0 	add	x0, sp, #0x20
   80934:	9400009b 	bl	80ba0 <CGPIOPin::~CGPIOPin()>
   80938:	52800040 	mov	w0, #0x2                   	// #2
   8093c:	a94153f3 	ldp	x19, x20, [sp, #16]
   80940:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   80944:	d65f03c0 	ret
	...

0000000000080950 <CActLED::CActLED(bool)>:
   80950:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   80954:	910003fd 	mov	x29, sp
   80958:	a90153f3 	stp	x19, x20, [sp, #16]
   8095c:	aa0003f4 	mov	x20, x0
   80960:	d0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   80964:	a9025bf5 	stp	x21, x22, [sp, #32]
   80968:	12001c35 	and	w21, w1, #0xff
   8096c:	a9007e9f 	stp	xzr, xzr, [x20]
   80970:	f9050814 	str	x20, [x0, #2576]
   80974:	94000679 	bl	82358 <CMachineInfo::Get()>
   80978:	94000562 	bl	81f00 <CMachineInfo::GetActLEDInfo() const>
   8097c:	2a0003f3 	mov	w19, w0
   80980:	36380213 	tbz	w19, #7, 809c0 <CActLED::CActLED(bool)+0x70>
   80984:	d2800300 	mov	x0, #0x18                  	// #24
   80988:	9400106a 	bl	84b30 <operator new(unsigned long)>
   8098c:	12001661 	and	w1, w19, #0x3f
   80990:	d27a0273 	eor	x19, x19, #0x40
   80994:	aa0003f6 	mov	x22, x0
   80998:	2a1503e2 	mov	w2, w21
   8099c:	d3461a73 	ubfx	x19, x19, #6, #1
   809a0:	94000ab0 	bl	83460 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   809a4:	aa1403e0 	mov	x0, x20
   809a8:	f9000696 	str	x22, [x20, #8]
   809ac:	39004293 	strb	w19, [x20, #16]
   809b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   809b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   809b8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   809bc:	14000021 	b	80a40 <CActLED::Off()>
   809c0:	d2800800 	mov	x0, #0x40                  	// #64
   809c4:	9400105b 	bl	84b30 <operator new(unsigned long)>
   809c8:	12001661 	and	w1, w19, #0x3f
   809cc:	d27a0273 	eor	x19, x19, #0x40
   809d0:	aa0003f5 	mov	x21, x0
   809d4:	d2800003 	mov	x3, #0x0                   	// #0
   809d8:	52800022 	mov	w2, #0x1                   	// #1
   809dc:	d3461a73 	ubfx	x19, x19, #6, #1
   809e0:	94000058 	bl	80b40 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   809e4:	aa1403e0 	mov	x0, x20
   809e8:	f9000295 	str	x21, [x20]
   809ec:	39004293 	strb	w19, [x20, #16]
   809f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   809f4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   809f8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   809fc:	14000011 	b	80a40 <CActLED::Off()>

0000000000080a00 <CActLED::~CActLED()>:
   80a00:	d0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   80a04:	f905081f 	str	xzr, [x0, #2576]
   80a08:	d65f03c0 	ret
   80a0c:	d503201f 	nop

0000000000080a10 <CActLED::On()>:
   80a10:	f9400002 	ldr	x2, [x0]
   80a14:	b4000082 	cbz	x2, 80a24 <CActLED::On()+0x14>
   80a18:	39404001 	ldrb	w1, [x0, #16]
   80a1c:	aa0203e0 	mov	x0, x2
   80a20:	14000108 	b	80e40 <CGPIOPin::Write(unsigned int)>
   80a24:	f9400402 	ldr	x2, [x0, #8]
   80a28:	b4000082 	cbz	x2, 80a38 <CActLED::On()+0x28>
   80a2c:	39404001 	ldrb	w1, [x0, #16]
   80a30:	aa0203e0 	mov	x0, x2
   80a34:	14000ae7 	b	835d0 <CVirtualGPIOPin::Write(unsigned int)>
   80a38:	d65f03c0 	ret
   80a3c:	d503201f 	nop

0000000000080a40 <CActLED::Off()>:
   80a40:	f9400002 	ldr	x2, [x0]
   80a44:	b40000a2 	cbz	x2, 80a58 <CActLED::Off()+0x18>
   80a48:	39404001 	ldrb	w1, [x0, #16]
   80a4c:	aa0203e0 	mov	x0, x2
   80a50:	52000021 	eor	w1, w1, #0x1
   80a54:	140000fb 	b	80e40 <CGPIOPin::Write(unsigned int)>
   80a58:	f9400402 	ldr	x2, [x0, #8]
   80a5c:	b40000a2 	cbz	x2, 80a70 <CActLED::Off()+0x30>
   80a60:	39404001 	ldrb	w1, [x0, #16]
   80a64:	aa0203e0 	mov	x0, x2
   80a68:	52000021 	eor	w1, w1, #0x1
   80a6c:	14000ad9 	b	835d0 <CVirtualGPIOPin::Write(unsigned int)>
   80a70:	d65f03c0 	ret
   80a74:	d503201f 	nop
   80a78:	d503201f 	nop
   80a7c:	d503201f 	nop

0000000000080a80 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   80a80:	34000381 	cbz	w1, 80af0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x70>
   80a84:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   80a88:	910003fd 	mov	x29, sp
   80a8c:	a90153f3 	stp	x19, x20, [sp, #16]
   80a90:	aa0003f4 	mov	x20, x0
   80a94:	52800033 	mov	w19, #0x1                   	// #1
   80a98:	a9025bf5 	stp	x21, x22, [sp, #32]
   80a9c:	2a0203f6 	mov	w22, w2
   80aa0:	2a0103f5 	mov	w21, w1
   80aa4:	f9001bf7 	str	x23, [sp, #48]
   80aa8:	2a0303f7 	mov	w23, w3
   80aac:	d503201f 	nop
   80ab0:	aa1403e0 	mov	x0, x20
   80ab4:	11000673 	add	w19, w19, #0x1
   80ab8:	97ffffd6 	bl	80a10 <CActLED::On()>
   80abc:	2a1603e0 	mov	w0, w22
   80ac0:	94000a18 	bl	83320 <CTimer::SimpleMsDelay(unsigned int)>
   80ac4:	aa1403e0 	mov	x0, x20
   80ac8:	97ffffde 	bl	80a40 <CActLED::Off()>
   80acc:	2a1703e0 	mov	w0, w23
   80ad0:	94000a14 	bl	83320 <CTimer::SimpleMsDelay(unsigned int)>
   80ad4:	6b1302bf 	cmp	w21, w19
   80ad8:	54fffec2 	b.cs	80ab0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x30>  // b.hs, b.nlast
   80adc:	a94153f3 	ldp	x19, x20, [sp, #16]
   80ae0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80ae4:	f9401bf7 	ldr	x23, [sp, #48]
   80ae8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   80aec:	d65f03c0 	ret
   80af0:	d65f03c0 	ret
   80af4:	d503201f 	nop
   80af8:	d503201f 	nop
   80afc:	d503201f 	nop

0000000000080b00 <CActLED::Get()>:
   80b00:	d0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   80b04:	f9450800 	ldr	x0, [x0, #2576]
   80b08:	d65f03c0 	ret
   80b0c:	00000000 	.inst	0x00000000 ; undefined

0000000000080b10 <CGPIOPin::CGPIOPin()>:
   80b10:	528006c4 	mov	w4, #0x36                  	// #54
   80b14:	52800143 	mov	w3, #0xa                   	// #10
   80b18:	a9027c1f 	stp	xzr, xzr, [x0, #32]
   80b1c:	b21f07e2 	mov	x2, #0x600000006           	// #25769803782
   80b20:	b0000041 	adrp	x1, 89000 <SErrorStub+0xc>
   80b24:	91186021 	add	x1, x1, #0x618
   80b28:	b9000804 	str	w4, [x0, #8]
   80b2c:	f9000001 	str	x1, [x0]
   80b30:	b9001403 	str	w3, [x0, #20]
   80b34:	f9001c02 	str	x2, [x0, #56]
   80b38:	d65f03c0 	ret
   80b3c:	d503201f 	nop

0000000000080b40 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   80b40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   80b44:	528006c7 	mov	w7, #0x36                  	// #54
   80b48:	910003fd 	mov	x29, sp
   80b4c:	52800146 	mov	w6, #0xa                   	// #10
   80b50:	b21f07e5 	mov	x5, #0x600000006           	// #25769803782
   80b54:	b0000044 	adrp	x4, 89000 <SErrorStub+0xc>
   80b58:	91186084 	add	x4, x4, #0x618
   80b5c:	f9000bf3 	str	x19, [sp, #16]
   80b60:	aa0003f3 	mov	x19, x0
   80b64:	f9000004 	str	x4, [x0]
   80b68:	b9000807 	str	w7, [x0, #8]
   80b6c:	b9001406 	str	w6, [x0, #20]
   80b70:	a9027c03 	stp	x3, xzr, [x0, #32]
   80b74:	f9001c05 	str	x5, [x0, #56]
   80b78:	b9002fe2 	str	w2, [sp, #44]
   80b7c:	94000011 	bl	80bc0 <CGPIOPin::AssignPin(unsigned int)>
   80b80:	b9402fe2 	ldr	w2, [sp, #44]
   80b84:	aa1303e0 	mov	x0, x19
   80b88:	f9400bf3 	ldr	x19, [sp, #16]
   80b8c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   80b90:	2a0203e1 	mov	w1, w2
   80b94:	52800022 	mov	w2, #0x1                   	// #1
   80b98:	14000032 	b	80c60 <CGPIOPin::SetMode(TGPIOMode, bool)>
   80b9c:	d503201f 	nop

0000000000080ba0 <CGPIOPin::~CGPIOPin()>:
   80ba0:	d65f03c0 	ret
   80ba4:	d503201f 	nop
   80ba8:	d503201f 	nop
   80bac:	d503201f 	nop

0000000000080bb0 <CGPIOPin::~CGPIOPin()>:
   80bb0:	d2800801 	mov	x1, #0x40                  	// #64
   80bb4:	14000fef 	b	84b70 <operator delete(void*, unsigned long)>
   80bb8:	d503201f 	nop
   80bbc:	d503201f 	nop

0000000000080bc0 <CGPIOPin::AssignPin(unsigned int)>:
   80bc0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80bc4:	910003fd 	mov	x29, sp
   80bc8:	a90153f3 	stp	x19, x20, [sp, #16]
   80bcc:	aa0003f4 	mov	x20, x0
   80bd0:	2a0103f3 	mov	w19, w1
   80bd4:	b9400800 	ldr	w0, [x0, #8]
   80bd8:	7100d81f 	cmp	w0, #0x36
   80bdc:	54000341 	b.ne	80c44 <CGPIOPin::AssignPin(unsigned int)+0x84>  // b.any
   80be0:	7100d67f 	cmp	w19, #0x35
   80be4:	b9000a93 	str	w19, [x20, #8]
   80be8:	54000128 	b.hi	80c0c <CGPIOPin::AssignPin(unsigned int)+0x4c>  // b.pmore
   80bec:	53057e61 	lsr	w1, w19, #5
   80bf0:	52800020 	mov	w0, #0x1                   	// #1
   80bf4:	1ad32013 	lsl	w19, w0, w19
   80bf8:	531e7421 	lsl	w1, w1, #2
   80bfc:	2901ce81 	stp	w1, w19, [x20, #12]
   80c00:	a94153f3 	ldp	x19, x20, [sp, #16]
   80c04:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80c08:	d65f03c0 	ret
   80c0c:	940005d3 	bl	82358 <CMachineInfo::Get()>
   80c10:	2a1303e1 	mov	w1, w19
   80c14:	9400050a 	bl	8203c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   80c18:	7100d41f 	cmp	w0, #0x35
   80c1c:	b9000a80 	str	w0, [x20, #8]
   80c20:	2a0003f3 	mov	w19, w0
   80c24:	54fffe49 	b.ls	80bec <CGPIOPin::AssignPin(unsigned int)+0x2c>  // b.plast
   80c28:	b0000041 	adrp	x1, 89000 <SErrorStub+0xc>
   80c2c:	9118a021 	add	x1, x1, #0x628
   80c30:	9100a020 	add	x0, x1, #0x28
   80c34:	528008e2 	mov	w2, #0x47                  	// #71
   80c38:	9400114a 	bl	85160 <assertion_failed>
   80c3c:	b9400a93 	ldr	w19, [x20, #8]
   80c40:	17ffffeb 	b	80bec <CGPIOPin::AssignPin(unsigned int)+0x2c>
   80c44:	b0000041 	adrp	x1, 89000 <SErrorStub+0xc>
   80c48:	9118a021 	add	x1, x1, #0x628
   80c4c:	91004020 	add	x0, x1, #0x10
   80c50:	52800802 	mov	w2, #0x40                  	// #64
   80c54:	94001143 	bl	85160 <assertion_failed>
   80c58:	17ffffe2 	b	80be0 <CGPIOPin::AssignPin(unsigned int)+0x20>
   80c5c:	d503201f 	nop

0000000000080c60 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   80c60:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   80c64:	910003fd 	mov	x29, sp
   80c68:	7100243f 	cmp	w1, #0x9
   80c6c:	a90153f3 	stp	x19, x20, [sp, #16]
   80c70:	2a0103f3 	mov	w19, w1
   80c74:	a9025bf5 	stp	x21, x22, [sp, #32]
   80c78:	12001c56 	and	w22, w2, #0xff
   80c7c:	aa0003f5 	mov	x21, x0
   80c80:	54000a4c 	b.gt	80dc8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x168>
   80c84:	51001022 	sub	w2, w1, #0x4
   80c88:	7100145f 	cmp	w2, #0x5
   80c8c:	b9001401 	str	w1, [x0, #20]
   80c90:	54000769 	b.ls	80d7c <CGPIOPin::SetMode(TGPIOMode, bool)+0x11c>  // b.plast
   80c94:	710002df 	cmp	w22, #0x0
   80c98:	f9001bf7 	str	x23, [sp, #48]
   80c9c:	7a411820 	ccmp	w1, #0x1, #0x0, ne  // ne = any
   80ca0:	540007c0 	b.eq	80d98 <CGPIOPin::SetMode(TGPIOMode, bool)+0x138>  // b.none
   80ca4:	b9400aa2 	ldr	w2, [x21, #8]
   80ca8:	7100d45f 	cmp	w2, #0x35
   80cac:	54000a28 	b.hi	80df0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x190>  // b.pmore
   80cb0:	529999a1 	mov	w1, #0xcccd                	// #52429
   80cb4:	72b99981 	movk	w1, #0xcccc, lsl #16
   80cb8:	52a7f113 	mov	w19, #0x3f880000            	// #1065877504
   80cbc:	d0000057 	adrp	x23, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   80cc0:	9ba17c41 	umull	x1, w2, w1
   80cc4:	b94a1ae0 	ldr	w0, [x23, #2584]
   80cc8:	d363fc21 	lsr	x1, x1, #35
   80ccc:	0b010834 	add	w20, w1, w1, lsl #2
   80cd0:	0b130021 	add	w1, w1, w19
   80cd4:	531e7433 	lsl	w19, w1, #2
   80cd8:	4b140454 	sub	w20, w2, w20, lsl #1
   80cdc:	0b140694 	add	w20, w20, w20, lsl #1
   80ce0:	350004a0 	cbnz	w0, 80d74 <CGPIOPin::SetMode(TGPIOMode, bool)+0x114>
   80ce4:	b94016a0 	ldr	w0, [x21, #20]
   80ce8:	528000e1 	mov	w1, #0x7                   	// #7
   80cec:	1ad42021 	lsl	w1, w1, w20
   80cf0:	b9400262 	ldr	w2, [x19]
   80cf4:	7100041f 	cmp	w0, #0x1
   80cf8:	1a9f17e0 	cset	w0, eq  // eq = none
   80cfc:	1ad42014 	lsl	w20, w0, w20
   80d00:	0a210041 	bic	w1, w2, w1
   80d04:	2a010294 	orr	w20, w20, w1
   80d08:	b9000274 	str	w20, [x19]
   80d0c:	b94a1ae0 	ldr	w0, [x23, #2584]
   80d10:	350002c0 	cbnz	w0, 80d68 <CGPIOPin::SetMode(TGPIOMode, bool)+0x108>
   80d14:	34000216 	cbz	w22, 80d54 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf4>
   80d18:	b94016a1 	ldr	w1, [x21, #20]
   80d1c:	7100043f 	cmp	w1, #0x1
   80d20:	540007c0 	b.eq	80e18 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b8>  // b.none
   80d24:	34000741 	cbz	w1, 80e0c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1ac>
   80d28:	7100083f 	cmp	w1, #0x2
   80d2c:	540005e0 	b.eq	80de8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x188>  // b.none
   80d30:	71000c3f 	cmp	w1, #0x3
   80d34:	54000101 	b.ne	80d54 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf4>  // b.any
   80d38:	aa1503e0 	mov	x0, x21
   80d3c:	52800021 	mov	w1, #0x1                   	// #1
   80d40:	a94153f3 	ldp	x19, x20, [sp, #16]
   80d44:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80d48:	f9401bf7 	ldr	x23, [sp, #48]
   80d4c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   80d50:	14000258 	b	816b0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   80d54:	a94153f3 	ldp	x19, x20, [sp, #16]
   80d58:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80d5c:	f9401bf7 	ldr	x23, [sp, #48]
   80d60:	a8c47bfd 	ldp	x29, x30, [sp], #64
   80d64:	d65f03c0 	ret
   80d68:	94000baa 	bl	83c10 <LeaveCritical>
   80d6c:	34ffff56 	cbz	w22, 80d54 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf4>
   80d70:	17ffffea 	b	80d18 <CGPIOPin::SetMode(TGPIOMode, bool)+0xb8>
   80d74:	94000b6f 	bl	83b30 <EnterCritical>
   80d78:	17ffffdb 	b	80ce4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x84>
   80d7c:	35000156 	cbnz	w22, 80da4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x144>
   80d80:	aa1503e0 	mov	x0, x21
   80d84:	51001021 	sub	w1, w1, #0x4
   80d88:	a94153f3 	ldp	x19, x20, [sp, #16]
   80d8c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80d90:	a8c47bfd 	ldp	x29, x30, [sp], #64
   80d94:	14000283 	b	817a0 <CGPIOPin::SetAlternateFunction(unsigned int)>
   80d98:	52800001 	mov	w1, #0x0                   	// #0
   80d9c:	94000245 	bl	816b0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   80da0:	17ffffc1 	b	80ca4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x44>
   80da4:	52800001 	mov	w1, #0x0                   	// #0
   80da8:	94000242 	bl	816b0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   80dac:	b94016a1 	ldr	w1, [x21, #20]
   80db0:	aa1503e0 	mov	x0, x21
   80db4:	a94153f3 	ldp	x19, x20, [sp, #16]
   80db8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80dbc:	51001021 	sub	w1, w1, #0x4
   80dc0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   80dc4:	14000277 	b	817a0 <CGPIOPin::SetAlternateFunction(unsigned int)>
   80dc8:	b0000041 	adrp	x1, 89000 <SErrorStub+0xc>
   80dcc:	9118a021 	add	x1, x1, #0x628
   80dd0:	f9001bf7 	str	x23, [sp, #48]
   80dd4:	91010020 	add	x0, x1, #0x40
   80dd8:	528009e2 	mov	w2, #0x4f                  	// #79
   80ddc:	940010e1 	bl	85160 <assertion_failed>
   80de0:	b90016b3 	str	w19, [x21, #20]
   80de4:	17ffffb0 	b	80ca4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x44>
   80de8:	aa1503e0 	mov	x0, x21
   80dec:	17ffffd5 	b	80d40 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe0>
   80df0:	b0000041 	adrp	x1, 89000 <SErrorStub+0xc>
   80df4:	9118a021 	add	x1, x1, #0x628
   80df8:	52800d02 	mov	w2, #0x68                  	// #104
   80dfc:	9100a020 	add	x0, x1, #0x28
   80e00:	940010d8 	bl	85160 <assertion_failed>
   80e04:	b9400aa2 	ldr	w2, [x21, #8]
   80e08:	17ffffaa 	b	80cb0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x50>
   80e0c:	aa1503e0 	mov	x0, x21
   80e10:	52800001 	mov	w1, #0x0                   	// #0
   80e14:	17ffffcb 	b	80d40 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe0>
   80e18:	aa1503e0 	mov	x0, x21
   80e1c:	52800001 	mov	w1, #0x0                   	// #0
   80e20:	a94153f3 	ldp	x19, x20, [sp, #16]
   80e24:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80e28:	f9401bf7 	ldr	x23, [sp, #48]
   80e2c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   80e30:	14000004 	b	80e40 <CGPIOPin::Write(unsigned int)>
   80e34:	d503201f 	nop
   80e38:	d503201f 	nop
   80e3c:	d503201f 	nop

0000000000080e40 <CGPIOPin::Write(unsigned int)>:
   80e40:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80e44:	910003fd 	mov	x29, sp
   80e48:	a90153f3 	stp	x19, x20, [sp, #16]
   80e4c:	aa0003f3 	mov	x19, x0
   80e50:	2a0103f4 	mov	w20, w1
   80e54:	b9400800 	ldr	w0, [x0, #8]
   80e58:	7100d41f 	cmp	w0, #0x35
   80e5c:	54000268 	b.hi	80ea8 <CGPIOPin::Write(unsigned int)+0x68>  // b.pmore
   80e60:	b9401660 	ldr	w0, [x19, #20]
   80e64:	71000c1f 	cmp	w0, #0x3
   80e68:	540002cc 	b.gt	80ec0 <CGPIOPin::Write(unsigned int)+0x80>
   80e6c:	7100069f 	cmp	w20, #0x1
   80e70:	54000348 	b.hi	80ed8 <CGPIOPin::Write(unsigned int)+0x98>  // b.pmore
   80e74:	7100029f 	cmp	w20, #0x0
   80e78:	52800380 	mov	w0, #0x1c                  	// #28
   80e7c:	72bfc400 	movk	w0, #0xfe20, lsl #16
   80e80:	52800501 	mov	w1, #0x28                  	// #40
   80e84:	72bfc401 	movk	w1, #0xfe20, lsl #16
   80e88:	1a811000 	csel	w0, w0, w1, ne  // ne = any
   80e8c:	b9001a74 	str	w20, [x19, #24]
   80e90:	29418662 	ldp	w2, w1, [x19, #12]
   80e94:	a94153f3 	ldp	x19, x20, [sp, #16]
   80e98:	0b020000 	add	w0, w0, w2
   80e9c:	b9000001 	str	w1, [x0]
   80ea0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80ea4:	d65f03c0 	ret
   80ea8:	b0000041 	adrp	x1, 89000 <SErrorStub+0xc>
   80eac:	9118a021 	add	x1, x1, #0x628
   80eb0:	9100a020 	add	x0, x1, #0x28
   80eb4:	52801222 	mov	w2, #0x91                  	// #145
   80eb8:	940010aa 	bl	85160 <assertion_failed>
   80ebc:	17ffffe9 	b	80e60 <CGPIOPin::Write(unsigned int)+0x20>
   80ec0:	b0000041 	adrp	x1, 89000 <SErrorStub+0xc>
   80ec4:	9118a021 	add	x1, x1, #0x628
   80ec8:	91016020 	add	x0, x1, #0x58
   80ecc:	52801282 	mov	w2, #0x94                  	// #148
   80ed0:	940010a4 	bl	85160 <assertion_failed>
   80ed4:	17ffffe6 	b	80e6c <CGPIOPin::Write(unsigned int)+0x2c>
   80ed8:	b0000041 	adrp	x1, 89000 <SErrorStub+0xc>
   80edc:	9118a021 	add	x1, x1, #0x628
   80ee0:	91020020 	add	x0, x1, #0x80
   80ee4:	52801302 	mov	w2, #0x98                  	// #152
   80ee8:	9400109e 	bl	85160 <assertion_failed>
   80eec:	52800380 	mov	w0, #0x1c                  	// #28
   80ef0:	72bfc400 	movk	w0, #0xfe20, lsl #16
   80ef4:	b9001a74 	str	w20, [x19, #24]
   80ef8:	17ffffe6 	b	80e90 <CGPIOPin::Write(unsigned int)+0x50>
   80efc:	d503201f 	nop

0000000000080f00 <CGPIOPin::Read() const>:
   80f00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80f04:	910003fd 	mov	x29, sp
   80f08:	f9000bf3 	str	x19, [sp, #16]
   80f0c:	aa0003f3 	mov	x19, x0
   80f10:	b9400800 	ldr	w0, [x0, #8]
   80f14:	7100d41f 	cmp	w0, #0x35
   80f18:	54000208 	b.hi	80f58 <CGPIOPin::Read() const+0x58>  // b.pmore
   80f1c:	b9401660 	ldr	w0, [x19, #20]
   80f20:	7100001f 	cmp	w0, #0x0
   80f24:	51000800 	sub	w0, w0, #0x2
   80f28:	7a411800 	ccmp	w0, #0x1, #0x0, ne  // ne = any
   80f2c:	54000228 	b.hi	80f70 <CGPIOPin::Read() const+0x70>  // b.pmore
   80f30:	29418660 	ldp	w0, w1, [x19, #12]
   80f34:	52800682 	mov	w2, #0x34                  	// #52
   80f38:	72bfc402 	movk	w2, #0xfe20, lsl #16
   80f3c:	f9400bf3 	ldr	x19, [sp, #16]
   80f40:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80f44:	0b020000 	add	w0, w0, w2
   80f48:	b9400000 	ldr	w0, [x0]
   80f4c:	6a01001f 	tst	w0, w1
   80f50:	1a9f07e0 	cset	w0, ne  // ne = any
   80f54:	d65f03c0 	ret
   80f58:	b0000041 	adrp	x1, 89000 <SErrorStub+0xc>
   80f5c:	9118a021 	add	x1, x1, #0x628
   80f60:	9100a020 	add	x0, x1, #0x28
   80f64:	52801482 	mov	w2, #0xa4                  	// #164
   80f68:	9400107e 	bl	85160 <assertion_failed>
   80f6c:	17ffffec 	b	80f1c <CGPIOPin::Read() const+0x1c>
   80f70:	b0000041 	adrp	x1, 89000 <SErrorStub+0xc>
   80f74:	9118a021 	add	x1, x1, #0x628
   80f78:	91028020 	add	x0, x1, #0xa0
   80f7c:	52801502 	mov	w2, #0xa8                  	// #168
   80f80:	94001078 	bl	85160 <assertion_failed>
   80f84:	17ffffeb 	b	80f30 <CGPIOPin::Read() const+0x30>
   80f88:	d503201f 	nop
   80f8c:	d503201f 	nop

0000000000080f90 <CGPIOPin::Invert()>:
   80f90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80f94:	910003fd 	mov	x29, sp
   80f98:	f9000bf3 	str	x19, [sp, #16]
   80f9c:	aa0003f3 	mov	x19, x0
   80fa0:	b9401400 	ldr	w0, [x0, #20]
   80fa4:	7100041f 	cmp	w0, #0x1
   80fa8:	540000e1 	b.ne	80fc4 <CGPIOPin::Invert()+0x34>  // b.any
   80fac:	b9401a61 	ldr	w1, [x19, #24]
   80fb0:	aa1303e0 	mov	x0, x19
   80fb4:	f9400bf3 	ldr	x19, [sp, #16]
   80fb8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80fbc:	52000021 	eor	w1, w1, #0x1
   80fc0:	17ffffa0 	b	80e40 <CGPIOPin::Write(unsigned int)>
   80fc4:	b0000041 	adrp	x1, 89000 <SErrorStub+0xc>
   80fc8:	9118a021 	add	x1, x1, #0x628
   80fcc:	91040020 	add	x0, x1, #0x100
   80fd0:	528016a2 	mov	w2, #0xb5                  	// #181
   80fd4:	94001063 	bl	85160 <assertion_failed>
   80fd8:	17fffff5 	b	80fac <CGPIOPin::Invert()+0x1c>
   80fdc:	d503201f 	nop

0000000000080fe0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
   80fe0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   80fe4:	910003fd 	mov	x29, sp
   80fe8:	a90153f3 	stp	x19, x20, [sp, #16]
   80fec:	aa0003f3 	mov	x19, x0
   80ff0:	aa0103f4 	mov	x20, x1
   80ff4:	b9401400 	ldr	w0, [x0, #20]
   80ff8:	f90013f5 	str	x21, [sp, #32]
   80ffc:	aa0203f5 	mov	x21, x2
   81000:	7100001f 	cmp	w0, #0x0
   81004:	51000800 	sub	w0, w0, #0x2
   81008:	7a411800 	ccmp	w0, #0x1, #0x0, ne  // ne = any
   8100c:	54000648 	b.hi	810d4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xf4>  // b.pmore
   81010:	b9403a60 	ldr	w0, [x19, #56]
   81014:	7100181f 	cmp	w0, #0x6
   81018:	54000521 	b.ne	810bc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xdc>  // b.any
   8101c:	b9403e60 	ldr	w0, [x19, #60]
   81020:	7100181f 	cmp	w0, #0x6
   81024:	54000181 	b.ne	81054 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x74>  // b.any
   81028:	b4000254 	cbz	x20, 81070 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x90>
   8102c:	f9401660 	ldr	x0, [x19, #40]
   81030:	b50002c0 	cbnz	x0, 81088 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xa8>
   81034:	a902d674 	stp	x20, x21, [x19, #40]
   81038:	f9401260 	ldr	x0, [x19, #32]
   8103c:	b4000320 	cbz	x0, 810a0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xc0>
   81040:	aa1303e1 	mov	x1, x19
   81044:	a94153f3 	ldp	x19, x20, [sp, #16]
   81048:	f94013f5 	ldr	x21, [sp, #32]
   8104c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81050:	140011d0 	b	85790 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   81054:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   81058:	9118a021 	add	x1, x1, #0x628
   8105c:	91052020 	add	x0, x1, #0x148
   81060:	52801822 	mov	w2, #0xc1                  	// #193
   81064:	9400103f 	bl	85160 <assertion_failed>
   81068:	b5fffe34 	cbnz	x20, 8102c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x4c>
   8106c:	d503201f 	nop
   81070:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   81074:	9118a021 	add	x1, x1, #0x628
   81078:	9105c020 	add	x0, x1, #0x170
   8107c:	52801862 	mov	w2, #0xc3                  	// #195
   81080:	94001038 	bl	85160 <assertion_failed>
   81084:	17ffffea 	b	8102c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x4c>
   81088:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   8108c:	9118a021 	add	x1, x1, #0x628
   81090:	91060020 	add	x0, x1, #0x180
   81094:	52801882 	mov	w2, #0xc4                  	// #196
   81098:	94001032 	bl	85160 <assertion_failed>
   8109c:	17ffffe6 	b	81034 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x54>
   810a0:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   810a4:	9118a021 	add	x1, x1, #0x628
   810a8:	91064020 	add	x0, x1, #0x190
   810ac:	52801922 	mov	w2, #0xc9                  	// #201
   810b0:	9400102c 	bl	85160 <assertion_failed>
   810b4:	f9401260 	ldr	x0, [x19, #32]
   810b8:	17ffffe2 	b	81040 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x60>
   810bc:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   810c0:	9118a021 	add	x1, x1, #0x628
   810c4:	91048020 	add	x0, x1, #0x120
   810c8:	52801802 	mov	w2, #0xc0                  	// #192
   810cc:	94001025 	bl	85160 <assertion_failed>
   810d0:	17ffffd3 	b	8101c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x3c>
   810d4:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   810d8:	9118a021 	add	x1, x1, #0x628
   810dc:	91028020 	add	x0, x1, #0xa0
   810e0:	528017c2 	mov	w2, #0xbe                  	// #190
   810e4:	9400101f 	bl	85160 <assertion_failed>
   810e8:	17ffffca 	b	81010 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x30>
   810ec:	d503201f 	nop

00000000000810f0 <CGPIOPin::DisconnectInterrupt()>:
   810f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   810f4:	910003fd 	mov	x29, sp
   810f8:	f9000bf3 	str	x19, [sp, #16]
   810fc:	aa0003f3 	mov	x19, x0
   81100:	b9401400 	ldr	w0, [x0, #20]
   81104:	7100001f 	cmp	w0, #0x0
   81108:	51000800 	sub	w0, w0, #0x2
   8110c:	7a411800 	ccmp	w0, #0x1, #0x0, ne  // ne = any
   81110:	54000528 	b.hi	811b4 <CGPIOPin::DisconnectInterrupt()+0xc4>  // b.pmore
   81114:	b9403a60 	ldr	w0, [x19, #56]
   81118:	7100181f 	cmp	w0, #0x6
   8111c:	540001a1 	b.ne	81150 <CGPIOPin::DisconnectInterrupt()+0x60>  // b.any
   81120:	b9403e60 	ldr	w0, [x19, #60]
   81124:	7100181f 	cmp	w0, #0x6
   81128:	54000201 	b.ne	81168 <CGPIOPin::DisconnectInterrupt()+0x78>  // b.any
   8112c:	f9401660 	ldr	x0, [x19, #40]
   81130:	b4000280 	cbz	x0, 81180 <CGPIOPin::DisconnectInterrupt()+0x90>
   81134:	f900167f 	str	xzr, [x19, #40]
   81138:	f9401260 	ldr	x0, [x19, #32]
   8113c:	b40002e0 	cbz	x0, 81198 <CGPIOPin::DisconnectInterrupt()+0xa8>
   81140:	aa1303e1 	mov	x1, x19
   81144:	f9400bf3 	ldr	x19, [sp, #16]
   81148:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8114c:	140011c5 	b	85860 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   81150:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   81154:	9118a021 	add	x1, x1, #0x628
   81158:	91048020 	add	x0, x1, #0x120
   8115c:	52801a62 	mov	w2, #0xd3                  	// #211
   81160:	94001000 	bl	85160 <assertion_failed>
   81164:	17ffffef 	b	81120 <CGPIOPin::DisconnectInterrupt()+0x30>
   81168:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   8116c:	9118a021 	add	x1, x1, #0x628
   81170:	91052020 	add	x0, x1, #0x148
   81174:	52801a82 	mov	w2, #0xd4                  	// #212
   81178:	94000ffa 	bl	85160 <assertion_failed>
   8117c:	17ffffec 	b	8112c <CGPIOPin::DisconnectInterrupt()+0x3c>
   81180:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   81184:	9118a021 	add	x1, x1, #0x628
   81188:	91068020 	add	x0, x1, #0x1a0
   8118c:	52801ac2 	mov	w2, #0xd6                  	// #214
   81190:	94000ff4 	bl	85160 <assertion_failed>
   81194:	17ffffe8 	b	81134 <CGPIOPin::DisconnectInterrupt()+0x44>
   81198:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   8119c:	9118a021 	add	x1, x1, #0x628
   811a0:	91064020 	add	x0, x1, #0x190
   811a4:	52801b22 	mov	w2, #0xd9                  	// #217
   811a8:	94000fee 	bl	85160 <assertion_failed>
   811ac:	f9401260 	ldr	x0, [x19, #32]
   811b0:	17ffffe4 	b	81140 <CGPIOPin::DisconnectInterrupt()+0x50>
   811b4:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   811b8:	9118a021 	add	x1, x1, #0x628
   811bc:	91028020 	add	x0, x1, #0xa0
   811c0:	52801a22 	mov	w2, #0xd1                  	// #209
   811c4:	94000fe7 	bl	85160 <assertion_failed>
   811c8:	17ffffd3 	b	81114 <CGPIOPin::DisconnectInterrupt()+0x24>
   811cc:	d503201f 	nop

00000000000811d0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   811d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   811d4:	910003fd 	mov	x29, sp
   811d8:	a90153f3 	stp	x19, x20, [sp, #16]
   811dc:	aa0003f3 	mov	x19, x0
   811e0:	2a0103f4 	mov	w20, w1
   811e4:	b9401400 	ldr	w0, [x0, #20]
   811e8:	f90013f5 	str	x21, [sp, #32]
   811ec:	7100001f 	cmp	w0, #0x0
   811f0:	51000800 	sub	w0, w0, #0x2
   811f4:	7a411800 	ccmp	w0, #0x1, #0x0, ne  // ne = any
   811f8:	54000848 	b.hi	81300 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x130>  // b.pmore
   811fc:	f9401660 	ldr	x0, [x19, #40]
   81200:	b40005c0 	cbz	x0, 812b8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe8>
   81204:	b9403a60 	ldr	w0, [x19, #56]
   81208:	7100181f 	cmp	w0, #0x6
   8120c:	54000621 	b.ne	812d0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x100>  // b.any
   81210:	7100169f 	cmp	w20, #0x5
   81214:	540006ac 	b.gt	812e8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
   81218:	b9403e60 	ldr	w0, [x19, #60]
   8121c:	6b14001f 	cmp	w0, w20
   81220:	54000400 	b.eq	812a0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd0>  // b.none
   81224:	b9400e62 	ldr	w2, [x19, #12]
   81228:	0b140681 	add	w1, w20, w20, lsl #1
   8122c:	52800983 	mov	w3, #0x4c                  	// #76
   81230:	72bfc403 	movk	w3, #0xfe20, lsl #16
   81234:	b0000055 	adrp	x21, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81238:	b9003a74 	str	w20, [x19, #56]
   8123c:	b94a1aa0 	ldr	w0, [x21, #2584]
   81240:	0b030054 	add	w20, w2, w3
   81244:	0b010a94 	add	w20, w20, w1, lsl #2
   81248:	35000160 	cbnz	w0, 81274 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa4>
   8124c:	b9401261 	ldr	w1, [x19, #16]
   81250:	b9400280 	ldr	w0, [x20]
   81254:	2a010000 	orr	w0, w0, w1
   81258:	b9000280 	str	w0, [x20]
   8125c:	b94a1aa0 	ldr	w0, [x21, #2584]
   81260:	35000180 	cbnz	w0, 81290 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc0>
   81264:	a94153f3 	ldp	x19, x20, [sp, #16]
   81268:	f94013f5 	ldr	x21, [sp, #32]
   8126c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81270:	d65f03c0 	ret
   81274:	94000a2f 	bl	83b30 <EnterCritical>
   81278:	b9401261 	ldr	w1, [x19, #16]
   8127c:	b9400280 	ldr	w0, [x20]
   81280:	2a010000 	orr	w0, w0, w1
   81284:	b9000280 	str	w0, [x20]
   81288:	b94a1aa0 	ldr	w0, [x21, #2584]
   8128c:	34fffec0 	cbz	w0, 81264 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
   81290:	a94153f3 	ldp	x19, x20, [sp, #16]
   81294:	f94013f5 	ldr	x21, [sp, #32]
   81298:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8129c:	14000a5d 	b	83c10 <LeaveCritical>
   812a0:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   812a4:	9118a021 	add	x1, x1, #0x628
   812a8:	91076020 	add	x0, x1, #0x1d8
   812ac:	52801cc2 	mov	w2, #0xe6                  	// #230
   812b0:	94000fac 	bl	85160 <assertion_failed>
   812b4:	17ffffdc 	b	81224 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x54>
   812b8:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   812bc:	9118a021 	add	x1, x1, #0x628
   812c0:	91068020 	add	x0, x1, #0x1a0
   812c4:	52801c42 	mov	w2, #0xe2                  	// #226
   812c8:	94000fa6 	bl	85160 <assertion_failed>
   812cc:	17ffffce 	b	81204 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x34>
   812d0:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   812d4:	9118a021 	add	x1, x1, #0x628
   812d8:	91048020 	add	x0, x1, #0x120
   812dc:	52801c82 	mov	w2, #0xe4                  	// #228
   812e0:	94000fa0 	bl	85160 <assertion_failed>
   812e4:	17ffffcb 	b	81210 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x40>
   812e8:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   812ec:	9118a021 	add	x1, x1, #0x628
   812f0:	9106c020 	add	x0, x1, #0x1b0
   812f4:	52801ca2 	mov	w2, #0xe5                  	// #229
   812f8:	94000f9a 	bl	85160 <assertion_failed>
   812fc:	17ffffc7 	b	81218 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x48>
   81300:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   81304:	9118a021 	add	x1, x1, #0x628
   81308:	91028020 	add	x0, x1, #0xa0
   8130c:	52801c22 	mov	w2, #0xe1                  	// #225
   81310:	94000f94 	bl	85160 <assertion_failed>
   81314:	17ffffba 	b	811fc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x2c>
   81318:	d503201f 	nop
   8131c:	d503201f 	nop

0000000000081320 <CGPIOPin::DisableInterrupt()>:
   81320:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81324:	910003fd 	mov	x29, sp
   81328:	a90153f3 	stp	x19, x20, [sp, #16]
   8132c:	aa0003f4 	mov	x20, x0
   81330:	b9401400 	ldr	w0, [x0, #20]
   81334:	f90013f5 	str	x21, [sp, #32]
   81338:	7100001f 	cmp	w0, #0x0
   8133c:	51000800 	sub	w0, w0, #0x2
   81340:	7a411800 	ccmp	w0, #0x1, #0x0, ne  // ne = any
   81344:	540005c8 	b.hi	813fc <CGPIOPin::DisableInterrupt()+0xdc>  // b.pmore
   81348:	b9403a80 	ldr	w0, [x20, #56]
   8134c:	7100141f 	cmp	w0, #0x5
   81350:	5400048c 	b.gt	813e0 <CGPIOPin::DisableInterrupt()+0xc0>
   81354:	b9400e81 	ldr	w1, [x20, #12]
   81358:	0b000413 	add	w19, w0, w0, lsl #1
   8135c:	52800982 	mov	w2, #0x4c                  	// #76
   81360:	72bfc402 	movk	w2, #0xfe20, lsl #16
   81364:	b0000055 	adrp	x21, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81368:	b94a1aa0 	ldr	w0, [x21, #2584]
   8136c:	0b020021 	add	w1, w1, w2
   81370:	0b130833 	add	w19, w1, w19, lsl #2
   81374:	350001a0 	cbnz	w0, 813a8 <CGPIOPin::DisableInterrupt()+0x88>
   81378:	b9400261 	ldr	w1, [x19]
   8137c:	b9401280 	ldr	w0, [x20, #16]
   81380:	0a200020 	bic	w0, w1, w0
   81384:	b9000260 	str	w0, [x19]
   81388:	b94a1aa0 	ldr	w0, [x21, #2584]
   8138c:	350001c0 	cbnz	w0, 813c4 <CGPIOPin::DisableInterrupt()+0xa4>
   81390:	528000c0 	mov	w0, #0x6                   	// #6
   81394:	f94013f5 	ldr	x21, [sp, #32]
   81398:	b9003a80 	str	w0, [x20, #56]
   8139c:	a94153f3 	ldp	x19, x20, [sp, #16]
   813a0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   813a4:	d65f03c0 	ret
   813a8:	940009e2 	bl	83b30 <EnterCritical>
   813ac:	b9400261 	ldr	w1, [x19]
   813b0:	b9401280 	ldr	w0, [x20, #16]
   813b4:	0a200020 	bic	w0, w1, w0
   813b8:	b9000260 	str	w0, [x19]
   813bc:	b94a1aa0 	ldr	w0, [x21, #2584]
   813c0:	34fffe80 	cbz	w0, 81390 <CGPIOPin::DisableInterrupt()+0x70>
   813c4:	94000a13 	bl	83c10 <LeaveCritical>
   813c8:	528000c0 	mov	w0, #0x6                   	// #6
   813cc:	f94013f5 	ldr	x21, [sp, #32]
   813d0:	b9003a80 	str	w0, [x20, #56]
   813d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   813d8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   813dc:	d65f03c0 	ret
   813e0:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   813e4:	9118a021 	add	x1, x1, #0x628
   813e8:	9107e020 	add	x0, x1, #0x1f8
   813ec:	52801f22 	mov	w2, #0xf9                  	// #249
   813f0:	94000f5c 	bl	85160 <assertion_failed>
   813f4:	b9403a80 	ldr	w0, [x20, #56]
   813f8:	17ffffd7 	b	81354 <CGPIOPin::DisableInterrupt()+0x34>
   813fc:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   81400:	9118a021 	add	x1, x1, #0x628
   81404:	91028020 	add	x0, x1, #0xa0
   81408:	52801ee2 	mov	w2, #0xf7                  	// #247
   8140c:	94000f55 	bl	85160 <assertion_failed>
   81410:	17ffffce 	b	81348 <CGPIOPin::DisableInterrupt()+0x28>
   81414:	d503201f 	nop
   81418:	d503201f 	nop
   8141c:	d503201f 	nop

0000000000081420 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   81420:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81424:	910003fd 	mov	x29, sp
   81428:	a90153f3 	stp	x19, x20, [sp, #16]
   8142c:	aa0003f3 	mov	x19, x0
   81430:	2a0103f4 	mov	w20, w1
   81434:	b9401400 	ldr	w0, [x0, #20]
   81438:	f90013f5 	str	x21, [sp, #32]
   8143c:	7100001f 	cmp	w0, #0x0
   81440:	51000800 	sub	w0, w0, #0x2
   81444:	7a411800 	ccmp	w0, #0x1, #0x0, ne  // ne = any
   81448:	54000848 	b.hi	81550 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x130>  // b.pmore
   8144c:	f9401660 	ldr	x0, [x19, #40]
   81450:	b40005c0 	cbz	x0, 81508 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe8>
   81454:	b9403e60 	ldr	w0, [x19, #60]
   81458:	7100181f 	cmp	w0, #0x6
   8145c:	54000621 	b.ne	81520 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x100>  // b.any
   81460:	7100169f 	cmp	w20, #0x5
   81464:	540006ac 	b.gt	81538 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
   81468:	b9403a60 	ldr	w0, [x19, #56]
   8146c:	6b14001f 	cmp	w0, w20
   81470:	54000400 	b.eq	814f0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd0>  // b.none
   81474:	b9400e62 	ldr	w2, [x19, #12]
   81478:	0b140681 	add	w1, w20, w20, lsl #1
   8147c:	52800983 	mov	w3, #0x4c                  	// #76
   81480:	72bfc403 	movk	w3, #0xfe20, lsl #16
   81484:	b0000055 	adrp	x21, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81488:	b9003e74 	str	w20, [x19, #60]
   8148c:	b94a1aa0 	ldr	w0, [x21, #2584]
   81490:	0b030054 	add	w20, w2, w3
   81494:	0b010a94 	add	w20, w20, w1, lsl #2
   81498:	35000160 	cbnz	w0, 814c4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa4>
   8149c:	b9401261 	ldr	w1, [x19, #16]
   814a0:	b9400280 	ldr	w0, [x20]
   814a4:	2a010000 	orr	w0, w0, w1
   814a8:	b9000280 	str	w0, [x20]
   814ac:	b94a1aa0 	ldr	w0, [x21, #2584]
   814b0:	35000180 	cbnz	w0, 814e0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc0>
   814b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   814b8:	f94013f5 	ldr	x21, [sp, #32]
   814bc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   814c0:	d65f03c0 	ret
   814c4:	9400099b 	bl	83b30 <EnterCritical>
   814c8:	b9401261 	ldr	w1, [x19, #16]
   814cc:	b9400280 	ldr	w0, [x20]
   814d0:	2a010000 	orr	w0, w0, w1
   814d4:	b9000280 	str	w0, [x20]
   814d8:	b94a1aa0 	ldr	w0, [x21, #2584]
   814dc:	34fffec0 	cbz	w0, 814b4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
   814e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   814e4:	f94013f5 	ldr	x21, [sp, #32]
   814e8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   814ec:	140009c9 	b	83c10 <LeaveCritical>
   814f0:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   814f4:	9118a021 	add	x1, x1, #0x628
   814f8:	91088020 	add	x0, x1, #0x220
   814fc:	528021e2 	mov	w2, #0x10f                 	// #271
   81500:	94000f18 	bl	85160 <assertion_failed>
   81504:	17ffffdc 	b	81474 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x54>
   81508:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   8150c:	9118a021 	add	x1, x1, #0x628
   81510:	91068020 	add	x0, x1, #0x1a0
   81514:	52802162 	mov	w2, #0x10b                 	// #267
   81518:	94000f12 	bl	85160 <assertion_failed>
   8151c:	17ffffce 	b	81454 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x34>
   81520:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   81524:	9118a021 	add	x1, x1, #0x628
   81528:	91052020 	add	x0, x1, #0x148
   8152c:	528021a2 	mov	w2, #0x10d                 	// #269
   81530:	94000f0c 	bl	85160 <assertion_failed>
   81534:	17ffffcb 	b	81460 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x40>
   81538:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   8153c:	9118a021 	add	x1, x1, #0x628
   81540:	9106c020 	add	x0, x1, #0x1b0
   81544:	528021c2 	mov	w2, #0x10e                 	// #270
   81548:	94000f06 	bl	85160 <assertion_failed>
   8154c:	17ffffc7 	b	81468 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x48>
   81550:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   81554:	9118a021 	add	x1, x1, #0x628
   81558:	91028020 	add	x0, x1, #0xa0
   8155c:	52802142 	mov	w2, #0x10a                 	// #266
   81560:	94000f00 	bl	85160 <assertion_failed>
   81564:	17ffffba 	b	8144c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x2c>
   81568:	d503201f 	nop
   8156c:	d503201f 	nop

0000000000081570 <CGPIOPin::DisableInterrupt2()>:
   81570:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81574:	910003fd 	mov	x29, sp
   81578:	a90153f3 	stp	x19, x20, [sp, #16]
   8157c:	aa0003f4 	mov	x20, x0
   81580:	b9401400 	ldr	w0, [x0, #20]
   81584:	f90013f5 	str	x21, [sp, #32]
   81588:	7100001f 	cmp	w0, #0x0
   8158c:	51000800 	sub	w0, w0, #0x2
   81590:	7a411800 	ccmp	w0, #0x1, #0x0, ne  // ne = any
   81594:	540005c8 	b.hi	8164c <CGPIOPin::DisableInterrupt2()+0xdc>  // b.pmore
   81598:	b9403e80 	ldr	w0, [x20, #60]
   8159c:	7100141f 	cmp	w0, #0x5
   815a0:	5400048c 	b.gt	81630 <CGPIOPin::DisableInterrupt2()+0xc0>
   815a4:	b9400e81 	ldr	w1, [x20, #12]
   815a8:	0b000413 	add	w19, w0, w0, lsl #1
   815ac:	52800982 	mov	w2, #0x4c                  	// #76
   815b0:	72bfc402 	movk	w2, #0xfe20, lsl #16
   815b4:	b0000055 	adrp	x21, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   815b8:	b94a1aa0 	ldr	w0, [x21, #2584]
   815bc:	0b020021 	add	w1, w1, w2
   815c0:	0b130833 	add	w19, w1, w19, lsl #2
   815c4:	350001a0 	cbnz	w0, 815f8 <CGPIOPin::DisableInterrupt2()+0x88>
   815c8:	b9400261 	ldr	w1, [x19]
   815cc:	b9401280 	ldr	w0, [x20, #16]
   815d0:	0a200020 	bic	w0, w1, w0
   815d4:	b9000260 	str	w0, [x19]
   815d8:	b94a1aa0 	ldr	w0, [x21, #2584]
   815dc:	350001c0 	cbnz	w0, 81614 <CGPIOPin::DisableInterrupt2()+0xa4>
   815e0:	528000c0 	mov	w0, #0x6                   	// #6
   815e4:	f94013f5 	ldr	x21, [sp, #32]
   815e8:	b9003e80 	str	w0, [x20, #60]
   815ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   815f0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   815f4:	d65f03c0 	ret
   815f8:	9400094e 	bl	83b30 <EnterCritical>
   815fc:	b9400261 	ldr	w1, [x19]
   81600:	b9401280 	ldr	w0, [x20, #16]
   81604:	0a200020 	bic	w0, w1, w0
   81608:	b9000260 	str	w0, [x19]
   8160c:	b94a1aa0 	ldr	w0, [x21, #2584]
   81610:	34fffe80 	cbz	w0, 815e0 <CGPIOPin::DisableInterrupt2()+0x70>
   81614:	9400097f 	bl	83c10 <LeaveCritical>
   81618:	528000c0 	mov	w0, #0x6                   	// #6
   8161c:	f94013f5 	ldr	x21, [sp, #32]
   81620:	b9003e80 	str	w0, [x20, #60]
   81624:	a94153f3 	ldp	x19, x20, [sp, #16]
   81628:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8162c:	d65f03c0 	ret
   81630:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   81634:	9118a021 	add	x1, x1, #0x628
   81638:	91090020 	add	x0, x1, #0x240
   8163c:	52802442 	mov	w2, #0x122                 	// #290
   81640:	94000ec8 	bl	85160 <assertion_failed>
   81644:	b9403e80 	ldr	w0, [x20, #60]
   81648:	17ffffd7 	b	815a4 <CGPIOPin::DisableInterrupt2()+0x34>
   8164c:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   81650:	9118a021 	add	x1, x1, #0x628
   81654:	91028020 	add	x0, x1, #0xa0
   81658:	52802402 	mov	w2, #0x120                 	// #288
   8165c:	94000ec1 	bl	85160 <assertion_failed>
   81660:	17ffffce 	b	81598 <CGPIOPin::DisableInterrupt2()+0x28>
   81664:	d503201f 	nop
   81668:	d503201f 	nop
   8166c:	d503201f 	nop

0000000000081670 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   81670:	6a200022 	bics	w2, w1, w0
   81674:	54000080 	b.eq	81684 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x14>  // b.none
   81678:	d2800503 	mov	x3, #0x28                  	// #40
   8167c:	f2bfc403 	movk	x3, #0xfe20, lsl #16
   81680:	b9000062 	str	w2, [x3]
   81684:	6a010000 	ands	w0, w0, w1
   81688:	54000080 	b.eq	81698 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x28>  // b.none
   8168c:	d2800381 	mov	x1, #0x1c                  	// #28
   81690:	f2bfc401 	movk	x1, #0xfe20, lsl #16
   81694:	b9000020 	str	w0, [x1]
   81698:	d65f03c0 	ret
   8169c:	d503201f 	nop

00000000000816a0 <CGPIOPin::ReadAll()>:
   816a0:	d2800680 	mov	x0, #0x34                  	// #52
   816a4:	f2bfc400 	movk	x0, #0xfe20, lsl #16
   816a8:	b9400000 	ldr	w0, [x0]
   816ac:	d65f03c0 	ret

00000000000816b0 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   816b0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   816b4:	910003fd 	mov	x29, sp
   816b8:	a9025bf5 	stp	x21, x22, [sp, #32]
   816bc:	b0000056 	adrp	x22, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   816c0:	a90153f3 	stp	x19, x20, [sp, #16]
   816c4:	aa0003f3 	mov	x19, x0
   816c8:	b94a1ac0 	ldr	w0, [x22, #2584]
   816cc:	f9001bf7 	str	x23, [sp, #48]
   816d0:	2a0103f7 	mov	w23, w1
   816d4:	350003a0 	cbnz	w0, 81748 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x98>
   816d8:	b9400a60 	ldr	w0, [x19, #8]
   816dc:	90000055 	adrp	x21, 89000 <SErrorStub+0xc>
   816e0:	9118a2b5 	add	x21, x21, #0x628
   816e4:	7100d41f 	cmp	w0, #0x35
   816e8:	540003c8 	b.hi	81760 <CGPIOPin::SetPullMode(TGPIOPullMode)+0xb0>  // b.pmore
   816ec:	52800734 	mov	w20, #0x39                  	// #57
   816f0:	72a7f114 	movk	w20, #0x3f88, lsl #16
   816f4:	0b401294 	add	w20, w20, w0, lsr #4
   816f8:	71000aff 	cmp	w23, #0x2
   816fc:	531f0c13 	ubfiz	w19, w0, #1, #4
   81700:	531e7694 	lsl	w20, w20, #2
   81704:	5400044c 	b.gt	8178c <CGPIOPin::SetPullMode(TGPIOPullMode)+0xdc>
   81708:	9109a2b5 	add	x21, x21, #0x268
   8170c:	b9400282 	ldr	w2, [x20]
   81710:	52800061 	mov	w1, #0x3                   	// #3
   81714:	1ad32021 	lsl	w1, w1, w19
   81718:	b877daa0 	ldr	w0, [x21, w23, sxtw #2]
   8171c:	0a210041 	bic	w1, w2, w1
   81720:	1ad32000 	lsl	w0, w0, w19
   81724:	2a010000 	orr	w0, w0, w1
   81728:	b9000280 	str	w0, [x20]
   8172c:	b94a1ac0 	ldr	w0, [x22, #2584]
   81730:	35000240 	cbnz	w0, 81778 <CGPIOPin::SetPullMode(TGPIOPullMode)+0xc8>
   81734:	a94153f3 	ldp	x19, x20, [sp, #16]
   81738:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8173c:	f9401bf7 	ldr	x23, [sp, #48]
   81740:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81744:	d65f03c0 	ret
   81748:	940008fa 	bl	83b30 <EnterCritical>
   8174c:	b9400a60 	ldr	w0, [x19, #8]
   81750:	90000055 	adrp	x21, 89000 <SErrorStub+0xc>
   81754:	9118a2b5 	add	x21, x21, #0x628
   81758:	7100d41f 	cmp	w0, #0x35
   8175c:	54fffc89 	b.ls	816ec <CGPIOPin::SetPullMode(TGPIOPullMode)+0x3c>  // b.plast
   81760:	9100a2a0 	add	x0, x21, #0x28
   81764:	52802be2 	mov	w2, #0x15f                 	// #351
   81768:	aa1503e1 	mov	x1, x21
   8176c:	94000e7d 	bl	85160 <assertion_failed>
   81770:	b9400a60 	ldr	w0, [x19, #8]
   81774:	17ffffde 	b	816ec <CGPIOPin::SetPullMode(TGPIOPullMode)+0x3c>
   81778:	a94153f3 	ldp	x19, x20, [sp, #16]
   8177c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81780:	f9401bf7 	ldr	x23, [sp, #48]
   81784:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81788:	14000922 	b	83c10 <LeaveCritical>
   8178c:	52802c62 	mov	w2, #0x163                 	// #355
   81790:	aa1503e1 	mov	x1, x21
   81794:	9109e2a0 	add	x0, x21, #0x278
   81798:	94000e72 	bl	85160 <assertion_failed>
   8179c:	17ffffdb 	b	81708 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x58>

00000000000817a0 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   817a0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   817a4:	910003fd 	mov	x29, sp
   817a8:	f9001bf7 	str	x23, [sp, #48]
   817ac:	2a0103f7 	mov	w23, w1
   817b0:	b9400801 	ldr	w1, [x0, #8]
   817b4:	a90153f3 	stp	x19, x20, [sp, #16]
   817b8:	a9025bf5 	stp	x21, x22, [sp, #32]
   817bc:	90000055 	adrp	x21, 89000 <SErrorStub+0xc>
   817c0:	9118a2b5 	add	x21, x21, #0x628
   817c4:	7100d43f 	cmp	w1, #0x35
   817c8:	54000588 	b.hi	81878 <CGPIOPin::SetAlternateFunction(unsigned int)+0xd8>  // b.pmore
   817cc:	529999a0 	mov	w0, #0xcccd                	// #52429
   817d0:	72b99980 	movk	w0, #0xcccc, lsl #16
   817d4:	52a7f113 	mov	w19, #0x3f880000            	// #1065877504
   817d8:	710016ff 	cmp	w23, #0x5
   817dc:	9ba07c20 	umull	x0, w1, w0
   817e0:	d363fc00 	lsr	x0, x0, #35
   817e4:	0b000814 	add	w20, w0, w0, lsl #2
   817e8:	0b130000 	add	w0, w0, w19
   817ec:	531e7413 	lsl	w19, w0, #2
   817f0:	4b140434 	sub	w20, w1, w20, lsl #1
   817f4:	0b140694 	add	w20, w20, w20, lsl #1
   817f8:	54000368 	b.hi	81864 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc4>  // b.pmore
   817fc:	b0000056 	adrp	x22, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81800:	b94a1ac0 	ldr	w0, [x22, #2584]
   81804:	35000220 	cbnz	w0, 81848 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa8>
   81808:	910a22b5 	add	x21, x21, #0x288
   8180c:	b9400262 	ldr	w2, [x19]
   81810:	528000e1 	mov	w1, #0x7                   	// #7
   81814:	1ad42021 	lsl	w1, w1, w20
   81818:	b8775aa0 	ldr	w0, [x21, w23, uxtw #2]
   8181c:	0a210041 	bic	w1, w2, w1
   81820:	1ad42014 	lsl	w20, w0, w20
   81824:	2a010294 	orr	w20, w20, w1
   81828:	b9000274 	str	w20, [x19]
   8182c:	b94a1ac0 	ldr	w0, [x22, #2584]
   81830:	35000100 	cbnz	w0, 81850 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
   81834:	a94153f3 	ldp	x19, x20, [sp, #16]
   81838:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8183c:	f9401bf7 	ldr	x23, [sp, #48]
   81840:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81844:	d65f03c0 	ret
   81848:	940008ba 	bl	83b30 <EnterCritical>
   8184c:	17ffffef 	b	81808 <CGPIOPin::SetAlternateFunction(unsigned int)+0x68>
   81850:	a94153f3 	ldp	x19, x20, [sp, #16]
   81854:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81858:	f9401bf7 	ldr	x23, [sp, #48]
   8185c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81860:	140008ec 	b	83c10 <LeaveCritical>
   81864:	52802ee2 	mov	w2, #0x177                 	// #375
   81868:	aa1503e1 	mov	x1, x21
   8186c:	910a82a0 	add	x0, x21, #0x2a0
   81870:	94000e3c 	bl	85160 <assertion_failed>
   81874:	17ffffe2 	b	817fc <CGPIOPin::SetAlternateFunction(unsigned int)+0x5c>
   81878:	aa0003f3 	mov	x19, x0
   8187c:	aa1503e1 	mov	x1, x21
   81880:	52802e62 	mov	w2, #0x173                 	// #371
   81884:	9100a2a0 	add	x0, x21, #0x28
   81888:	94000e36 	bl	85160 <assertion_failed>
   8188c:	b9400a61 	ldr	w1, [x19, #8]
   81890:	17ffffcf 	b	817cc <CGPIOPin::SetAlternateFunction(unsigned int)+0x2c>
   81894:	d503201f 	nop
   81898:	d503201f 	nop
   8189c:	d503201f 	nop

00000000000818a0 <CGPIOPin::InterruptHandler()>:
   818a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   818a4:	910003fd 	mov	x29, sp
   818a8:	f9000bf3 	str	x19, [sp, #16]
   818ac:	aa0003f3 	mov	x19, x0
   818b0:	b9401400 	ldr	w0, [x0, #20]
   818b4:	7100001f 	cmp	w0, #0x0
   818b8:	51000800 	sub	w0, w0, #0x2
   818bc:	7a411800 	ccmp	w0, #0x1, #0x0, ne  // ne = any
   818c0:	54000348 	b.hi	81928 <CGPIOPin::InterruptHandler()+0x88>  // b.pmore
   818c4:	b9403a60 	ldr	w0, [x19, #56]
   818c8:	7100141f 	cmp	w0, #0x5
   818cc:	540000ec 	b.gt	818e8 <CGPIOPin::InterruptHandler()+0x48>
   818d0:	f9401661 	ldr	x1, [x19, #40]
   818d4:	b40001c1 	cbz	x1, 8190c <CGPIOPin::InterruptHandler()+0x6c>
   818d8:	f9401a60 	ldr	x0, [x19, #48]
   818dc:	f9400bf3 	ldr	x19, [sp, #16]
   818e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   818e4:	d61f0020 	br	x1
   818e8:	b9403e60 	ldr	w0, [x19, #60]
   818ec:	7100141f 	cmp	w0, #0x5
   818f0:	54ffff0d 	b.le	818d0 <CGPIOPin::InterruptHandler()+0x30>
   818f4:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   818f8:	9118a021 	add	x1, x1, #0x628
   818fc:	910ac020 	add	x0, x1, #0x2b0
   81900:	52803102 	mov	w2, #0x188                 	// #392
   81904:	94000e17 	bl	85160 <assertion_failed>
   81908:	17fffff2 	b	818d0 <CGPIOPin::InterruptHandler()+0x30>
   8190c:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   81910:	9118a021 	add	x1, x1, #0x628
   81914:	91068020 	add	x0, x1, #0x1a0
   81918:	52803142 	mov	w2, #0x18a                 	// #394
   8191c:	94000e11 	bl	85160 <assertion_failed>
   81920:	f9401661 	ldr	x1, [x19, #40]
   81924:	17ffffed 	b	818d8 <CGPIOPin::InterruptHandler()+0x38>
   81928:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   8192c:	9118a021 	add	x1, x1, #0x628
   81930:	91028020 	add	x0, x1, #0xa0
   81934:	528030c2 	mov	w2, #0x186                 	// #390
   81938:	94000e0a 	bl	85160 <assertion_failed>
   8193c:	17ffffe2 	b	818c4 <CGPIOPin::InterruptHandler()+0x24>

0000000000081940 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   81940:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81944:	910003fd 	mov	x29, sp
   81948:	7100d41f 	cmp	w0, #0x35
   8194c:	a90153f3 	stp	x19, x20, [sp, #16]
   81950:	2a0003f4 	mov	w20, w0
   81954:	f90013f5 	str	x21, [sp, #32]
   81958:	540004e8 	b.hi	819f4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xb4>  // b.pmore
   8195c:	52800273 	mov	w19, #0x13                  	// #19
   81960:	72a7f113 	movk	w19, #0x3f88, lsl #16
   81964:	0b541673 	add	w19, w19, w20, lsr #5
   81968:	b0000055 	adrp	x21, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8196c:	52800021 	mov	w1, #0x1                   	// #1
   81970:	b94a1aa0 	ldr	w0, [x21, #2584]
   81974:	1ad42034 	lsl	w20, w1, w20
   81978:	531e7673 	lsl	w19, w19, #2
   8197c:	35000280 	cbnz	w0, 819cc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
   81980:	d2801160 	mov	x0, #0x8b                  	// #139
   81984:	f2bfc400 	movk	x0, #0xfe20, lsl #16
   81988:	eb00027f 	cmp	x19, x0
   8198c:	54000188 	b.hi	819bc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x7c>  // b.pmore
   81990:	d2801162 	mov	x2, #0x8b                  	// #139
   81994:	f2bfc402 	movk	x2, #0xfe20, lsl #16
   81998:	2a3403e1 	mvn	w1, w20
   8199c:	d503201f 	nop
   819a0:	b9400260 	ldr	w0, [x19]
   819a4:	0a000020 	and	w0, w1, w0
   819a8:	b800c660 	str	w0, [x19], #12
   819ac:	eb02027f 	cmp	x19, x2
   819b0:	54ffff89 	b.ls	819a0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x60>  // b.plast
   819b4:	b94a1aa0 	ldr	w0, [x21, #2584]
   819b8:	35000160 	cbnz	w0, 819e4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
   819bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   819c0:	f94013f5 	ldr	x21, [sp, #32]
   819c4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   819c8:	d65f03c0 	ret
   819cc:	94000859 	bl	83b30 <EnterCritical>
   819d0:	d2801160 	mov	x0, #0x8b                  	// #139
   819d4:	f2bfc400 	movk	x0, #0xfe20, lsl #16
   819d8:	eb00027f 	cmp	x19, x0
   819dc:	54fffda9 	b.ls	81990 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>  // b.plast
   819e0:	17fffff5 	b	819b4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x74>
   819e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   819e8:	f94013f5 	ldr	x21, [sp, #32]
   819ec:	a8c37bfd 	ldp	x29, x30, [sp], #48
   819f0:	14000888 	b	83c10 <LeaveCritical>
   819f4:	90000041 	adrp	x1, 89000 <SErrorStub+0xc>
   819f8:	9118a021 	add	x1, x1, #0x628
   819fc:	910c0020 	add	x0, x1, #0x300
   81a00:	52803202 	mov	w2, #0x190                 	// #400
   81a04:	94000dd7 	bl	85160 <assertion_failed>
   81a08:	17ffffd5 	b	8195c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x1c>
   81a0c:	d503201f 	nop

0000000000081a10 <__static_initialization_and_destruction_0(int, int)>:
   81a10:	529fffe2 	mov	w2, #0xffff                	// #65535
   81a14:	6b02003f 	cmp	w1, w2
   81a18:	7a410800 	ccmp	w0, #0x1, #0x0, eq  // eq = none
   81a1c:	54000040 	b.eq	81a24 <__static_initialization_and_destruction_0(int, int)+0x14>  // b.none
   81a20:	d65f03c0 	ret
   81a24:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81a28:	52800021 	mov	w1, #0x1                   	// #1
   81a2c:	b90a1801 	str	w1, [x0, #2584]
   81a30:	d65f03c0 	ret
	...

0000000000081a40 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   81a40:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81a44:	52800021 	mov	w1, #0x1                   	// #1
   81a48:	b90a1801 	str	w1, [x0, #2584]
   81a4c:	d65f03c0 	ret

0000000000081a50 <CMachineInfo::CMachineInfo()>:
   81a50:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   81a54:	910003fd 	mov	x29, sp
   81a58:	f9000bf3 	str	x19, [sp, #16]
   81a5c:	f90017e0 	str	x0, [sp, #40]
   81a60:	f94017e0 	ldr	x0, [sp, #40]
   81a64:	b900001f 	str	wzr, [x0]
   81a68:	f94017e0 	ldr	x0, [sp, #40]
   81a6c:	52800201 	mov	w1, #0x10                  	// #16
   81a70:	b9000401 	str	w1, [x0, #4]
   81a74:	f94017e0 	ldr	x0, [sp, #40]
   81a78:	b900081f 	str	wzr, [x0, #8]
   81a7c:	f94017e0 	ldr	x0, [sp, #40]
   81a80:	b9000c1f 	str	wzr, [x0, #12]
   81a84:	f94017e0 	ldr	x0, [sp, #40]
   81a88:	52800081 	mov	w1, #0x4                   	// #4
   81a8c:	b9001001 	str	w1, [x0, #16]
   81a90:	f94017e0 	ldr	x0, [sp, #40]
   81a94:	b900141f 	str	wzr, [x0, #20]
   81a98:	f94017e0 	ldr	x0, [sp, #40]
   81a9c:	528e3ea1 	mov	w1, #0x71f5                	// #29173
   81aa0:	79003001 	strh	w1, [x0, #24]
   81aa4:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81aa8:	91288000 	add	x0, x0, #0xa20
   81aac:	f9400000 	ldr	x0, [x0]
   81ab0:	f100001f 	cmp	x0, #0x0
   81ab4:	540004c0 	b.eq	81b4c <CMachineInfo::CMachineInfo()+0xfc>  // b.none
   81ab8:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81abc:	91288000 	add	x0, x0, #0xa20
   81ac0:	f9400000 	ldr	x0, [x0]
   81ac4:	b9400001 	ldr	w1, [x0]
   81ac8:	f94017e0 	ldr	x0, [sp, #40]
   81acc:	b9000001 	str	w1, [x0]
   81ad0:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81ad4:	91288000 	add	x0, x0, #0xa20
   81ad8:	f9400000 	ldr	x0, [x0]
   81adc:	b9400401 	ldr	w1, [x0, #4]
   81ae0:	f94017e0 	ldr	x0, [sp, #40]
   81ae4:	b9000401 	str	w1, [x0, #4]
   81ae8:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81aec:	91288000 	add	x0, x0, #0xa20
   81af0:	f9400000 	ldr	x0, [x0]
   81af4:	b9400801 	ldr	w1, [x0, #8]
   81af8:	f94017e0 	ldr	x0, [sp, #40]
   81afc:	b9000801 	str	w1, [x0, #8]
   81b00:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81b04:	91288000 	add	x0, x0, #0xa20
   81b08:	f9400000 	ldr	x0, [x0]
   81b0c:	b9400c01 	ldr	w1, [x0, #12]
   81b10:	f94017e0 	ldr	x0, [sp, #40]
   81b14:	b9000c01 	str	w1, [x0, #12]
   81b18:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81b1c:	91288000 	add	x0, x0, #0xa20
   81b20:	f9400000 	ldr	x0, [x0]
   81b24:	b9401001 	ldr	w1, [x0, #16]
   81b28:	f94017e0 	ldr	x0, [sp, #40]
   81b2c:	b9001001 	str	w1, [x0, #16]
   81b30:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81b34:	91288000 	add	x0, x0, #0xa20
   81b38:	f9400000 	ldr	x0, [x0]
   81b3c:	b9401401 	ldr	w1, [x0, #20]
   81b40:	f94017e0 	ldr	x0, [sp, #40]
   81b44:	b9001401 	str	w1, [x0, #20]
   81b48:	140000ca 	b	81e70 <CMachineInfo::CMachineInfo()+0x420>
   81b4c:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81b50:	91288000 	add	x0, x0, #0xa20
   81b54:	f94017e1 	ldr	x1, [sp, #40]
   81b58:	f9000001 	str	x1, [x0]
   81b5c:	910163e0 	add	x0, sp, #0x58
   81b60:	52800021 	mov	w1, #0x1                   	// #1
   81b64:	94000da7 	bl	85200 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   81b68:	910123e1 	add	x1, sp, #0x48
   81b6c:	910163e0 	add	x0, sp, #0x58
   81b70:	52800004 	mov	w4, #0x0                   	// #0
   81b74:	52800203 	mov	w3, #0x10                  	// #16
   81b78:	aa0103e2 	mov	x2, x1
   81b7c:	52800021 	mov	w1, #0x1                   	// #1
   81b80:	72a000c1 	movk	w1, #0x6, lsl #16
   81b84:	94000da7 	bl	85220 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   81b88:	12001c00 	and	w0, w0, #0xff
   81b8c:	7100001f 	cmp	w0, #0x0
   81b90:	540000a0 	b.eq	81ba4 <CMachineInfo::CMachineInfo()+0x154>  // b.none
   81b94:	b94057e0 	ldr	w0, [sp, #84]
   81b98:	12003c01 	and	w1, w0, #0xffff
   81b9c:	f94017e0 	ldr	x0, [sp, #40]
   81ba0:	79003001 	strh	w1, [x0, #24]
   81ba4:	9100e3e1 	add	x1, sp, #0x38
   81ba8:	910163e0 	add	x0, sp, #0x58
   81bac:	52800004 	mov	w4, #0x0                   	// #0
   81bb0:	52800203 	mov	w3, #0x10                  	// #16
   81bb4:	aa0103e2 	mov	x2, x1
   81bb8:	52800041 	mov	w1, #0x2                   	// #2
   81bbc:	72a00021 	movk	w1, #0x1, lsl #16
   81bc0:	94000d98 	bl	85220 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   81bc4:	12001c00 	and	w0, w0, #0xff
   81bc8:	52000000 	eor	w0, w0, #0x1
   81bcc:	12001c00 	and	w0, w0, #0xff
   81bd0:	7100001f 	cmp	w0, #0x0
   81bd4:	54000060 	b.eq	81be0 <CMachineInfo::CMachineInfo()+0x190>  // b.none
   81bd8:	52800013 	mov	w19, #0x0                   	// #0
   81bdc:	140000a2 	b	81e64 <CMachineInfo::CMachineInfo()+0x414>
   81be0:	b94047e1 	ldr	w1, [sp, #68]
   81be4:	f94017e0 	ldr	x0, [sp, #40]
   81be8:	b9000001 	str	w1, [x0]
   81bec:	f94017e0 	ldr	x0, [sp, #40]
   81bf0:	b9400000 	ldr	w0, [x0]
   81bf4:	12090000 	and	w0, w0, #0x800000
   81bf8:	7100001f 	cmp	w0, #0x0
   81bfc:	54000c80 	b.eq	81d8c <CMachineInfo::CMachineInfo()+0x33c>  // b.none
   81c00:	f94017e0 	ldr	x0, [sp, #40]
   81c04:	b9400000 	ldr	w0, [x0]
   81c08:	53047c00 	lsr	w0, w0, #4
   81c0c:	12001c00 	and	w0, w0, #0xff
   81c10:	b90067e0 	str	w0, [sp, #100]
   81c14:	b9006fff 	str	wzr, [sp, #108]
   81c18:	b9406fe0 	ldr	w0, [sp, #108]
   81c1c:	7100341f 	cmp	w0, #0xd
   81c20:	54000248 	b.hi	81c68 <CMachineInfo::CMachineInfo()+0x218>  // b.pmore
   81c24:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81c28:	911d6002 	add	x2, x0, #0x758
   81c2c:	b9406fe1 	ldr	w1, [sp, #108]
   81c30:	aa0103e0 	mov	x0, x1
   81c34:	d37ff800 	lsl	x0, x0, #1
   81c38:	8b010000 	add	x0, x0, x1
   81c3c:	d37ef400 	lsl	x0, x0, #2
   81c40:	8b000040 	add	x0, x2, x0
   81c44:	b9400000 	ldr	w0, [x0]
   81c48:	b94067e1 	ldr	w1, [sp, #100]
   81c4c:	6b00003f 	cmp	w1, w0
   81c50:	540000a0 	b.eq	81c64 <CMachineInfo::CMachineInfo()+0x214>  // b.none
   81c54:	b9406fe0 	ldr	w0, [sp, #108]
   81c58:	11000400 	add	w0, w0, #0x1
   81c5c:	b9006fe0 	str	w0, [sp, #108]
   81c60:	17ffffee 	b	81c18 <CMachineInfo::CMachineInfo()+0x1c8>
   81c64:	d503201f 	nop
   81c68:	b9406fe0 	ldr	w0, [sp, #108]
   81c6c:	7100341f 	cmp	w0, #0xd
   81c70:	54000069 	b.ls	81c7c <CMachineInfo::CMachineInfo()+0x22c>  // b.plast
   81c74:	52800013 	mov	w19, #0x0                   	// #0
   81c78:	1400007b 	b	81e64 <CMachineInfo::CMachineInfo()+0x414>
   81c7c:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81c80:	911d6002 	add	x2, x0, #0x758
   81c84:	b9406fe1 	ldr	w1, [sp, #108]
   81c88:	aa0103e0 	mov	x0, x1
   81c8c:	d37ff800 	lsl	x0, x0, #1
   81c90:	8b010000 	add	x0, x0, x1
   81c94:	d37ef400 	lsl	x0, x0, #2
   81c98:	8b000040 	add	x0, x2, x0
   81c9c:	b9400401 	ldr	w1, [x0, #4]
   81ca0:	f94017e0 	ldr	x0, [sp, #40]
   81ca4:	b9000401 	str	w1, [x0, #4]
   81ca8:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81cac:	911d6002 	add	x2, x0, #0x758
   81cb0:	b9406fe1 	ldr	w1, [sp, #108]
   81cb4:	aa0103e0 	mov	x0, x1
   81cb8:	d37ff800 	lsl	x0, x0, #1
   81cbc:	8b010000 	add	x0, x0, x1
   81cc0:	d37ef400 	lsl	x0, x0, #2
   81cc4:	8b000040 	add	x0, x2, x0
   81cc8:	b9400801 	ldr	w1, [x0, #8]
   81ccc:	f94017e0 	ldr	x0, [sp, #40]
   81cd0:	b9000801 	str	w1, [x0, #8]
   81cd4:	f94017e0 	ldr	x0, [sp, #40]
   81cd8:	b9400000 	ldr	w0, [x0]
   81cdc:	12000c00 	and	w0, w0, #0xf
   81ce0:	11000401 	add	w1, w0, #0x1
   81ce4:	f94017e0 	ldr	x0, [sp, #40]
   81ce8:	b9000c01 	str	w1, [x0, #12]
   81cec:	f94017e0 	ldr	x0, [sp, #40]
   81cf0:	b9400000 	ldr	w0, [x0]
   81cf4:	530c7c00 	lsr	w0, w0, #12
   81cf8:	12000c01 	and	w1, w0, #0xf
   81cfc:	f94017e0 	ldr	x0, [sp, #40]
   81d00:	b9001001 	str	w1, [x0, #16]
   81d04:	f94017e0 	ldr	x0, [sp, #40]
   81d08:	b9400000 	ldr	w0, [x0]
   81d0c:	53147c00 	lsr	w0, w0, #20
   81d10:	12000800 	and	w0, w0, #0x7
   81d14:	52802001 	mov	w1, #0x100                 	// #256
   81d18:	1ac02020 	lsl	w0, w1, w0
   81d1c:	2a0003e1 	mov	w1, w0
   81d20:	f94017e0 	ldr	x0, [sp, #40]
   81d24:	b9001401 	str	w1, [x0, #20]
   81d28:	f94017e0 	ldr	x0, [sp, #40]
   81d2c:	b9401000 	ldr	w0, [x0, #16]
   81d30:	71000c1f 	cmp	w0, #0x3
   81d34:	5400008d 	b.le	81d44 <CMachineInfo::CMachineInfo()+0x2f4>
   81d38:	f94017e0 	ldr	x0, [sp, #40]
   81d3c:	52800081 	mov	w1, #0x4                   	// #4
   81d40:	b9001001 	str	w1, [x0, #16]
   81d44:	f94017e0 	ldr	x0, [sp, #40]
   81d48:	b9400400 	ldr	w0, [x0, #4]
   81d4c:	71000c1f 	cmp	w0, #0x3
   81d50:	54000881 	b.ne	81e60 <CMachineInfo::CMachineInfo()+0x410>  // b.any
   81d54:	f94017e0 	ldr	x0, [sp, #40]
   81d58:	b9401400 	ldr	w0, [x0, #20]
   81d5c:	7104001f 	cmp	w0, #0x100
   81d60:	54000801 	b.ne	81e60 <CMachineInfo::CMachineInfo()+0x410>  // b.any
   81d64:	f94017e0 	ldr	x0, [sp, #40]
   81d68:	b9400c00 	ldr	w0, [x0, #12]
   81d6c:	7100041f 	cmp	w0, #0x1
   81d70:	54000061 	b.ne	81d7c <CMachineInfo::CMachineInfo()+0x32c>  // b.any
   81d74:	52800020 	mov	w0, #0x1                   	// #1
   81d78:	14000002 	b	81d80 <CMachineInfo::CMachineInfo()+0x330>
   81d7c:	52800040 	mov	w0, #0x2                   	// #2
   81d80:	f94017e1 	ldr	x1, [sp, #40]
   81d84:	b9000420 	str	w0, [x1, #4]
   81d88:	14000036 	b	81e60 <CMachineInfo::CMachineInfo()+0x410>
   81d8c:	b9006bff 	str	wzr, [sp, #104]
   81d90:	b9406be0 	ldr	w0, [sp, #104]
   81d94:	7100401f 	cmp	w0, #0x10
   81d98:	54000208 	b.hi	81dd8 <CMachineInfo::CMachineInfo()+0x388>  // b.pmore
   81d9c:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81da0:	91192001 	add	x1, x0, #0x648
   81da4:	b9406be0 	ldr	w0, [sp, #104]
   81da8:	d37cec00 	lsl	x0, x0, #4
   81dac:	8b000020 	add	x0, x1, x0
   81db0:	b9400001 	ldr	w1, [x0]
   81db4:	f94017e0 	ldr	x0, [sp, #40]
   81db8:	b9400000 	ldr	w0, [x0]
   81dbc:	6b00003f 	cmp	w1, w0
   81dc0:	540000a0 	b.eq	81dd4 <CMachineInfo::CMachineInfo()+0x384>  // b.none
   81dc4:	b9406be0 	ldr	w0, [sp, #104]
   81dc8:	11000400 	add	w0, w0, #0x1
   81dcc:	b9006be0 	str	w0, [sp, #104]
   81dd0:	17fffff0 	b	81d90 <CMachineInfo::CMachineInfo()+0x340>
   81dd4:	d503201f 	nop
   81dd8:	b9406be0 	ldr	w0, [sp, #104]
   81ddc:	7100401f 	cmp	w0, #0x10
   81de0:	54000069 	b.ls	81dec <CMachineInfo::CMachineInfo()+0x39c>  // b.plast
   81de4:	52800013 	mov	w19, #0x0                   	// #0
   81de8:	1400001f 	b	81e64 <CMachineInfo::CMachineInfo()+0x414>
   81dec:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81df0:	91192001 	add	x1, x0, #0x648
   81df4:	b9406be0 	ldr	w0, [sp, #104]
   81df8:	d37cec00 	lsl	x0, x0, #4
   81dfc:	8b000020 	add	x0, x1, x0
   81e00:	b9400401 	ldr	w1, [x0, #4]
   81e04:	f94017e0 	ldr	x0, [sp, #40]
   81e08:	b9000401 	str	w1, [x0, #4]
   81e0c:	f94017e0 	ldr	x0, [sp, #40]
   81e10:	52800021 	mov	w1, #0x1                   	// #1
   81e14:	b9000801 	str	w1, [x0, #8]
   81e18:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81e1c:	91192001 	add	x1, x0, #0x648
   81e20:	b9406be0 	ldr	w0, [sp, #104]
   81e24:	d37cec00 	lsl	x0, x0, #4
   81e28:	8b000020 	add	x0, x1, x0
   81e2c:	b9400801 	ldr	w1, [x0, #8]
   81e30:	f94017e0 	ldr	x0, [sp, #40]
   81e34:	b9000c01 	str	w1, [x0, #12]
   81e38:	f94017e0 	ldr	x0, [sp, #40]
   81e3c:	b900101f 	str	wzr, [x0, #16]
   81e40:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81e44:	91192001 	add	x1, x0, #0x648
   81e48:	b9406be0 	ldr	w0, [sp, #104]
   81e4c:	d37cec00 	lsl	x0, x0, #4
   81e50:	8b000020 	add	x0, x1, x0
   81e54:	b9400c01 	ldr	w1, [x0, #12]
   81e58:	f94017e0 	ldr	x0, [sp, #40]
   81e5c:	b9001401 	str	w1, [x0, #20]
   81e60:	52800033 	mov	w19, #0x1                   	// #1
   81e64:	910163e0 	add	x0, sp, #0x58
   81e68:	94000cea 	bl	85210 <CBcmPropertyTags::~CBcmPropertyTags()>
   81e6c:	7100067f 	cmp	w19, #0x1
   81e70:	f9400bf3 	ldr	x19, [sp, #16]
   81e74:	a8c77bfd 	ldp	x29, x30, [sp], #112
   81e78:	d65f03c0 	ret

0000000000081e7c <CMachineInfo::~CMachineInfo()>:
   81e7c:	b0000041 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81e80:	52800203 	mov	w3, #0x10                  	// #16
   81e84:	f9451022 	ldr	x2, [x1, #2592]
   81e88:	b9000403 	str	w3, [x0, #4]
   81e8c:	eb00005f 	cmp	x2, x0
   81e90:	54000040 	b.eq	81e98 <CMachineInfo::~CMachineInfo()+0x1c>  // b.none
   81e94:	d65f03c0 	ret
   81e98:	f905103f 	str	xzr, [x1, #2592]
   81e9c:	d65f03c0 	ret

0000000000081ea0 <CMachineInfo::GetMachineModel() const>:
   81ea0:	b9400400 	ldr	w0, [x0, #4]
   81ea4:	d65f03c0 	ret

0000000000081ea8 <CMachineInfo::GetMachineName() const>:
   81ea8:	b9800401 	ldrsw	x1, [x0, #4]
   81eac:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81eb0:	91192000 	add	x0, x0, #0x648
   81eb4:	9106e000 	add	x0, x0, #0x1b8
   81eb8:	f8617800 	ldr	x0, [x0, x1, lsl #3]
   81ebc:	d65f03c0 	ret

0000000000081ec0 <CMachineInfo::GetModelMajor() const>:
   81ec0:	b9400800 	ldr	w0, [x0, #8]
   81ec4:	d65f03c0 	ret

0000000000081ec8 <CMachineInfo::GetModelRevision() const>:
   81ec8:	b9400c00 	ldr	w0, [x0, #12]
   81ecc:	d65f03c0 	ret

0000000000081ed0 <CMachineInfo::GetSoCType() const>:
   81ed0:	b9401000 	ldr	w0, [x0, #16]
   81ed4:	d65f03c0 	ret

0000000000081ed8 <CMachineInfo::GetRAMSize() const>:
   81ed8:	b9401400 	ldr	w0, [x0, #20]
   81edc:	d65f03c0 	ret

0000000000081ee0 <CMachineInfo::GetSoCName() const>:
   81ee0:	b9801001 	ldrsw	x1, [x0, #16]
   81ee4:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81ee8:	91192000 	add	x0, x0, #0x648
   81eec:	91090000 	add	x0, x0, #0x240
   81ef0:	f8617800 	ldr	x0, [x0, x1, lsl #3]
   81ef4:	d65f03c0 	ret

0000000000081ef8 <CMachineInfo::GetRevisionRaw() const>:
   81ef8:	b9400000 	ldr	w0, [x0]
   81efc:	d65f03c0 	ret

0000000000081f00 <CMachineInfo::GetActLEDInfo() const>:
   81f00:	b9800401 	ldrsw	x1, [x0, #4]
   81f04:	b0000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   81f08:	91192000 	add	x0, x0, #0x648
   81f0c:	9109a000 	add	x0, x0, #0x268
   81f10:	b8617800 	ldr	w0, [x0, x1, lsl #2]
   81f14:	d65f03c0 	ret

0000000000081f18 <CMachineInfo::GetClockRate(unsigned int) const>:
   81f18:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   81f1c:	910003fd 	mov	x29, sp
   81f20:	a90153f3 	stp	x19, x20, [sp, #16]
   81f24:	2a0103f3 	mov	w19, w1
   81f28:	aa0003f4 	mov	x20, x0
   81f2c:	52800001 	mov	w1, #0x0                   	// #0
   81f30:	910083e0 	add	x0, sp, #0x20
   81f34:	94000cb3 	bl	85200 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   81f38:	910083e0 	add	x0, sp, #0x20
   81f3c:	52800041 	mov	w1, #0x2                   	// #2
   81f40:	72a00061 	movk	w1, #0x3, lsl #16
   81f44:	52800084 	mov	w4, #0x4                   	// #4
   81f48:	b90037f3 	str	w19, [sp, #52]
   81f4c:	52800283 	mov	w3, #0x14                  	// #20
   81f50:	9100a3e2 	add	x2, sp, #0x28
   81f54:	94000cb3 	bl	85220 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   81f58:	72001c1f 	tst	w0, #0xff
   81f5c:	54000381 	b.ne	81fcc <CMachineInfo::GetClockRate(unsigned int) const+0xb4>  // b.any
   81f60:	71000a7f 	cmp	w19, #0x2
   81f64:	540005c0 	b.eq	8201c <CMachineInfo::GetClockRate(unsigned int) const+0x104>  // b.none
   81f68:	7100127f 	cmp	w19, #0x4
   81f6c:	540003e0 	b.eq	81fe8 <CMachineInfo::GetClockRate(unsigned int) const+0xd0>  // b.none
   81f70:	7100067f 	cmp	w19, #0x1
   81f74:	540001c0 	b.eq	81fac <CMachineInfo::GetClockRate(unsigned int) const+0x94>  // b.none
   81f78:	90000040 	adrp	x0, 89000 <SErrorStub+0xc>
   81f7c:	91250000 	add	x0, x0, #0x940
   81f80:	91062001 	add	x1, x0, #0x188
   81f84:	52802822 	mov	w2, #0x141                 	// #321
   81f88:	91066000 	add	x0, x0, #0x198
   81f8c:	52800013 	mov	w19, #0x0                   	// #0
   81f90:	94000c74 	bl	85160 <assertion_failed>
   81f94:	910083e0 	add	x0, sp, #0x20
   81f98:	94000c9e 	bl	85210 <CBcmPropertyTags::~CBcmPropertyTags()>
   81f9c:	2a1303e0 	mov	w0, w19
   81fa0:	a94153f3 	ldp	x19, x20, [sp, #16]
   81fa4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81fa8:	d65f03c0 	ret
   81fac:	910083e0 	add	x0, sp, #0x20
   81fb0:	529c2013 	mov	w19, #0xe100                	// #57600
   81fb4:	72a0beb3 	movk	w19, #0x5f5, lsl #16
   81fb8:	94000c96 	bl	85210 <CBcmPropertyTags::~CBcmPropertyTags()>
   81fbc:	2a1303e0 	mov	w0, w19
   81fc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   81fc4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81fc8:	d65f03c0 	ret
   81fcc:	b9403bf3 	ldr	w19, [sp, #56]
   81fd0:	910083e0 	add	x0, sp, #0x20
   81fd4:	94000c8f 	bl	85210 <CBcmPropertyTags::~CBcmPropertyTags()>
   81fd8:	2a1303e0 	mov	w0, w19
   81fdc:	a94153f3 	ldp	x19, x20, [sp, #16]
   81fe0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   81fe4:	d65f03c0 	ret
   81fe8:	b9400a81 	ldr	w1, [x20, #8]
   81fec:	52946000 	mov	w0, #0xa300                	// #41728
   81ff0:	72a23c20 	movk	w0, #0x11e1, lsl #16
   81ff4:	52965013 	mov	w19, #0xb280                	// #45696
   81ff8:	72a1dcd3 	movk	w19, #0xee6, lsl #16
   81ffc:	71000c3f 	cmp	w1, #0x3
   82000:	1a803273 	csel	w19, w19, w0, cc  // cc = lo, ul, last
   82004:	910083e0 	add	x0, sp, #0x20
   82008:	94000c82 	bl	85210 <CBcmPropertyTags::~CBcmPropertyTags()>
   8200c:	2a1303e0 	mov	w0, w19
   82010:	a94153f3 	ldp	x19, x20, [sp, #16]
   82014:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82018:	d65f03c0 	ret
   8201c:	910083e0 	add	x0, sp, #0x20
   82020:	528d8013 	mov	w19, #0x6c00                	// #27648
   82024:	72a05b93 	movk	w19, #0x2dc, lsl #16
   82028:	94000c7a 	bl	85210 <CBcmPropertyTags::~CBcmPropertyTags()>
   8202c:	2a1303e0 	mov	w0, w19
   82030:	a94153f3 	ldp	x19, x20, [sp, #16]
   82034:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82038:	d65f03c0 	ret

000000000008203c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   8203c:	7100d83f 	cmp	w1, #0x36
   82040:	540002c0 	b.eq	82098 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>  // b.none
   82044:	7100dc3f 	cmp	w1, #0x37
   82048:	54000101 	b.ne	82068 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x2c>  // b.any
   8204c:	b9400402 	ldr	w2, [x0, #4]
   82050:	52800501 	mov	w1, #0x28                  	// #40
   82054:	528005a0 	mov	w0, #0x2d                  	// #45
   82058:	71000c5f 	cmp	w2, #0x3
   8205c:	1a80c021 	csel	w1, w1, w0, gt
   82060:	2a0103e0 	mov	w0, w1
   82064:	d65f03c0 	ret
   82068:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   8206c:	91250000 	add	x0, x0, #0x940
   82070:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82074:	91062001 	add	x1, x0, #0x188
   82078:	910003fd 	mov	x29, sp
   8207c:	91066000 	add	x0, x0, #0x198
   82080:	52802f42 	mov	w2, #0x17a                 	// #378
   82084:	94000c37 	bl	85160 <assertion_failed>
   82088:	52800001 	mov	w1, #0x0                   	// #0
   8208c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   82090:	2a0103e0 	mov	w0, w1
   82094:	d65f03c0 	ret
   82098:	b9400402 	ldr	w2, [x0, #4]
   8209c:	52800501 	mov	w1, #0x28                  	// #40
   820a0:	71000c5f 	cmp	w2, #0x3
   820a4:	54fffded 	b.le	82060 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   820a8:	b9400802 	ldr	w2, [x0, #8]
   820ac:	52800520 	mov	w0, #0x29                  	// #41
   820b0:	528005a1 	mov	w1, #0x2d                  	// #45
   820b4:	71000c5f 	cmp	w2, #0x3
   820b8:	1a803021 	csel	w1, w1, w0, cc  // cc = lo, ul, last
   820bc:	2a0103e0 	mov	w0, w1
   820c0:	d65f03c0 	ret

00000000000820c4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   820c4:	b9400800 	ldr	w0, [x0, #8]
   820c8:	71000c1f 	cmp	w0, #0x3
   820cc:	54000108 	b.hi	820ec <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>  // b.pmore
   820d0:	7100043f 	cmp	w1, #0x1
   820d4:	540001a0 	b.eq	82108 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>  // b.none
   820d8:	7100183f 	cmp	w1, #0x6
   820dc:	528ca000 	mov	w0, #0x6500                	// #25856
   820e0:	72a3b9a0 	movk	w0, #0x1dcd, lsl #16
   820e4:	1a9f0000 	csel	w0, w0, wzr, eq  // eq = none
   820e8:	d65f03c0 	ret
   820ec:	7100043f 	cmp	w1, #0x1
   820f0:	54000120 	b.eq	82114 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>  // b.none
   820f4:	7100183f 	cmp	w1, #0x6
   820f8:	5282f000 	mov	w0, #0x1780                	// #6016
   820fc:	72a59680 	movk	w0, #0x2cb4, lsl #16
   82100:	1a9f0000 	csel	w0, w0, wzr, eq  // eq = none
   82104:	d65f03c0 	ret
   82108:	529f0000 	mov	w0, #0xf800                	// #63488
   8210c:	72a02480 	movk	w0, #0x124, lsl #16
   82110:	d65f03c0 	ret
   82114:	529f3000 	mov	w0, #0xf980                	// #63872
   82118:	72a066e0 	movk	w0, #0x337, lsl #16
   8211c:	d65f03c0 	ret

0000000000082120 <CMachineInfo::GetDevice(TDeviceId) const>:
   82120:	350000a1 	cbnz	w1, 82134 <CMachineInfo::GetDevice(TDeviceId) const+0x14>
   82124:	b9400400 	ldr	w0, [x0, #4]
   82128:	7100041f 	cmp	w0, #0x1
   8212c:	1a9f07e0 	cset	w0, ne  // ne = any
   82130:	d65f03c0 	ret
   82134:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   82138:	91250000 	add	x0, x0, #0x940
   8213c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82140:	91062001 	add	x1, x0, #0x188
   82144:	910003fd 	mov	x29, sp
   82148:	91066000 	add	x0, x0, #0x198
   8214c:	528036a2 	mov	w2, #0x1b5                 	// #437
   82150:	94000c04 	bl	85160 <assertion_failed>
   82154:	52800000 	mov	w0, #0x0                   	// #0
   82158:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8215c:	d65f03c0 	ret

0000000000082160 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   82160:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   82164:	910003fd 	mov	x29, sp
   82168:	f0000022 	adrp	x2, 89000 <SErrorStub+0xc>
   8216c:	91250042 	add	x2, x2, #0x940
   82170:	a90363f7 	stp	x23, x24, [sp, #48]
   82174:	90000057 	adrp	x23, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   82178:	91062058 	add	x24, x2, #0x188
   8217c:	a90153f3 	stp	x19, x20, [sp, #16]
   82180:	aa0003f4 	mov	x20, x0
   82184:	f94512f3 	ldr	x19, [x23, #2592]
   82188:	a9025bf5 	stp	x21, x22, [sp, #32]
   8218c:	2a0103f6 	mov	w22, w1
   82190:	91068055 	add	x21, x2, #0x1a0
   82194:	b40002b3 	cbz	x19, 821e8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x88>
   82198:	eb13029f 	cmp	x20, x19
   8219c:	aa1303f4 	mov	x20, x19
   821a0:	54ffffa1 	b.ne	82194 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x34>  // b.any
   821a4:	721c6edf 	tst	w22, #0xfffffff0
   821a8:	540002c1 	b.ne	82200 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa0>  // b.any
   821ac:	71001edf 	cmp	w22, #0x7
   821b0:	540005a8 	b.hi	82264 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x104>  // b.pmore
   821b4:	79403262 	ldrh	w2, [x19, #24]
   821b8:	1ad62840 	asr	w0, w2, w22
   821bc:	36000340 	tbz	w0, #0, 82224 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc4>
   821c0:	52800021 	mov	w1, #0x1                   	// #1
   821c4:	2a1603e0 	mov	w0, w22
   821c8:	a94363f7 	ldp	x23, x24, [sp, #48]
   821cc:	1ad62021 	lsl	w1, w1, w22
   821d0:	0a210041 	bic	w1, w2, w1
   821d4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   821d8:	79003261 	strh	w1, [x19, #24]
   821dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   821e0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   821e4:	d65f03c0 	ret
   821e8:	528037c2 	mov	w2, #0x1be                 	// #446
   821ec:	aa1803e1 	mov	x1, x24
   821f0:	aa1503e0 	mov	x0, x21
   821f4:	94000bdb 	bl	85160 <assertion_failed>
   821f8:	f94512f3 	ldr	x19, [x23, #2592]
   821fc:	17ffffe7 	b	82198 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x38>
   82200:	79403262 	ldrh	w2, [x19, #24]
   82204:	710206df 	cmp	w22, #0x81
   82208:	1a9f07e1 	cset	w1, ne  // ne = any
   8220c:	11001821 	add	w1, w1, #0x6
   82210:	1ac12840 	asr	w0, w2, w1
   82214:	37000140 	tbnz	w0, #0, 8223c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xdc>
   82218:	51000421 	sub	w1, w1, #0x1
   8221c:	3100043f 	cmn	w1, #0x1
   82220:	54ffff81 	b.ne	82210 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xb0>  // b.any
   82224:	52801000 	mov	w0, #0x80                  	// #128
   82228:	a94153f3 	ldp	x19, x20, [sp, #16]
   8222c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82230:	a94363f7 	ldp	x23, x24, [sp, #48]
   82234:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82238:	d65f03c0 	ret
   8223c:	52800023 	mov	w3, #0x1                   	// #1
   82240:	2a0103e0 	mov	w0, w1
   82244:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82248:	1ac12061 	lsl	w1, w3, w1
   8224c:	0a210042 	bic	w2, w2, w1
   82250:	a94363f7 	ldp	x23, x24, [sp, #48]
   82254:	79003262 	strh	w2, [x19, #24]
   82258:	a94153f3 	ldp	x19, x20, [sp, #16]
   8225c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82260:	d65f03c0 	ret
   82264:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   82268:	91250000 	add	x0, x0, #0x940
   8226c:	91062001 	add	x1, x0, #0x188
   82270:	528038e2 	mov	w2, #0x1c7                 	// #455
   82274:	9106c000 	add	x0, x0, #0x1b0
   82278:	94000bba 	bl	85160 <assertion_failed>
   8227c:	17ffffce 	b	821b4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x54>

0000000000082280 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   82280:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   82284:	910003fd 	mov	x29, sp
   82288:	f0000022 	adrp	x2, 89000 <SErrorStub+0xc>
   8228c:	91250042 	add	x2, x2, #0x940
   82290:	a90363f7 	stp	x23, x24, [sp, #48]
   82294:	90000057 	adrp	x23, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   82298:	91062058 	add	x24, x2, #0x188
   8229c:	a90153f3 	stp	x19, x20, [sp, #16]
   822a0:	aa0003f4 	mov	x20, x0
   822a4:	f94512f3 	ldr	x19, [x23, #2592]
   822a8:	a9025bf5 	stp	x21, x22, [sp, #32]
   822ac:	2a0103f6 	mov	w22, w1
   822b0:	91068055 	add	x21, x2, #0x1a0
   822b4:	b4000253 	cbz	x19, 822fc <CMachineInfo::FreeDMAChannel(unsigned int)+0x7c>
   822b8:	eb13029f 	cmp	x20, x19
   822bc:	aa1303f4 	mov	x20, x19
   822c0:	54ffffa1 	b.ne	822b4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x34>  // b.any
   822c4:	71001edf 	cmp	w22, #0x7
   822c8:	54000268 	b.hi	82314 <CMachineInfo::FreeDMAChannel(unsigned int)+0x94>  // b.pmore
   822cc:	79403261 	ldrh	w1, [x19, #24]
   822d0:	1ad62820 	asr	w0, w1, w22
   822d4:	37000320 	tbnz	w0, #0, 82338 <CMachineInfo::FreeDMAChannel(unsigned int)+0xb8>
   822d8:	52800020 	mov	w0, #0x1                   	// #1
   822dc:	a94363f7 	ldp	x23, x24, [sp, #48]
   822e0:	1ad62000 	lsl	w0, w0, w22
   822e4:	2a010000 	orr	w0, w0, w1
   822e8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   822ec:	79003260 	strh	w0, [x19, #24]
   822f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   822f4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   822f8:	d65f03c0 	ret
   822fc:	52803c62 	mov	w2, #0x1e3                 	// #483
   82300:	aa1803e1 	mov	x1, x24
   82304:	aa1503e0 	mov	x0, x21
   82308:	94000b96 	bl	85160 <assertion_failed>
   8230c:	f94512f3 	ldr	x19, [x23, #2592]
   82310:	17ffffea 	b	822b8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x38>
   82314:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   82318:	91250000 	add	x0, x0, #0x940
   8231c:	91062001 	add	x1, x0, #0x188
   82320:	52803d62 	mov	w2, #0x1eb                 	// #491
   82324:	9106c000 	add	x0, x0, #0x1b0
   82328:	94000b8e 	bl	85160 <assertion_failed>
   8232c:	79403261 	ldrh	w1, [x19, #24]
   82330:	1ad62820 	asr	w0, w1, w22
   82334:	3607fd20 	tbz	w0, #0, 822d8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x58>
   82338:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   8233c:	91250000 	add	x0, x0, #0x940
   82340:	91062001 	add	x1, x0, #0x188
   82344:	52803d82 	mov	w2, #0x1ec                 	// #492
   82348:	91074000 	add	x0, x0, #0x1d0
   8234c:	94000b85 	bl	85160 <assertion_failed>
   82350:	79403261 	ldrh	w1, [x19, #24]
   82354:	17ffffe1 	b	822d8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x58>

0000000000082358 <CMachineInfo::Get()>:
   82358:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8235c:	910003fd 	mov	x29, sp
   82360:	f9000bf3 	str	x19, [sp, #16]
   82364:	90000053 	adrp	x19, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   82368:	f9451260 	ldr	x0, [x19, #2592]
   8236c:	b4000080 	cbz	x0, 8237c <CMachineInfo::Get()+0x24>
   82370:	f9400bf3 	ldr	x19, [sp, #16]
   82374:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82378:	d65f03c0 	ret
   8237c:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   82380:	91250000 	add	x0, x0, #0x940
   82384:	91062001 	add	x1, x0, #0x188
   82388:	52803e42 	mov	w2, #0x1f2                 	// #498
   8238c:	91068000 	add	x0, x0, #0x1a0
   82390:	94000b74 	bl	85160 <assertion_failed>
   82394:	f9451260 	ldr	x0, [x19, #2592]
   82398:	17fffff6 	b	82370 <CMachineInfo::Get()+0x18>
   8239c:	00000000 	.inst	0x00000000 ; undefined

00000000000823a0 <__aeabi_atexit>:
   823a0:	d65f03c0 	ret
   823a4:	d503201f 	nop
   823a8:	d503201f 	nop
   823ac:	d503201f 	nop

00000000000823b0 <__cxa_atexit>:
   823b0:	d65f03c0 	ret
   823b4:	d503201f 	nop
   823b8:	d503201f 	nop
   823bc:	d503201f 	nop

00000000000823c0 <__errno>:
   823c0:	90000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   823c4:	9128a000 	add	x0, x0, #0xa28
   823c8:	91002000 	add	x0, x0, #0x8
   823cc:	d65f03c0 	ret

00000000000823d0 <halt>:
   823d0:	d50342df 	msr	daifset, #0x2
   823d4:	d50341df 	msr	daifset, #0x1
   823d8:	d5033f9f 	dsb	sy
   823dc:	d503207f 	wfi
   823e0:	17fffffe 	b	823d8 <halt+0x8>
   823e4:	d503201f 	nop
   823e8:	d503201f 	nop
   823ec:	d503201f 	nop

00000000000823f0 <reboot>:
   823f0:	d2800482 	mov	x2, #0x24                  	// #36
   823f4:	f2bfc202 	movk	x2, #0xfe10, lsl #16
   823f8:	52800023 	mov	w3, #0x1                   	// #1
   823fc:	72ab4003 	movk	w3, #0x5a00, lsl #16
   82400:	d2800380 	mov	x0, #0x1c                  	// #28
   82404:	f2bfc200 	movk	x0, #0xfe10, lsl #16
   82408:	52800401 	mov	w1, #0x20                  	// #32
   8240c:	72ab4001 	movk	w1, #0x5a00, lsl #16
   82410:	b9000043 	str	w3, [x2]
   82414:	b9000001 	str	w1, [x0]
   82418:	14000000 	b	82418 <reboot+0x28>
   8241c:	d503201f 	nop

0000000000082420 <sysinit>:
   82420:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   82424:	910003fd 	mov	x29, sp
   82428:	a90153f3 	stp	x19, x20, [sp, #16]
   8242c:	d50341ff 	msr	daifclr, #0x1
   82430:	90000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   82434:	91284000 	add	x0, x0, #0xa10
   82438:	90000041 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8243c:	912c6021 	add	x1, x1, #0xb18
   82440:	eb01001f 	cmp	x0, x1
   82444:	54000082 	b.cs	82454 <sysinit+0x34>  // b.hs, b.nlast
   82448:	3800141f 	strb	wzr, [x0], #1
   8244c:	eb01001f 	cmp	x0, x1
   82450:	54ffffc1 	b.ne	82448 <sysinit+0x28>  // b.any
   82454:	910083e0 	add	x0, sp, #0x20
   82458:	97fffd7e 	bl	81a50 <CMachineInfo::CMachineInfo()>
   8245c:	90000054 	adrp	x20, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   82460:	9118a281 	add	x1, x20, #0x628
   82464:	90000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   82468:	91192000 	add	x0, x0, #0x648
   8246c:	eb00003f 	cmp	x1, x0
   82470:	54000182 	b.cs	824a0 <sysinit+0x80>  // b.hs, b.nlast
   82474:	d1000414 	sub	x20, x0, #0x1
   82478:	aa0103f3 	mov	x19, x1
   8247c:	cb010294 	sub	x20, x20, x1
   82480:	927df294 	and	x20, x20, #0xfffffffffffffff8
   82484:	91002294 	add	x20, x20, #0x8
   82488:	8b010294 	add	x20, x20, x1
   8248c:	d503201f 	nop
   82490:	f8408660 	ldr	x0, [x19], #8
   82494:	d63f0000 	blr	x0
   82498:	eb14027f 	cmp	x19, x20
   8249c:	54ffffa1 	b.ne	82490 <sysinit+0x70>  // b.any
   824a0:	97fff8d8 	bl	80800 <main>
   824a4:	7100041f 	cmp	w0, #0x1
   824a8:	54000040 	b.eq	824b0 <sysinit+0x90>  // b.none
   824ac:	97ffffc9 	bl	823d0 <halt>
   824b0:	940004c8 	bl	837d0 <IsChainBootEnabled>
   824b4:	72001c1f 	tst	w0, #0xff
   824b8:	54000041 	b.ne	824c0 <sysinit+0xa0>  // b.any
   824bc:	97ffffcd 	bl	823f0 <reboot>
   824c0:	d50341df 	msr	daifset, #0x1
   824c4:	940004cb 	bl	837f0 <DoChainBoot>
   824c8:	97ffffca 	bl	823f0 <reboot>
   824cc:	00000000 	.inst	0x00000000 ; undefined

00000000000824d0 <CTimer::SimpleusDelay(unsigned int) [clone .part.2]>:
   824d0:	11000400 	add	w0, w0, #0x1
   824d4:	d5033fdf 	isb
   824d8:	d53be023 	mrs	x3, cntpct_el0
   824dc:	d53be002 	mrs	x2, cntfrq_el0
   824e0:	d2884801 	mov	x1, #0x4240                	// #16960
   824e4:	f2a001e1 	movk	x1, #0xf, lsl #16
   824e8:	aa0103e4 	mov	x4, x1
   824ec:	9b017c63 	mul	x3, x3, x1
   824f0:	9ac20863 	udiv	x3, x3, x2
   824f4:	d503201f 	nop
   824f8:	d5033fdf 	isb
   824fc:	d53be021 	mrs	x1, cntpct_el0
   82500:	d53be002 	mrs	x2, cntfrq_el0
   82504:	9b047c21 	mul	x1, x1, x4
   82508:	9ac20821 	udiv	x1, x1, x2
   8250c:	4b030021 	sub	w1, w1, w3
   82510:	6b01001f 	cmp	w0, w1
   82514:	54ffff28 	b.hi	824f8 <CTimer::SimpleusDelay(unsigned int) [clone .part.2]+0x28>  // b.pmore
   82518:	d65f03c0 	ret
   8251c:	d503201f 	nop

0000000000082520 <CTimer::CTimer(CInterruptSystem*)>:
   82520:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82524:	910003fd 	mov	x29, sp
   82528:	d2800022 	mov	x2, #0x1                   	// #1
   8252c:	a90153f3 	stp	x19, x20, [sp, #16]
   82530:	aa0003f3 	mov	x19, x0
   82534:	91008000 	add	x0, x0, #0x20
   82538:	90000054 	adrp	x20, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8253c:	b9000e7f 	str	wzr, [x19, #12]
   82540:	b900127f 	str	wzr, [x19, #16]
   82544:	f9000261 	str	x1, [x19]
   82548:	b900167f 	str	wzr, [x19, #20]
   8254c:	f9000e62 	str	x2, [x19, #24]
   82550:	94000f54 	bl	862a0 <CPtrList::CPtrList()>
   82554:	d2800022 	mov	x2, #0x1                   	// #1
   82558:	52801901 	mov	w1, #0xc8                  	// #200
   8255c:	f9451e80 	ldr	x0, [x20, #2616]
   82560:	f2c1a802 	movk	x2, #0xd40, lsl #32
   82564:	f2e00062 	movk	x2, #0x3, lsl #48
   82568:	f9001e7f 	str	xzr, [x19, #56]
   8256c:	b9003261 	str	w1, [x19, #48]
   82570:	f9001662 	str	x2, [x19, #40]
   82574:	b50000a0 	cbnz	x0, 82588 <CTimer::CTimer(CInterruptSystem*)+0x68>
   82578:	f9051e93 	str	x19, [x20, #2616]
   8257c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82580:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82584:	d65f03c0 	ret
   82588:	f0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   8258c:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   82590:	912dc021 	add	x1, x1, #0xb70
   82594:	912e0000 	add	x0, x0, #0xb80
   82598:	52800822 	mov	w2, #0x41                  	// #65
   8259c:	94000af1 	bl	85160 <assertion_failed>
   825a0:	17fffff6 	b	82578 <CTimer::CTimer(CInterruptSystem*)+0x58>
   825a4:	d503201f 	nop
   825a8:	d503201f 	nop
   825ac:	d503201f 	nop

00000000000825b0 <CTimer::~CTimer()>:
   825b0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   825b4:	910003fd 	mov	x29, sp
   825b8:	a90153f3 	stp	x19, x20, [sp, #16]
   825bc:	a9025bf5 	stp	x21, x22, [sp, #32]
   825c0:	aa0003f5 	mov	x21, x0
   825c4:	a90363f7 	stp	x23, x24, [sp, #48]
   825c8:	f9400000 	ldr	x0, [x0]
   825cc:	b4000620 	cbz	x0, 82690 <CTimer::~CTimer()+0xe0>
   825d0:	52800001 	mov	w1, #0x0                   	// #0
   825d4:	d51be221 	msr	cntp_ctl_el0, x1
   825d8:	528003c1 	mov	w1, #0x1e                  	// #30
   825dc:	5289a876 	mov	w22, #0x4d43                	// #19779
   825e0:	72a96a96 	movk	w22, #0x4b54, lsl #16
   825e4:	f0000037 	adrp	x23, 89000 <SErrorStub+0xc>
   825e8:	912dc2f7 	add	x23, x23, #0xb70
   825ec:	910082b5 	add	x21, x21, #0x20
   825f0:	94000858 	bl	84750 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   825f4:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   825f8:	912ea018 	add	x24, x0, #0xba8
   825fc:	1400000d 	b	82630 <CTimer::~CTimer()+0x80>
   82600:	94000f58 	bl	86360 <CPtrList::GetPtr(TPtrListElement*)>
   82604:	aa0003f4 	mov	x20, x0
   82608:	b40003a0 	cbz	x0, 8267c <CTimer::~CTimer()+0xcc>
   8260c:	b9400280 	ldr	w0, [x20]
   82610:	6b16001f 	cmp	w0, w22
   82614:	54000281 	b.ne	82664 <CTimer::~CTimer()+0xb4>  // b.any
   82618:	aa1303e1 	mov	x1, x19
   8261c:	aa1503e0 	mov	x0, x21
   82620:	94001008 	bl	86640 <CPtrList::Remove(TPtrListElement*)>
   82624:	aa1403e0 	mov	x0, x20
   82628:	d2800501 	mov	x1, #0x28                  	// #40
   8262c:	94000951 	bl	84b70 <operator delete(void*, unsigned long)>
   82630:	aa1503e0 	mov	x0, x21
   82634:	94000f2b 	bl	862e0 <CPtrList::GetFirst()>
   82638:	aa0003f3 	mov	x19, x0
   8263c:	aa1503e0 	mov	x0, x21
   82640:	aa1303e1 	mov	x1, x19
   82644:	b5fffdf3 	cbnz	x19, 82600 <CTimer::~CTimer()+0x50>
   82648:	90000041 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8264c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82650:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82654:	a94363f7 	ldp	x23, x24, [sp, #48]
   82658:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8265c:	f9051c3f 	str	xzr, [x1, #2616]
   82660:	14000f14 	b	862b0 <CPtrList::~CPtrList()>
   82664:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   82668:	52800b22 	mov	w2, #0x59                  	// #89
   8266c:	912ee000 	add	x0, x0, #0xbb8
   82670:	aa1703e1 	mov	x1, x23
   82674:	94000abb 	bl	85160 <assertion_failed>
   82678:	17ffffe8 	b	82618 <CTimer::~CTimer()+0x68>
   8267c:	52800b02 	mov	w2, #0x58                  	// #88
   82680:	aa1703e1 	mov	x1, x23
   82684:	aa1803e0 	mov	x0, x24
   82688:	94000ab6 	bl	85160 <assertion_failed>
   8268c:	17ffffe0 	b	8260c <CTimer::~CTimer()+0x5c>
   82690:	f0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   82694:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   82698:	912e4000 	add	x0, x0, #0xb90
   8269c:	912dc021 	add	x1, x1, #0xb70
   826a0:	528008e2 	mov	w2, #0x47                  	// #71
   826a4:	94000aaf 	bl	85160 <assertion_failed>
   826a8:	f94002a0 	ldr	x0, [x21]
   826ac:	17ffffc9 	b	825d0 <CTimer::~CTimer()+0x20>

00000000000826b0 <CTimer::SetTimeZone(int)>:
   826b0:	11167c22 	add	w2, w1, #0x59f
   826b4:	712cf85f 	cmp	w2, #0xb3e
   826b8:	54000089 	b.ls	826c8 <CTimer::SetTimeZone(int)+0x18>  // b.plast
   826bc:	52800002 	mov	w2, #0x0                   	// #0
   826c0:	2a0203e0 	mov	w0, w2
   826c4:	d65f03c0 	ret
   826c8:	52800022 	mov	w2, #0x1                   	// #1
   826cc:	b9001c01 	str	w1, [x0, #28]
   826d0:	2a0203e0 	mov	w0, w2
   826d4:	d65f03c0 	ret
   826d8:	d503201f 	nop
   826dc:	d503201f 	nop

00000000000826e0 <CTimer::GetTimeZone() const>:
   826e0:	b9401c00 	ldr	w0, [x0, #28]
   826e4:	d65f03c0 	ret
   826e8:	d503201f 	nop
   826ec:	d503201f 	nop

00000000000826f0 <CTimer::SetTime(unsigned int, bool)>:
   826f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   826f4:	910003fd 	mov	x29, sp
   826f8:	72001c5f 	tst	w2, #0xff
   826fc:	a90153f3 	stp	x19, x20, [sp, #16]
   82700:	aa0003f3 	mov	x19, x0
   82704:	2a0103f4 	mov	w20, w1
   82708:	540000e1 	b.ne	82724 <CTimer::SetTime(unsigned int, bool)+0x34>  // b.any
   8270c:	b9401c00 	ldr	w0, [x0, #28]
   82710:	531c6c02 	lsl	w2, w0, #4
   82714:	4b000042 	sub	w2, w2, w0
   82718:	531e7442 	lsl	w2, w2, #2
   8271c:	37f80122 	tbnz	w2, #31, 82740 <CTimer::SetTime(unsigned int, bool)+0x50>
   82720:	0b020294 	add	w20, w20, w2
   82724:	b9401a60 	ldr	w0, [x19, #24]
   82728:	35000180 	cbnz	w0, 82758 <CTimer::SetTime(unsigned int, bool)+0x68>
   8272c:	52800020 	mov	w0, #0x1                   	// #1
   82730:	b9001674 	str	w20, [x19, #20]
   82734:	a94153f3 	ldp	x19, x20, [sp, #16]
   82738:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8273c:	d65f03c0 	ret
   82740:	4b0203e1 	neg	w1, w2
   82744:	52800000 	mov	w0, #0x0                   	// #0
   82748:	6b14003f 	cmp	w1, w20
   8274c:	54ffff4c 	b.gt	82734 <CTimer::SetTime(unsigned int, bool)+0x44>
   82750:	0b020294 	add	w20, w20, w2
   82754:	17fffff4 	b	82724 <CTimer::SetTime(unsigned int, bool)+0x34>
   82758:	940004f6 	bl	83b30 <EnterCritical>
   8275c:	b9401a60 	ldr	w0, [x19, #24]
   82760:	b9001674 	str	w20, [x19, #20]
   82764:	340000c0 	cbz	w0, 8277c <CTimer::SetTime(unsigned int, bool)+0x8c>
   82768:	9400052a 	bl	83c10 <LeaveCritical>
   8276c:	52800020 	mov	w0, #0x1                   	// #1
   82770:	a94153f3 	ldp	x19, x20, [sp, #16]
   82774:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82778:	d65f03c0 	ret
   8277c:	52800020 	mov	w0, #0x1                   	// #1
   82780:	17ffffed 	b	82734 <CTimer::SetTime(unsigned int, bool)+0x44>
   82784:	d503201f 	nop
   82788:	d503201f 	nop
   8278c:	d503201f 	nop

0000000000082790 <CTimer::GetClockTicks()>:
   82790:	d5033fdf 	isb
   82794:	d53be021 	mrs	x1, cntpct_el0
   82798:	d53be002 	mrs	x2, cntfrq_el0
   8279c:	d2884800 	mov	x0, #0x4240                	// #16960
   827a0:	f2a001e0 	movk	x0, #0xf, lsl #16
   827a4:	9b007c20 	mul	x0, x1, x0
   827a8:	9ac20800 	udiv	x0, x0, x2
   827ac:	d65f03c0 	ret

00000000000827b0 <CTimer::GetTicks() const>:
   827b0:	b9400c00 	ldr	w0, [x0, #12]
   827b4:	d65f03c0 	ret
   827b8:	d503201f 	nop
   827bc:	d503201f 	nop

00000000000827c0 <CTimer::GetUptime() const>:
   827c0:	b9401000 	ldr	w0, [x0, #16]
   827c4:	d65f03c0 	ret
   827c8:	d503201f 	nop
   827cc:	d503201f 	nop

00000000000827d0 <CTimer::GetTime() const>:
   827d0:	b9401400 	ldr	w0, [x0, #20]
   827d4:	d65f03c0 	ret
   827d8:	d503201f 	nop
   827dc:	d503201f 	nop

00000000000827e0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   827e0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   827e4:	910003fd 	mov	x29, sp
   827e8:	a90153f3 	stp	x19, x20, [sp, #16]
   827ec:	aa0003f3 	mov	x19, x0
   827f0:	b9401800 	ldr	w0, [x0, #24]
   827f4:	a9025bf5 	stp	x21, x22, [sp, #32]
   827f8:	aa0103f5 	mov	x21, x1
   827fc:	aa0203f6 	mov	x22, x2
   82800:	f9001bf7 	str	x23, [sp, #48]
   82804:	350002a0 	cbnz	w0, 82858 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x78>
   82808:	b9401677 	ldr	w23, [x19, #20]
   8280c:	b9400e74 	ldr	w20, [x19, #12]
   82810:	b4000335 	cbz	x21, 82874 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x94>
   82814:	b90002b7 	str	w23, [x21]
   82818:	b40003d6 	cbz	x22, 82890 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   8281c:	5290a3e0 	mov	w0, #0x851f                	// #34079
   82820:	72aa3d60 	movk	w0, #0x51eb, lsl #16
   82824:	f9401bf7 	ldr	x23, [sp, #48]
   82828:	52800c82 	mov	w2, #0x64                  	// #100
   8282c:	5284e201 	mov	w1, #0x2710                	// #10000
   82830:	9ba07e80 	umull	x0, w20, w0
   82834:	d365fc00 	lsr	x0, x0, #37
   82838:	1b02d000 	msub	w0, w0, w2, w20
   8283c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82840:	1b017c00 	mul	w0, w0, w1
   82844:	b90002c0 	str	w0, [x22]
   82848:	52800020 	mov	w0, #0x1                   	// #1
   8284c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82850:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82854:	d65f03c0 	ret
   82858:	940004b6 	bl	83b30 <EnterCritical>
   8285c:	b9401677 	ldr	w23, [x19, #20]
   82860:	b9400e74 	ldr	w20, [x19, #12]
   82864:	b9401a60 	ldr	w0, [x19, #24]
   82868:	34fffd40 	cbz	w0, 82810 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x30>
   8286c:	940004e9 	bl	83c10 <LeaveCritical>
   82870:	b5fffd35 	cbnz	x21, 82814 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x34>
   82874:	f0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   82878:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   8287c:	912dc021 	add	x1, x1, #0xb70
   82880:	912f8000 	add	x0, x0, #0xbe0
   82884:	52802082 	mov	w2, #0x104                 	// #260
   82888:	94000a36 	bl	85160 <assertion_failed>
   8288c:	17ffffe2 	b	82814 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x34>
   82890:	f0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   82894:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   82898:	912dc021 	add	x1, x1, #0xb70
   8289c:	912fc000 	add	x0, x0, #0xbf0
   828a0:	528020e2 	mov	w2, #0x107                 	// #263
   828a4:	94000a2f 	bl	85160 <assertion_failed>
   828a8:	17ffffdd 	b	8281c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x3c>
   828ac:	d503201f 	nop

00000000000828b0 <CTimer::GetUniversalTime() const>:
   828b0:	b9401c02 	ldr	w2, [x0, #28]
   828b4:	b9401401 	ldr	w1, [x0, #20]
   828b8:	531c6c40 	lsl	w0, w2, #4
   828bc:	4b020000 	sub	w0, w0, w2
   828c0:	531e7400 	lsl	w0, w0, #2
   828c4:	6b000020 	subs	w0, w1, w0
   828c8:	1a9fa000 	csel	w0, w0, wzr, ge  // ge = tcont
   828cc:	d65f03c0 	ret

00000000000828d0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   828d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   828d4:	910003fd 	mov	x29, sp
   828d8:	a90153f3 	stp	x19, x20, [sp, #16]
   828dc:	aa0003f4 	mov	x20, x0
   828e0:	b9401800 	ldr	w0, [x0, #24]
   828e4:	a9025bf5 	stp	x21, x22, [sp, #32]
   828e8:	a90363f7 	stp	x23, x24, [sp, #48]
   828ec:	aa0103f7 	mov	x23, x1
   828f0:	aa0203f8 	mov	x24, x2
   828f4:	350003a0 	cbnz	w0, 82968 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x98>
   828f8:	b9401695 	ldr	w21, [x20, #20]
   828fc:	b9400e96 	ldr	w22, [x20, #12]
   82900:	52800000 	mov	w0, #0x0                   	// #0
   82904:	b9401e81 	ldr	w1, [x20, #28]
   82908:	531c6c33 	lsl	w19, w1, #4
   8290c:	4b010273 	sub	w19, w19, w1
   82910:	531e7673 	lsl	w19, w19, #2
   82914:	6b1302bf 	cmp	w21, w19
   82918:	540001eb 	b.lt	82954 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>  // b.tstop
   8291c:	b4000437 	cbz	x23, 829a0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   82920:	4b1302b3 	sub	w19, w21, w19
   82924:	b90002f3 	str	w19, [x23]
   82928:	b40002f8 	cbz	x24, 82984 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb4>
   8292c:	5290a3e1 	mov	w1, #0x851f                	// #34079
   82930:	72aa3d61 	movk	w1, #0x51eb, lsl #16
   82934:	52800c83 	mov	w3, #0x64                  	// #100
   82938:	5284e202 	mov	w2, #0x2710                	// #10000
   8293c:	9ba17ec1 	umull	x1, w22, w1
   82940:	52800020 	mov	w0, #0x1                   	// #1
   82944:	d365fc21 	lsr	x1, x1, #37
   82948:	1b03d821 	msub	w1, w1, w3, w22
   8294c:	1b027c21 	mul	w1, w1, w2
   82950:	b9000301 	str	w1, [x24]
   82954:	a94153f3 	ldp	x19, x20, [sp, #16]
   82958:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8295c:	a94363f7 	ldp	x23, x24, [sp, #48]
   82960:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82964:	d65f03c0 	ret
   82968:	94000472 	bl	83b30 <EnterCritical>
   8296c:	b9401695 	ldr	w21, [x20, #20]
   82970:	b9400e96 	ldr	w22, [x20, #12]
   82974:	b9401a80 	ldr	w0, [x20, #24]
   82978:	34fffc40 	cbz	w0, 82900 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x30>
   8297c:	940004a5 	bl	83c10 <LeaveCritical>
   82980:	17ffffe0 	b	82900 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x30>
   82984:	f0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   82988:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   8298c:	912dc021 	add	x1, x1, #0xb70
   82990:	912fc000 	add	x0, x0, #0xbf0
   82994:	52802582 	mov	w2, #0x12c                 	// #300
   82998:	940009f2 	bl	85160 <assertion_failed>
   8299c:	17ffffe4 	b	8292c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x5c>
   829a0:	f0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   829a4:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   829a8:	912dc021 	add	x1, x1, #0xb70
   829ac:	912f8000 	add	x0, x0, #0xbe0
   829b0:	52802522 	mov	w2, #0x129                 	// #297
   829b4:	940009eb 	bl	85160 <assertion_failed>
   829b8:	17ffffda 	b	82920 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x50>
   829bc:	d503201f 	nop

00000000000829c0 <CTimer::GetTimeString()>:
   829c0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   829c4:	910003fd 	mov	x29, sp
   829c8:	a90153f3 	stp	x19, x20, [sp, #16]
   829cc:	aa0003f3 	mov	x19, x0
   829d0:	b9401800 	ldr	w0, [x0, #24]
   829d4:	a9025bf5 	stp	x21, x22, [sp, #32]
   829d8:	a9046bf9 	stp	x25, x26, [sp, #64]
   829dc:	35000e40 	cbnz	w0, 82ba4 <CTimer::GetTimeString()+0x1e4>
   829e0:	b9401675 	ldr	w21, [x19, #20]
   829e4:	b9400e7a 	ldr	w26, [x19, #12]
   829e8:	2a1a02a0 	orr	w0, w21, w26
   829ec:	34000ec0 	cbz	w0, 82bc4 <CTimer::GetTimeString()+0x204>
   829f0:	a90363f7 	stp	x23, x24, [sp, #48]
   829f4:	52911137 	mov	w23, #0x8889                	// #34953
   829f8:	72b11117 	movk	w23, #0x8888, lsl #16
   829fc:	529678b6 	mov	w22, #0xb3c5                	// #46021
   82a00:	72b23456 	movk	w22, #0x91a2, lsl #16
   82a04:	9bb77eb8 	umull	x24, w21, w23
   82a08:	5288a0f3 	mov	w19, #0x4507                	// #17671
   82a0c:	72b845d3 	movk	w19, #0xc22e, lsl #16
   82a10:	9bb67eb6 	umull	x22, w21, w22
   82a14:	5290a3e8 	mov	w8, #0x851f                	// #34079
   82a18:	72aa3d68 	movk	w8, #0x51eb, lsl #16
   82a1c:	9bb37eb3 	umull	x19, w21, w19
   82a20:	5280f654 	mov	w20, #0x7b2                 	// #1970
   82a24:	52800c87 	mov	w7, #0x64                  	// #100
   82a28:	d360ff18 	lsr	x24, x24, #32
   82a2c:	52803205 	mov	w5, #0x190                 	// #400
   82a30:	53057f01 	lsr	w1, w24, #5
   82a34:	d36bfed6 	lsr	x22, x22, #43
   82a38:	531c6c20 	lsl	w0, w1, #4
   82a3c:	d370fe73 	lsr	x19, x19, #48
   82a40:	9bb77c37 	umull	x23, w1, w23
   82a44:	4b010018 	sub	w24, w0, w1
   82a48:	4b180ab8 	sub	w24, w21, w24, lsl #2
   82a4c:	d365fef7 	lsr	x23, x23, #37
   82a50:	531c6ee0 	lsl	w0, w23, #4
   82a54:	4b170017 	sub	w23, w0, w23
   82a58:	4b170837 	sub	w23, w1, w23, lsl #2
   82a5c:	14000003 	b	82a68 <CTimer::GetTimeString()+0xa8>
   82a60:	4b000273 	sub	w19, w19, w0
   82a64:	11000694 	add	w20, w20, #0x1
   82a68:	9ba87e80 	umull	x0, w20, w8
   82a6c:	f240069f 	tst	x20, #0x3
   82a70:	1a9f17e2 	cset	w2, eq  // eq = none
   82a74:	d360fc00 	lsr	x0, x0, #32
   82a78:	53057c01 	lsr	w1, w0, #5
   82a7c:	1b07d021 	msub	w1, w1, w7, w20
   82a80:	350000a1 	cbnz	w1, 82a94 <CTimer::GetTimeString()+0xd4>
   82a84:	53077c00 	lsr	w0, w0, #7
   82a88:	1b05d000 	msub	w0, w0, w5, w20
   82a8c:	7100001f 	cmp	w0, #0x0
   82a90:	1a9f17e2 	cset	w2, eq  // eq = none
   82a94:	1105b440 	add	w0, w2, #0x16d
   82a98:	6b00027f 	cmp	w19, w0
   82a9c:	54fffe22 	b.cs	82a60 <CTimer::GetTimeString()+0xa0>  // b.hs, b.nlast
   82aa0:	f0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   82aa4:	912ce021 	add	x1, x1, #0xb38
   82aa8:	52800015 	mov	w21, #0x0                   	// #0
   82aac:	14000003 	b	82ab8 <CTimer::GetTimeString()+0xf8>
   82ab0:	4b000273 	sub	w19, w19, w0
   82ab4:	110006b5 	add	w21, w21, #0x1
   82ab8:	7100005f 	cmp	w2, #0x0
   82abc:	7a411aa0 	ccmp	w21, #0x1, #0x0, ne  // ne = any
   82ac0:	540003e0 	b.eq	82b3c <CTimer::GetTimeString()+0x17c>  // b.none
   82ac4:	b8755820 	ldr	w0, [x1, w21, uxtw #2]
   82ac8:	6b00027f 	cmp	w19, w0
   82acc:	54ffff22 	b.cs	82ab0 <CTimer::GetTimeString()+0xf0>  // b.hs, b.nlast
   82ad0:	5290a3f9 	mov	w25, #0x851f                	// #34079
   82ad4:	72aa3d79 	movk	w25, #0x51eb, lsl #16
   82ad8:	52800c81 	mov	w1, #0x64                  	// #100
   82adc:	d2800400 	mov	x0, #0x20                  	// #32
   82ae0:	9bb97f59 	umull	x25, w26, w25
   82ae4:	d365ff39 	lsr	x25, x25, #37
   82ae8:	1b01eb39 	msub	w25, w25, w1, w26
   82aec:	94000811 	bl	84b30 <operator new(unsigned long)>
   82af0:	aa0003fa 	mov	x26, x0
   82af4:	94000f9f 	bl	86970 <CString::CString()>
   82af8:	711ede9f 	cmp	w20, #0x7b7
   82afc:	54000248 	b.hi	82b44 <CTimer::GetTimeString()+0x184>  // b.pmore
   82b00:	f0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   82b04:	2a1903e5 	mov	w5, w25
   82b08:	2a1803e4 	mov	w4, w24
   82b0c:	2a1703e3 	mov	w3, w23
   82b10:	2a1603e2 	mov	w2, w22
   82b14:	aa1a03e0 	mov	x0, x26
   82b18:	9130a021 	add	x1, x1, #0xc28
   82b1c:	94001431 	bl	87be0 <CString::Format(char const*, ...)>
   82b20:	aa1a03e0 	mov	x0, x26
   82b24:	a94153f3 	ldp	x19, x20, [sp, #16]
   82b28:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82b2c:	a94363f7 	ldp	x23, x24, [sp, #48]
   82b30:	a9446bf9 	ldp	x25, x26, [sp, #64]
   82b34:	a8c57bfd 	ldp	x29, x30, [sp], #80
   82b38:	d65f03c0 	ret
   82b3c:	528003a0 	mov	w0, #0x1d                  	// #29
   82b40:	17ffffe2 	b	82ac8 <CTimer::GetTimeString()+0x108>
   82b44:	52955564 	mov	w4, #0xaaab                	// #43691
   82b48:	72b55544 	movk	w4, #0xaaaa, lsl #16
   82b4c:	90000040 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   82b50:	9123e000 	add	x0, x0, #0x8f8
   82b54:	9ba47ec4 	umull	x4, w22, w4
   82b58:	f0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   82b5c:	2a1903e7 	mov	w7, w25
   82b60:	2a1803e6 	mov	w6, w24
   82b64:	2a1703e5 	mov	w5, w23
   82b68:	f8755802 	ldr	x2, [x0, w21, uxtw #3]
   82b6c:	11000663 	add	w3, w19, #0x1
   82b70:	aa1a03e0 	mov	x0, x26
   82b74:	d364fc84 	lsr	x4, x4, #36
   82b78:	91302021 	add	x1, x1, #0xc08
   82b7c:	0b040484 	add	w4, w4, w4, lsl #1
   82b80:	4b040ec4 	sub	w4, w22, w4, lsl #3
   82b84:	94001417 	bl	87be0 <CString::Format(char const*, ...)>
   82b88:	aa1a03e0 	mov	x0, x26
   82b8c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82b90:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82b94:	a94363f7 	ldp	x23, x24, [sp, #48]
   82b98:	a9446bf9 	ldp	x25, x26, [sp, #64]
   82b9c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   82ba0:	d65f03c0 	ret
   82ba4:	940003e3 	bl	83b30 <EnterCritical>
   82ba8:	b9401675 	ldr	w21, [x19, #20]
   82bac:	b9400e7a 	ldr	w26, [x19, #12]
   82bb0:	b9401a60 	ldr	w0, [x19, #24]
   82bb4:	34fff1a0 	cbz	w0, 829e8 <CTimer::GetTimeString()+0x28>
   82bb8:	94000416 	bl	83c10 <LeaveCritical>
   82bbc:	2a1a02a0 	orr	w0, w21, w26
   82bc0:	35fff180 	cbnz	w0, 829f0 <CTimer::GetTimeString()+0x30>
   82bc4:	d280001a 	mov	x26, #0x0                   	// #0
   82bc8:	a94153f3 	ldp	x19, x20, [sp, #16]
   82bcc:	aa1a03e0 	mov	x0, x26
   82bd0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82bd4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   82bd8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   82bdc:	d65f03c0 	ret

0000000000082be0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>:
   82be0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   82be4:	910003fd 	mov	x29, sp
   82be8:	a90363f7 	stp	x23, x24, [sp, #48]
   82bec:	aa0003f8 	mov	x24, x0
   82bf0:	d2800500 	mov	x0, #0x28                  	// #40
   82bf4:	a90153f3 	stp	x19, x20, [sp, #16]
   82bf8:	2a0103f4 	mov	w20, w1
   82bfc:	aa0203f3 	mov	x19, x2
   82c00:	a9025bf5 	stp	x21, x22, [sp, #32]
   82c04:	a9060fe4 	stp	x4, x3, [sp, #96]
   82c08:	940007ca 	bl	84b30 <operator new(unsigned long)>
   82c0c:	b9400f15 	ldr	w21, [x24, #12]
   82c10:	aa0003f7 	mov	x23, x0
   82c14:	a9460fe4 	ldp	x4, x3, [sp, #96]
   82c18:	0b1402b5 	add	w21, w21, w20
   82c1c:	b4000b13 	cbz	x19, 82d7c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x19c>
   82c20:	5289a860 	mov	w0, #0x4d43                	// #19779
   82c24:	72a96a80 	movk	w0, #0x4b54, lsl #16
   82c28:	f90006f3 	str	x19, [x23, #8]
   82c2c:	b90012f5 	str	w21, [x23, #16]
   82c30:	b90002e0 	str	w0, [x23]
   82c34:	b9402b00 	ldr	w0, [x24, #40]
   82c38:	a90192e3 	stp	x3, x4, [x23, #24]
   82c3c:	350009c0 	cbnz	w0, 82d74 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x194>
   82c40:	91008314 	add	x20, x24, #0x20
   82c44:	aa1403e0 	mov	x0, x20
   82c48:	94000da6 	bl	862e0 <CPtrList::GetFirst()>
   82c4c:	aa0003f3 	mov	x19, x0
   82c50:	b4000780 	cbz	x0, 82d40 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x160>
   82c54:	5289a876 	mov	w22, #0x4d43                	// #19779
   82c58:	72a96a96 	movk	w22, #0x4b54, lsl #16
   82c5c:	a9046bf9 	stp	x25, x26, [sp, #64]
   82c60:	f0000039 	adrp	x25, 89000 <SErrorStub+0xc>
   82c64:	912dc339 	add	x25, x25, #0xb70
   82c68:	f000003a 	adrp	x26, 89000 <SErrorStub+0xc>
   82c6c:	9131035a 	add	x26, x26, #0xc40
   82c70:	f9002bfb 	str	x27, [sp, #80]
   82c74:	1400000d 	b	82ca8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xc8>
   82c78:	b9400360 	ldr	w0, [x27]
   82c7c:	6b16001f 	cmp	w0, w22
   82c80:	540002c1 	b.ne	82cd8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xf8>  // b.any
   82c84:	b9401362 	ldr	w2, [x27, #16]
   82c88:	aa1303e1 	mov	x1, x19
   82c8c:	aa1403e0 	mov	x0, x20
   82c90:	4b150042 	sub	w2, w2, w21
   82c94:	7100005f 	cmp	w2, #0x0
   82c98:	5400038c 	b.gt	82d08 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x128>
   82c9c:	94000d95 	bl	862f0 <CPtrList::GetNext(TPtrListElement*)>
   82ca0:	b40004c0 	cbz	x0, 82d38 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x158>
   82ca4:	aa0003f3 	mov	x19, x0
   82ca8:	aa1303e1 	mov	x1, x19
   82cac:	aa1403e0 	mov	x0, x20
   82cb0:	94000dac 	bl	86360 <CPtrList::GetPtr(TPtrListElement*)>
   82cb4:	aa0003fb 	mov	x27, x0
   82cb8:	b5fffe00 	cbnz	x0, 82c78 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x98>
   82cbc:	aa1a03e0 	mov	x0, x26
   82cc0:	52803262 	mov	w2, #0x193                 	// #403
   82cc4:	aa1903e1 	mov	x1, x25
   82cc8:	94000926 	bl	85160 <assertion_failed>
   82ccc:	b9400360 	ldr	w0, [x27]
   82cd0:	6b16001f 	cmp	w0, w22
   82cd4:	54fffd80 	b.eq	82c84 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xa4>  // b.none
   82cd8:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   82cdc:	52803282 	mov	w2, #0x194                 	// #404
   82ce0:	91314000 	add	x0, x0, #0xc50
   82ce4:	aa1903e1 	mov	x1, x25
   82ce8:	9400091e 	bl	85160 <assertion_failed>
   82cec:	b9401362 	ldr	w2, [x27, #16]
   82cf0:	aa1303e1 	mov	x1, x19
   82cf4:	aa1403e0 	mov	x0, x20
   82cf8:	4b150042 	sub	w2, w2, w21
   82cfc:	7100005f 	cmp	w2, #0x0
   82d00:	54fffced 	b.le	82c9c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xbc>
   82d04:	d503201f 	nop
   82d08:	aa1703e2 	mov	x2, x23
   82d0c:	94000db1 	bl	863d0 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   82d10:	b9402b00 	ldr	w0, [x24, #40]
   82d14:	a9446bf9 	ldp	x25, x26, [sp, #64]
   82d18:	f9402bfb 	ldr	x27, [sp, #80]
   82d1c:	350001e0 	cbnz	w0, 82d58 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x178>
   82d20:	aa1703e0 	mov	x0, x23
   82d24:	a94153f3 	ldp	x19, x20, [sp, #16]
   82d28:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82d2c:	a94363f7 	ldp	x23, x24, [sp, #48]
   82d30:	a8c77bfd 	ldp	x29, x30, [sp], #112
   82d34:	d65f03c0 	ret
   82d38:	a9446bf9 	ldp	x25, x26, [sp, #64]
   82d3c:	f9402bfb 	ldr	x27, [sp, #80]
   82d40:	aa1403e0 	mov	x0, x20
   82d44:	aa1303e1 	mov	x1, x19
   82d48:	aa1703e2 	mov	x2, x23
   82d4c:	94000df1 	bl	86510 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   82d50:	b9402b00 	ldr	w0, [x24, #40]
   82d54:	34fffe60 	cbz	w0, 82d20 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x140>
   82d58:	940003ae 	bl	83c10 <LeaveCritical>
   82d5c:	aa1703e0 	mov	x0, x23
   82d60:	a94153f3 	ldp	x19, x20, [sp, #16]
   82d64:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82d68:	a94363f7 	ldp	x23, x24, [sp, #48]
   82d6c:	a8c77bfd 	ldp	x29, x30, [sp], #112
   82d70:	d65f03c0 	ret
   82d74:	9400036f 	bl	83b30 <EnterCritical>
   82d78:	17ffffb2 	b	82c40 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x60>
   82d7c:	f0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   82d80:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   82d84:	a90613e3 	stp	x3, x4, [sp, #96]
   82d88:	912dc021 	add	x1, x1, #0xb70
   82d8c:	913c6000 	add	x0, x0, #0xf18
   82d90:	52803062 	mov	w2, #0x183                 	// #387
   82d94:	940008f3 	bl	85160 <assertion_failed>
   82d98:	a94613e3 	ldp	x3, x4, [sp, #96]
   82d9c:	17ffffa1 	b	82c20 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x40>

0000000000082da0 <CTimer::CancelKernelTimer(unsigned long)>:
   82da0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   82da4:	910003fd 	mov	x29, sp
   82da8:	a90153f3 	stp	x19, x20, [sp, #16]
   82dac:	aa0103f3 	mov	x19, x1
   82db0:	aa0003f4 	mov	x20, x0
   82db4:	a9025bf5 	stp	x21, x22, [sp, #32]
   82db8:	b4000421 	cbz	x1, 82e3c <CTimer::CancelKernelTimer(unsigned long)+0x9c>
   82dbc:	b9402a80 	ldr	w0, [x20, #40]
   82dc0:	35000320 	cbnz	w0, 82e24 <CTimer::CancelKernelTimer(unsigned long)+0x84>
   82dc4:	91008295 	add	x21, x20, #0x20
   82dc8:	aa1303e1 	mov	x1, x19
   82dcc:	aa1503e0 	mov	x0, x21
   82dd0:	94000e80 	bl	867d0 <CPtrList::Find(void*)>
   82dd4:	aa0003f6 	mov	x22, x0
   82dd8:	b40001a0 	cbz	x0, 82e0c <CTimer::CancelKernelTimer(unsigned long)+0x6c>
   82ddc:	b9400261 	ldr	w1, [x19]
   82de0:	5289a860 	mov	w0, #0x4d43                	// #19779
   82de4:	72a96a80 	movk	w0, #0x4b54, lsl #16
   82de8:	6b00003f 	cmp	w1, w0
   82dec:	54000361 	b.ne	82e58 <CTimer::CancelKernelTimer(unsigned long)+0xb8>  // b.any
   82df0:	aa1603e1 	mov	x1, x22
   82df4:	aa1503e0 	mov	x0, x21
   82df8:	94000e12 	bl	86640 <CPtrList::Remove(TPtrListElement*)>
   82dfc:	aa1303e0 	mov	x0, x19
   82e00:	d2800501 	mov	x1, #0x28                  	// #40
   82e04:	b900027f 	str	wzr, [x19]
   82e08:	9400075a 	bl	84b70 <operator delete(void*, unsigned long)>
   82e0c:	b9402a80 	ldr	w0, [x20, #40]
   82e10:	350000e0 	cbnz	w0, 82e2c <CTimer::CancelKernelTimer(unsigned long)+0x8c>
   82e14:	a94153f3 	ldp	x19, x20, [sp, #16]
   82e18:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82e1c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82e20:	d65f03c0 	ret
   82e24:	94000343 	bl	83b30 <EnterCritical>
   82e28:	17ffffe7 	b	82dc4 <CTimer::CancelKernelTimer(unsigned long)+0x24>
   82e2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82e30:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82e34:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82e38:	14000376 	b	83c10 <LeaveCritical>
   82e3c:	f0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   82e40:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   82e44:	912dc021 	add	x1, x1, #0xb70
   82e48:	912ea000 	add	x0, x0, #0xba8
   82e4c:	52803602 	mov	w2, #0x1b0                 	// #432
   82e50:	940008c4 	bl	85160 <assertion_failed>
   82e54:	17ffffda 	b	82dbc <CTimer::CancelKernelTimer(unsigned long)+0x1c>
   82e58:	f0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   82e5c:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   82e60:	912dc021 	add	x1, x1, #0xb70
   82e64:	912ee000 	add	x0, x0, #0xbb8
   82e68:	528036e2 	mov	w2, #0x1b7                 	// #439
   82e6c:	940008bd 	bl	85160 <assertion_failed>
   82e70:	17ffffe0 	b	82df0 <CTimer::CancelKernelTimer(unsigned long)+0x50>
   82e74:	d503201f 	nop
   82e78:	d503201f 	nop
   82e7c:	d503201f 	nop

0000000000082e80 <CTimer::PollKernelTimers()>:
   82e80:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   82e84:	910003fd 	mov	x29, sp
   82e88:	a90153f3 	stp	x19, x20, [sp, #16]
   82e8c:	a9025bf5 	stp	x21, x22, [sp, #32]
   82e90:	aa0003f5 	mov	x21, x0
   82e94:	b9402800 	ldr	w0, [x0, #40]
   82e98:	35000a20 	cbnz	w0, 82fdc <CTimer::PollKernelTimers()+0x15c>
   82e9c:	910082b6 	add	x22, x21, #0x20
   82ea0:	aa1603e0 	mov	x0, x22
   82ea4:	94000d0f 	bl	862e0 <CPtrList::GetFirst()>
   82ea8:	aa0003f4 	mov	x20, x0
   82eac:	b4000760 	cbz	x0, 82f98 <CTimer::PollKernelTimers()+0x118>
   82eb0:	a90363f7 	stp	x23, x24, [sp, #48]
   82eb4:	f0000038 	adrp	x24, 89000 <SErrorStub+0xc>
   82eb8:	912dc318 	add	x24, x24, #0xb70
   82ebc:	5289a877 	mov	w23, #0x4d43                	// #19779
   82ec0:	72a96a97 	movk	w23, #0x4b54, lsl #16
   82ec4:	a9046bf9 	stp	x25, x26, [sp, #64]
   82ec8:	f0000039 	adrp	x25, 89000 <SErrorStub+0xc>
   82ecc:	912ea339 	add	x25, x25, #0xba8
   82ed0:	1400000e 	b	82f08 <CTimer::PollKernelTimers()+0x88>
   82ed4:	f9400674 	ldr	x20, [x19, #8]
   82ed8:	b40004b4 	cbz	x20, 82f6c <CTimer::PollKernelTimers()+0xec>
   82edc:	a9418a61 	ldp	x1, x2, [x19, #24]
   82ee0:	aa1303e0 	mov	x0, x19
   82ee4:	d63f0280 	blr	x20
   82ee8:	aa1303e0 	mov	x0, x19
   82eec:	d2800501 	mov	x1, #0x28                  	// #40
   82ef0:	b900027f 	str	wzr, [x19]
   82ef4:	9400071f 	bl	84b70 <operator delete(void*, unsigned long)>
   82ef8:	b9402aa0 	ldr	w0, [x21, #40]
   82efc:	35000440 	cbnz	w0, 82f84 <CTimer::PollKernelTimers()+0x104>
   82f00:	aa1a03f4 	mov	x20, x26
   82f04:	b400047a 	cbz	x26, 82f90 <CTimer::PollKernelTimers()+0x110>
   82f08:	aa1403e1 	mov	x1, x20
   82f0c:	aa1603e0 	mov	x0, x22
   82f10:	94000d14 	bl	86360 <CPtrList::GetPtr(TPtrListElement*)>
   82f14:	aa0003f3 	mov	x19, x0
   82f18:	b4000580 	cbz	x0, 82fc8 <CTimer::PollKernelTimers()+0x148>
   82f1c:	b9400260 	ldr	w0, [x19]
   82f20:	6b17001f 	cmp	w0, w23
   82f24:	54000461 	b.ne	82fb0 <CTimer::PollKernelTimers()+0x130>  // b.any
   82f28:	b9401260 	ldr	w0, [x19, #16]
   82f2c:	b9400ea1 	ldr	w1, [x21, #12]
   82f30:	4b010000 	sub	w0, w0, w1
   82f34:	7100001f 	cmp	w0, #0x0
   82f38:	540002cc 	b.gt	82f90 <CTimer::PollKernelTimers()+0x110>
   82f3c:	aa1403e1 	mov	x1, x20
   82f40:	aa1603e0 	mov	x0, x22
   82f44:	94000ceb 	bl	862f0 <CPtrList::GetNext(TPtrListElement*)>
   82f48:	aa0003fa 	mov	x26, x0
   82f4c:	aa1403e1 	mov	x1, x20
   82f50:	aa1603e0 	mov	x0, x22
   82f54:	94000dbb 	bl	86640 <CPtrList::Remove(TPtrListElement*)>
   82f58:	b9402aa0 	ldr	w0, [x21, #40]
   82f5c:	34fffbc0 	cbz	w0, 82ed4 <CTimer::PollKernelTimers()+0x54>
   82f60:	9400032c 	bl	83c10 <LeaveCritical>
   82f64:	f9400674 	ldr	x20, [x19, #8]
   82f68:	b5fffbb4 	cbnz	x20, 82edc <CTimer::PollKernelTimers()+0x5c>
   82f6c:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   82f70:	52803b62 	mov	w2, #0x1db                 	// #475
   82f74:	913c6000 	add	x0, x0, #0xf18
   82f78:	aa1803e1 	mov	x1, x24
   82f7c:	94000879 	bl	85160 <assertion_failed>
   82f80:	17ffffd7 	b	82edc <CTimer::PollKernelTimers()+0x5c>
   82f84:	940002eb 	bl	83b30 <EnterCritical>
   82f88:	aa1a03f4 	mov	x20, x26
   82f8c:	b5fffbfa 	cbnz	x26, 82f08 <CTimer::PollKernelTimers()+0x88>
   82f90:	a94363f7 	ldp	x23, x24, [sp, #48]
   82f94:	a9446bf9 	ldp	x25, x26, [sp, #64]
   82f98:	b9402aa0 	ldr	w0, [x21, #40]
   82f9c:	35000240 	cbnz	w0, 82fe4 <CTimer::PollKernelTimers()+0x164>
   82fa0:	a94153f3 	ldp	x19, x20, [sp, #16]
   82fa4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82fa8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   82fac:	d65f03c0 	ret
   82fb0:	f0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   82fb4:	528039a2 	mov	w2, #0x1cd                 	// #461
   82fb8:	912ee000 	add	x0, x0, #0xbb8
   82fbc:	aa1803e1 	mov	x1, x24
   82fc0:	94000868 	bl	85160 <assertion_failed>
   82fc4:	17ffffd9 	b	82f28 <CTimer::PollKernelTimers()+0xa8>
   82fc8:	52803982 	mov	w2, #0x1cc                 	// #460
   82fcc:	aa1803e1 	mov	x1, x24
   82fd0:	aa1903e0 	mov	x0, x25
   82fd4:	94000863 	bl	85160 <assertion_failed>
   82fd8:	17ffffd1 	b	82f1c <CTimer::PollKernelTimers()+0x9c>
   82fdc:	940002d5 	bl	83b30 <EnterCritical>
   82fe0:	17ffffaf 	b	82e9c <CTimer::PollKernelTimers()+0x1c>
   82fe4:	a94153f3 	ldp	x19, x20, [sp, #16]
   82fe8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82fec:	a8c57bfd 	ldp	x29, x30, [sp], #80
   82ff0:	14000308 	b	83c10 <LeaveCritical>
   82ff4:	d503201f 	nop
   82ff8:	d503201f 	nop
   82ffc:	d503201f 	nop

0000000000083000 <CTimer::InterruptHandler()>:
   83000:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83004:	910003fd 	mov	x29, sp
   83008:	f9000bf3 	str	x19, [sp, #16]
   8300c:	aa0003f3 	mov	x19, x0
   83010:	d53be241 	mrs	x1, cntp_cval_el0
   83014:	b9400800 	ldr	w0, [x0, #8]
   83018:	8b010000 	add	x0, x0, x1
   8301c:	d51be240 	msr	cntp_cval_el0, x0
   83020:	b9401a60 	ldr	w0, [x19, #24]
   83024:	35000240 	cbnz	w0, 8306c <CTimer::InterruptHandler()+0x6c>
   83028:	b9400e61 	ldr	w1, [x19, #12]
   8302c:	5290a3e0 	mov	w0, #0x851f                	// #34079
   83030:	72aa3d60 	movk	w0, #0x51eb, lsl #16
   83034:	52800c82 	mov	w2, #0x64                  	// #100
   83038:	11000421 	add	w1, w1, #0x1
   8303c:	9ba07c20 	umull	x0, w1, w0
   83040:	b9000e61 	str	w1, [x19, #12]
   83044:	d365fc00 	lsr	x0, x0, #37
   83048:	1b028400 	msub	w0, w0, w2, w1
   8304c:	34000280 	cbz	w0, 8309c <CTimer::InterruptHandler()+0x9c>
   83050:	aa1303e0 	mov	x0, x19
   83054:	97ffff8b 	bl	82e80 <CTimer::PollKernelTimers()>
   83058:	f9401e60 	ldr	x0, [x19, #56]
   8305c:	b4000380 	cbz	x0, 830cc <CTimer::InterruptHandler()+0xcc>
   83060:	f9400bf3 	ldr	x19, [sp, #16]
   83064:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83068:	d61f0000 	br	x0
   8306c:	940002b1 	bl	83b30 <EnterCritical>
   83070:	b9400e62 	ldr	w2, [x19, #12]
   83074:	5290a3e1 	mov	w1, #0x851f                	// #34079
   83078:	72aa3d61 	movk	w1, #0x51eb, lsl #16
   8307c:	52800c83 	mov	w3, #0x64                  	// #100
   83080:	b9401a60 	ldr	w0, [x19, #24]
   83084:	11000442 	add	w2, w2, #0x1
   83088:	9ba17c41 	umull	x1, w2, w1
   8308c:	b9000e62 	str	w2, [x19, #12]
   83090:	d365fc21 	lsr	x1, x1, #37
   83094:	1b038821 	msub	w1, w1, w3, w2
   83098:	350000e1 	cbnz	w1, 830b4 <CTimer::InterruptHandler()+0xb4>
   8309c:	b9401261 	ldr	w1, [x19, #16]
   830a0:	11000421 	add	w1, w1, #0x1
   830a4:	b9001261 	str	w1, [x19, #16]
   830a8:	b9401661 	ldr	w1, [x19, #20]
   830ac:	11000421 	add	w1, w1, #0x1
   830b0:	b9001661 	str	w1, [x19, #20]
   830b4:	34fffce0 	cbz	w0, 83050 <CTimer::InterruptHandler()+0x50>
   830b8:	940002d6 	bl	83c10 <LeaveCritical>
   830bc:	aa1303e0 	mov	x0, x19
   830c0:	97ffff70 	bl	82e80 <CTimer::PollKernelTimers()>
   830c4:	f9401e60 	ldr	x0, [x19, #56]
   830c8:	b5fffcc0 	cbnz	x0, 83060 <CTimer::InterruptHandler()+0x60>
   830cc:	f9400bf3 	ldr	x19, [sp, #16]
   830d0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   830d4:	d65f03c0 	ret
   830d8:	d503201f 	nop
   830dc:	d503201f 	nop

00000000000830e0 <CTimer::InterruptHandler(void*)>:
   830e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   830e4:	910003fd 	mov	x29, sp
   830e8:	f9000bf3 	str	x19, [sp, #16]
   830ec:	aa0003f3 	mov	x19, x0
   830f0:	b40000a0 	cbz	x0, 83104 <CTimer::InterruptHandler(void*)+0x24>
   830f4:	aa1303e0 	mov	x0, x19
   830f8:	f9400bf3 	ldr	x19, [sp, #16]
   830fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83100:	17ffffc0 	b	83000 <CTimer::InterruptHandler()>
   83104:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   83108:	d0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   8310c:	912dc021 	add	x1, x1, #0xb70
   83110:	9131e000 	add	x0, x0, #0xc78
   83114:	52804462 	mov	w2, #0x223                 	// #547
   83118:	94000812 	bl	85160 <assertion_failed>
   8311c:	17fffff6 	b	830f4 <CTimer::InterruptHandler(void*)+0x14>

0000000000083120 <CTimer::TuneMsDelay()>:
   83120:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83124:	910003fd 	mov	x29, sp
   83128:	a90153f3 	stp	x19, x20, [sp, #16]
   8312c:	aa0003f4 	mov	x20, x0
   83130:	52807d00 	mov	w0, #0x3e8                 	// #1000
   83134:	5290a3f3 	mov	w19, #0x851f                	// #34079
   83138:	72aa3d73 	movk	w19, #0x51eb, lsl #16
   8313c:	b9402e81 	ldr	w1, [x20, #44]
   83140:	a9025bf5 	stp	x21, x22, [sp, #32]
   83144:	5284e215 	mov	w21, #0x2710                	// #10000
   83148:	b9400e96 	ldr	w22, [x20, #12]
   8314c:	1b007c20 	mul	w0, w1, w0
   83150:	9400092c 	bl	85600 <DelayLoop>
   83154:	b9400e85 	ldr	w5, [x20, #12]
   83158:	5289ba62 	mov	w2, #0x4dd3                	// #19923
   8315c:	72a20c42 	movk	w2, #0x1062, lsl #16
   83160:	b9402e80 	ldr	w0, [x20, #44]
   83164:	4b1600a5 	sub	w5, w5, w22
   83168:	1ac50ab5 	udiv	w21, w21, w5
   8316c:	1b007ea0 	mul	w0, w21, w0
   83170:	9bb37c00 	umull	x0, w0, w19
   83174:	9bb37eb3 	umull	x19, w21, w19
   83178:	d365fc00 	lsr	x0, x0, #37
   8317c:	1107d001 	add	w1, w0, #0x1f4
   83180:	d365fe73 	lsr	x19, x19, #37
   83184:	b9002e80 	str	w0, [x20, #44]
   83188:	9ba27c20 	umull	x0, w1, w2
   8318c:	d366fc00 	lsr	x0, x0, #38
   83190:	b9003280 	str	w0, [x20, #48]
   83194:	94000b2f 	bl	85e50 <CLogger::Get()>
   83198:	52800c85 	mov	w5, #0x64                  	// #100
   8319c:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   831a0:	912ce021 	add	x1, x1, #0xb38
   831a4:	d0000023 	adrp	x3, 89000 <SErrorStub+0xc>
   831a8:	1b05d665 	msub	w5, w19, w5, w21
   831ac:	2a1303e4 	mov	w4, w19
   831b0:	9100c021 	add	x1, x1, #0x30
   831b4:	91322063 	add	x3, x3, #0xc88
   831b8:	52800062 	mov	w2, #0x3                   	// #3
   831bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   831c0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   831c4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   831c8:	14000a5e 	b	85b40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   831cc:	d503201f 	nop

00000000000831d0 <CTimer::Initialize()>:
   831d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   831d4:	910003fd 	mov	x29, sp
   831d8:	a90153f3 	stp	x19, x20, [sp, #16]
   831dc:	aa0003f4 	mov	x20, x0
   831e0:	f9400000 	ldr	x0, [x0]
   831e4:	b4000480 	cbz	x0, 83274 <CTimer::Initialize()+0xa4>
   831e8:	aa1403e3 	mov	x3, x20
   831ec:	528003c1 	mov	w1, #0x1e                  	// #30
   831f0:	90000002 	adrp	x2, 83000 <CTimer::InterruptHandler()>
   831f4:	91038042 	add	x2, x2, #0xe0
   831f8:	94000516 	bl	84650 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   831fc:	d53be002 	mrs	x2, cntfrq_el0
   83200:	d29eb860 	mov	x0, #0xf5c3                	// #62915
   83204:	f2ab8500 	movk	x0, #0x5c28, lsl #16
   83208:	f2d851e0 	movk	x0, #0xc28f, lsl #32
   8320c:	f2e51ea0 	movk	x0, #0x28f5, lsl #48
   83210:	d342fc53 	lsr	x19, x2, #2
   83214:	9bc07e60 	umulh	x0, x19, x0
   83218:	d342fc00 	lsr	x0, x0, #2
   8321c:	8b000401 	add	x1, x0, x0, lsl #1
   83220:	8b010c00 	add	x0, x0, x1, lsl #3
   83224:	eb00085f 	cmp	x2, x0, lsl #2
   83228:	54000361 	b.ne	83294 <CTimer::Initialize()+0xc4>  // b.any
   8322c:	d29eb860 	mov	x0, #0xf5c3                	// #62915
   83230:	f2ab8500 	movk	x0, #0x5c28, lsl #16
   83234:	f2d851e0 	movk	x0, #0xc28f, lsl #32
   83238:	f2e51ea0 	movk	x0, #0x28f5, lsl #48
   8323c:	9bc07e73 	umulh	x19, x19, x0
   83240:	d342fe73 	lsr	x19, x19, #2
   83244:	b9000a93 	str	w19, [x20, #8]
   83248:	d53be020 	mrs	x0, cntpct_el0
   8324c:	8b334013 	add	x19, x0, w19, uxtw
   83250:	d51be253 	msr	cntp_cval_el0, x19
   83254:	52800033 	mov	w19, #0x1                   	// #1
   83258:	d51be233 	msr	cntp_ctl_el0, x19
   8325c:	aa1403e0 	mov	x0, x20
   83260:	97ffffb0 	bl	83120 <CTimer::TuneMsDelay()>
   83264:	2a1303e0 	mov	w0, w19
   83268:	a94153f3 	ldp	x19, x20, [sp, #16]
   8326c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83270:	d65f03c0 	ret
   83274:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   83278:	d0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   8327c:	912e4000 	add	x0, x0, #0xb90
   83280:	912dc021 	add	x1, x1, #0xb70
   83284:	52800ca2 	mov	w2, #0x65                  	// #101
   83288:	940007b6 	bl	85160 <assertion_failed>
   8328c:	f9400280 	ldr	x0, [x20]
   83290:	17ffffd6 	b	831e8 <CTimer::Initialize()+0x18>
   83294:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   83298:	d0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   8329c:	912dc021 	add	x1, x1, #0xb70
   832a0:	91328000 	add	x0, x0, #0xca0
   832a4:	52800fa2 	mov	w2, #0x7d                  	// #125
   832a8:	940007ae 	bl	85160 <assertion_failed>
   832ac:	17ffffe0 	b	8322c <CTimer::Initialize()+0x5c>

00000000000832b0 <CTimer::RegisterPeriodicHandler(void (*)())>:
   832b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   832b4:	910003fd 	mov	x29, sp
   832b8:	a90153f3 	stp	x19, x20, [sp, #16]
   832bc:	aa0003f4 	mov	x20, x0
   832c0:	aa0103f3 	mov	x19, x1
   832c4:	f9401c00 	ldr	x0, [x0, #56]
   832c8:	b50000c0 	cbnz	x0, 832e0 <CTimer::RegisterPeriodicHandler(void (*)())+0x30>
   832cc:	f9001e93 	str	x19, [x20, #56]
   832d0:	b4000173 	cbz	x19, 832fc <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   832d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   832d8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   832dc:	d65f03c0 	ret
   832e0:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   832e4:	d0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   832e8:	912dc021 	add	x1, x1, #0xb70
   832ec:	9132e000 	add	x0, x0, #0xcb8
   832f0:	52804722 	mov	w2, #0x239                 	// #569
   832f4:	9400079b 	bl	85160 <assertion_failed>
   832f8:	17fffff5 	b	832cc <CTimer::RegisterPeriodicHandler(void (*)())+0x1c>
   832fc:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   83300:	d0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   83304:	a94153f3 	ldp	x19, x20, [sp, #16]
   83308:	912dc021 	add	x1, x1, #0xb70
   8330c:	91334000 	add	x0, x0, #0xcd0
   83310:	52804762 	mov	w2, #0x23b                 	// #571
   83314:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83318:	14000792 	b	85160 <assertion_failed>
   8331c:	d503201f 	nop

0000000000083320 <CTimer::SimpleMsDelay(unsigned int)>:
   83320:	340000a0 	cbz	w0, 83334 <CTimer::SimpleMsDelay(unsigned int)+0x14>
   83324:	52807d01 	mov	w1, #0x3e8                 	// #1000
   83328:	1b017c00 	mul	w0, w0, w1
   8332c:	34000040 	cbz	w0, 83334 <CTimer::SimpleMsDelay(unsigned int)+0x14>
   83330:	17fffc68 	b	824d0 <CTimer::SimpleusDelay(unsigned int) [clone .part.2]>
   83334:	d65f03c0 	ret
   83338:	d503201f 	nop
   8333c:	d503201f 	nop

0000000000083340 <CTimer::SimpleusDelay(unsigned int)>:
   83340:	34000040 	cbz	w0, 83348 <CTimer::SimpleusDelay(unsigned int)+0x8>
   83344:	17fffc63 	b	824d0 <CTimer::SimpleusDelay(unsigned int) [clone .part.2]>
   83348:	d65f03c0 	ret
   8334c:	d503201f 	nop

0000000000083350 <CTimer::IsLeapYear(unsigned int)>:
   83350:	5290a3e1 	mov	w1, #0x851f                	// #34079
   83354:	72aa3d61 	movk	w1, #0x51eb, lsl #16
   83358:	52800c83 	mov	w3, #0x64                  	// #100
   8335c:	9ba17c01 	umull	x1, w0, w1
   83360:	d360fc21 	lsr	x1, x1, #32
   83364:	53057c22 	lsr	w2, w1, #5
   83368:	1b038042 	msub	w2, w2, w3, w0
   8336c:	34000082 	cbz	w2, 8337c <CTimer::IsLeapYear(unsigned int)+0x2c>
   83370:	f240041f 	tst	x0, #0x3
   83374:	1a9f17e0 	cset	w0, eq  // eq = none
   83378:	d65f03c0 	ret
   8337c:	52803202 	mov	w2, #0x190                 	// #400
   83380:	53077c21 	lsr	w1, w1, #7
   83384:	1b028021 	msub	w1, w1, w2, w0
   83388:	7100003f 	cmp	w1, #0x0
   8338c:	1a9f17e0 	cset	w0, eq  // eq = none
   83390:	d65f03c0 	ret
   83394:	d503201f 	nop
   83398:	d503201f 	nop
   8339c:	d503201f 	nop

00000000000833a0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   833a0:	7100041f 	cmp	w0, #0x1
   833a4:	2a0003e2 	mov	w2, w0
   833a8:	540000a0 	b.eq	833bc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x1c>  // b.none
   833ac:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   833b0:	912ce021 	add	x1, x1, #0xb38
   833b4:	b8625820 	ldr	w0, [x1, w2, uxtw #2]
   833b8:	d65f03c0 	ret
   833bc:	5290a3e0 	mov	w0, #0x851f                	// #34079
   833c0:	72aa3d60 	movk	w0, #0x51eb, lsl #16
   833c4:	f240043f 	tst	x1, #0x3
   833c8:	52800c85 	mov	w5, #0x64                  	// #100
   833cc:	1a9f17e4 	cset	w4, eq  // eq = none
   833d0:	9ba07c20 	umull	x0, w1, w0
   833d4:	d360fc00 	lsr	x0, x0, #32
   833d8:	53057c03 	lsr	w3, w0, #5
   833dc:	1b058463 	msub	w3, w3, w5, w1
   833e0:	350000c3 	cbnz	w3, 833f8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x58>
   833e4:	53077c00 	lsr	w0, w0, #7
   833e8:	52803203 	mov	w3, #0x190                 	// #400
   833ec:	1b038400 	msub	w0, w0, w3, w1
   833f0:	7100001f 	cmp	w0, #0x0
   833f4:	1a9f17e4 	cset	w4, eq  // eq = none
   833f8:	528003a0 	mov	w0, #0x1d                  	// #29
   833fc:	34fffd84 	cbz	w4, 833ac <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0xc>
   83400:	d65f03c0 	ret
   83404:	d503201f 	nop
   83408:	d503201f 	nop
   8340c:	d503201f 	nop

0000000000083410 <CTimer::Get()>:
   83410:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83414:	910003fd 	mov	x29, sp
   83418:	f9000bf3 	str	x19, [sp, #16]
   8341c:	f0000033 	adrp	x19, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   83420:	f9451e60 	ldr	x0, [x19, #2616]
   83424:	b4000080 	cbz	x0, 83434 <CTimer::Get()+0x24>
   83428:	f9400bf3 	ldr	x19, [sp, #16]
   8342c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83430:	d65f03c0 	ret
   83434:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   83438:	d0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   8343c:	9133a000 	add	x0, x0, #0xce8
   83440:	912dc021 	add	x1, x1, #0xb70
   83444:	52804ee2 	mov	w2, #0x277                 	// #631
   83448:	94000746 	bl	85160 <assertion_failed>
   8344c:	f9451e60 	ldr	x0, [x19, #2616]
   83450:	17fffff6 	b	83428 <CTimer::Get()+0x18>
	...

0000000000083460 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   83460:	72001c42 	ands	w2, w2, #0xff
   83464:	d0000023 	adrp	x3, 89000 <SErrorStub+0xc>
   83468:	9135a063 	add	x3, x3, #0xd68
   8346c:	7a410822 	ccmp	w1, #0x1, #0x2, eq  // eq = none
   83470:	b9000c01 	str	w1, [x0, #12]
   83474:	39002002 	strb	w2, [x0, #8]
   83478:	f9000003 	str	x3, [x0]
   8347c:	b900141f 	str	wzr, [x0, #20]
   83480:	54000049 	b.ls	83488 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x28>  // b.plast
   83484:	d65f03c0 	ret
   83488:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8348c:	910003fd 	mov	x29, sp
   83490:	a90153f3 	stp	x19, x20, [sp, #16]
   83494:	aa0003f3 	mov	x19, x0
   83498:	f90013f5 	str	x21, [sp, #32]
   8349c:	f0000034 	adrp	x20, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   834a0:	91290295 	add	x21, x20, #0xa40
   834a4:	b9400aa0 	ldr	w0, [x21, #8]
   834a8:	350001e0 	cbnz	w0, 834e4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x84>
   834ac:	f9452280 	ldr	x0, [x20, #2624]
   834b0:	b4000200 	cbz	x0, 834f0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x90>
   834b4:	b9400e61 	ldr	w1, [x19, #12]
   834b8:	531e7421 	lsl	w1, w1, #2
   834bc:	b821481f 	str	wzr, [x0, w1, uxtw]
   834c0:	b9400aa0 	ldr	w0, [x21, #8]
   834c4:	35000460 	cbnz	w0, 83550 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf0>
   834c8:	aa1303e0 	mov	x0, x19
   834cc:	52800001 	mov	w1, #0x0                   	// #0
   834d0:	94000040 	bl	835d0 <CVirtualGPIOPin::Write(unsigned int)>
   834d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   834d8:	f94013f5 	ldr	x21, [sp, #32]
   834dc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   834e0:	d65f03c0 	ret
   834e4:	94000193 	bl	83b30 <EnterCritical>
   834e8:	f9452280 	ldr	x0, [x20, #2624]
   834ec:	b5fffe40 	cbnz	x0, 834b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x54>
   834f0:	52800020 	mov	w0, #0x1                   	// #1
   834f4:	94000173 	bl	83ac0 <CMemorySystem::GetCoherentPage(unsigned int)>
   834f8:	f9052280 	str	x0, [x20, #2624]
   834fc:	52800001 	mov	w1, #0x0                   	// #0
   83500:	9100e3e0 	add	x0, sp, #0x38
   83504:	9400073f 	bl	85200 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   83508:	f9452285 	ldr	x5, [x20, #2624]
   8350c:	9100e3e0 	add	x0, sp, #0x38
   83510:	910103e2 	add	x2, sp, #0x40
   83514:	52900401 	mov	w1, #0x8020                	// #32800
   83518:	72a00081 	movk	w1, #0x4, lsl #16
   8351c:	52800084 	mov	w4, #0x4                   	// #4
   83520:	52800203 	mov	w3, #0x10                  	// #16
   83524:	320204a5 	orr	w5, w5, #0xc0000000
   83528:	b9004fe5 	str	w5, [sp, #76]
   8352c:	9400073d 	bl	85220 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   83530:	72001c1f 	tst	w0, #0xff
   83534:	540001e0 	b.eq	83570 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x110>  // b.none
   83538:	9100e3e0 	add	x0, sp, #0x38
   8353c:	94000735 	bl	85210 <CBcmPropertyTags::~CBcmPropertyTags()>
   83540:	f9452280 	ldr	x0, [x20, #2624]
   83544:	b5fffb80 	cbnz	x0, 834b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x54>
   83548:	b9400aa0 	ldr	w0, [x21, #8]
   8354c:	34fffbe0 	cbz	w0, 834c8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x68>
   83550:	940001b0 	bl	83c10 <LeaveCritical>
   83554:	aa1303e0 	mov	x0, x19
   83558:	52800001 	mov	w1, #0x0                   	// #0
   8355c:	9400001d 	bl	835d0 <CVirtualGPIOPin::Write(unsigned int)>
   83560:	a94153f3 	ldp	x19, x20, [sp, #16]
   83564:	f94013f5 	ldr	x21, [sp, #32]
   83568:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8356c:	d65f03c0 	ret
   83570:	910103e2 	add	x2, sp, #0x40
   83574:	52800201 	mov	w1, #0x10                  	// #16
   83578:	72a00081 	movk	w1, #0x4, lsl #16
   8357c:	52800004 	mov	w4, #0x0                   	// #0
   83580:	52800203 	mov	w3, #0x10                  	// #16
   83584:	9100e3e0 	add	x0, sp, #0x38
   83588:	94000726 	bl	85220 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   8358c:	72001c1f 	tst	w0, #0xff
   83590:	540000a0 	b.eq	835a4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x144>  // b.none
   83594:	b9404fe0 	ldr	w0, [sp, #76]
   83598:	92407400 	and	x0, x0, #0x3fffffff
   8359c:	f9052280 	str	x0, [x20, #2624]
   835a0:	17ffffe6 	b	83538 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xd8>
   835a4:	f905229f 	str	xzr, [x20, #2624]
   835a8:	17ffffe4 	b	83538 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xd8>
   835ac:	d503201f 	nop

00000000000835b0 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   835b0:	d65f03c0 	ret
   835b4:	d503201f 	nop
   835b8:	d503201f 	nop
   835bc:	d503201f 	nop

00000000000835c0 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   835c0:	d2800301 	mov	x1, #0x18                  	// #24
   835c4:	1400056b 	b	84b70 <operator delete(void*, unsigned long)>
   835c8:	d503201f 	nop
   835cc:	d503201f 	nop

00000000000835d0 <CVirtualGPIOPin::Write(unsigned int)>:
   835d0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   835d4:	910003fd 	mov	x29, sp
   835d8:	a90153f3 	stp	x19, x20, [sp, #16]
   835dc:	2a0103f4 	mov	w20, w1
   835e0:	aa0003f3 	mov	x19, x0
   835e4:	39402001 	ldrb	w1, [x0, #8]
   835e8:	b9400c00 	ldr	w0, [x0, #12]
   835ec:	350001c1 	cbnz	w1, 83624 <CVirtualGPIOPin::Write(unsigned int)+0x54>
   835f0:	7100041f 	cmp	w0, #0x1
   835f4:	54000128 	b.hi	83618 <CVirtualGPIOPin::Write(unsigned int)+0x48>  // b.pmore
   835f8:	a9025bf5 	stp	x21, x22, [sp, #32]
   835fc:	f0000035 	adrp	x21, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   83600:	912902b6 	add	x22, x21, #0xa40
   83604:	f94522a0 	ldr	x0, [x21, #2624]
   83608:	f100001f 	cmp	x0, #0x0
   8360c:	7a411a82 	ccmp	w20, #0x1, #0x2, ne  // ne = any
   83610:	540002e9 	b.ls	8366c <CVirtualGPIOPin::Write(unsigned int)+0x9c>  // b.plast
   83614:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83618:	a94153f3 	ldp	x19, x20, [sp, #16]
   8361c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   83620:	d65f03c0 	ret
   83624:	35000600 	cbnz	w0, 836e4 <CVirtualGPIOPin::Write(unsigned int)+0x114>
   83628:	9100c3e0 	add	x0, sp, #0x30
   8362c:	52800001 	mov	w1, #0x0                   	// #0
   83630:	940006f4 	bl	85200 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   83634:	52801042 	mov	w2, #0x82                  	// #130
   83638:	52800104 	mov	w4, #0x8                   	// #8
   8363c:	52800283 	mov	w3, #0x14                  	// #20
   83640:	9100c3e0 	add	x0, sp, #0x30
   83644:	52900821 	mov	w1, #0x8041                	// #32833
   83648:	72a00061 	movk	w1, #0x3, lsl #16
   8364c:	2908d3e2 	stp	w2, w20, [sp, #68]
   83650:	9100e3e2 	add	x2, sp, #0x38
   83654:	940006f3 	bl	85220 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   83658:	9100c3e0 	add	x0, sp, #0x30
   8365c:	940006ed 	bl	85210 <CBcmPropertyTags::~CBcmPropertyTags()>
   83660:	a94153f3 	ldp	x19, x20, [sp, #16]
   83664:	a8c57bfd 	ldp	x29, x30, [sp], #80
   83668:	d65f03c0 	ret
   8366c:	b9400ac0 	ldr	w0, [x22, #8]
   83670:	35000360 	cbnz	w0, 836dc <CVirtualGPIOPin::Write(unsigned int)+0x10c>
   83674:	79402a60 	ldrh	w0, [x19, #20]
   83678:	b9001274 	str	w20, [x19, #16]
   8367c:	79402e61 	ldrh	w1, [x19, #22]
   83680:	4b010002 	sub	w2, w0, w1
   83684:	13003c42 	sxth	w2, w2
   83688:	7100005f 	cmp	w2, #0x0
   8368c:	540001ed 	b.le	836c8 <CVirtualGPIOPin::Write(unsigned int)+0xf8>
   83690:	35000134 	cbnz	w20, 836b4 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   83694:	11000421 	add	w1, w1, #0x1
   83698:	12003c21 	and	w1, w1, #0xffff
   8369c:	79002e61 	strh	w1, [x19, #22]
   836a0:	b9400e62 	ldr	w2, [x19, #12]
   836a4:	2a004020 	orr	w0, w1, w0, lsl #16
   836a8:	f94522a3 	ldr	x3, [x21, #2624]
   836ac:	531e7441 	lsl	w1, w2, #2
   836b0:	b8214860 	str	w0, [x3, w1, uxtw]
   836b4:	b9400ac0 	ldr	w0, [x22, #8]
   836b8:	34fffae0 	cbz	w0, 83614 <CVirtualGPIOPin::Write(unsigned int)+0x44>
   836bc:	94000155 	bl	83c10 <LeaveCritical>
   836c0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   836c4:	17ffffd5 	b	83618 <CVirtualGPIOPin::Write(unsigned int)+0x48>
   836c8:	34ffff74 	cbz	w20, 836b4 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   836cc:	11000400 	add	w0, w0, #0x1
   836d0:	12003c00 	and	w0, w0, #0xffff
   836d4:	79002a60 	strh	w0, [x19, #20]
   836d8:	17fffff2 	b	836a0 <CVirtualGPIOPin::Write(unsigned int)+0xd0>
   836dc:	94000115 	bl	83b30 <EnterCritical>
   836e0:	17ffffe5 	b	83674 <CVirtualGPIOPin::Write(unsigned int)+0xa4>
   836e4:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   836e8:	9135e021 	add	x1, x1, #0xd78
   836ec:	91006020 	add	x0, x1, #0x18
   836f0:	52800b62 	mov	w2, #0x5b                  	// #91
   836f4:	9400069b 	bl	85160 <assertion_failed>
   836f8:	17ffffcc 	b	83628 <CVirtualGPIOPin::Write(unsigned int)+0x58>
   836fc:	d503201f 	nop

0000000000083700 <CVirtualGPIOPin::Invert()>:
   83700:	b9401001 	ldr	w1, [x0, #16]
   83704:	52000021 	eor	w1, w1, #0x1
   83708:	17ffffb2 	b	835d0 <CVirtualGPIOPin::Write(unsigned int)>
   8370c:	d503201f 	nop

0000000000083710 <__static_initialization_and_destruction_0(int, int)>:
   83710:	529fffe2 	mov	w2, #0xffff                	// #65535
   83714:	6b02003f 	cmp	w1, w2
   83718:	7a410800 	ccmp	w0, #0x1, #0x0, eq  // eq = none
   8371c:	54000040 	b.eq	83724 <__static_initialization_and_destruction_0(int, int)+0x14>  // b.none
   83720:	d65f03c0 	ret
   83724:	f0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   83728:	b90a481f 	str	wzr, [x0, #2632]
   8372c:	d65f03c0 	ret

0000000000083730 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   83730:	f0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   83734:	b90a481f 	str	wzr, [x0, #2632]
   83738:	d65f03c0 	ret
   8373c:	00000000 	.inst	0x00000000 ; undefined

0000000000083740 <ChainBootStub(void const*, unsigned long)>:
   83740:	91000c21 	add	x1, x1, #0x3
   83744:	d342fc21 	lsr	x1, x1, #2
   83748:	b4000181 	cbz	x1, 83778 <ChainBootStub(void const*, unsigned long)+0x38>
   8374c:	91408021 	add	x1, x1, #0x20, lsl #12
   83750:	d1420000 	sub	x0, x0, #0x80, lsl #12
   83754:	d37ef424 	lsl	x4, x1, #2
   83758:	d1001000 	sub	x0, x0, #0x4
   8375c:	d2a00101 	mov	x1, #0x80000               	// #524288
   83760:	91001022 	add	x2, x1, #0x4
   83764:	b8606843 	ldr	w3, [x2, x0]
   83768:	eb04005f 	cmp	x2, x4
   8376c:	b9000023 	str	w3, [x1]
   83770:	aa0203e1 	mov	x1, x2
   83774:	54ffff61 	b.ne	83760 <ChainBootStub(void const*, unsigned long)+0x20>  // b.any
   83778:	d508751f 	ic	iallu
   8377c:	d5033f9f 	dsb	sy
   83780:	d5033fdf 	isb
   83784:	d2a00100 	mov	x0, #0x80000               	// #524288
   83788:	d61f0000 	br	x0
   8378c:	d503201f 	nop

0000000000083790 <EnableChainBoot>:
   83790:	f0000023 	adrp	x3, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   83794:	91294065 	add	x5, x3, #0xa50
   83798:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8379c:	90000004 	adrp	x4, 83000 <CTimer::InterruptHandler()>
   837a0:	910003fd 	mov	x29, sp
   837a4:	d2808002 	mov	x2, #0x400                 	// #1024
   837a8:	f9052860 	str	x0, [x3, #2640]
   837ac:	b27623e0 	mov	x0, #0x7fc00               	// #523264
   837b0:	f90004a1 	str	x1, [x5, #8]
   837b4:	911d0081 	add	x1, x4, #0x740
   837b8:	940012c0 	bl	882b8 <memcpy>
   837bc:	d508751f 	ic	iallu
   837c0:	d5033f9f 	dsb	sy
   837c4:	d5033fdf 	isb
   837c8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   837cc:	d65f03c0 	ret

00000000000837d0 <IsChainBootEnabled>:
   837d0:	f0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   837d4:	f9452800 	ldr	x0, [x0, #2640]
   837d8:	f100001f 	cmp	x0, #0x0
   837dc:	1a9f07e0 	cset	w0, ne  // ne = any
   837e0:	d65f03c0 	ret
   837e4:	d503201f 	nop
   837e8:	d503201f 	nop
   837ec:	d503201f 	nop

00000000000837f0 <DoChainBoot>:
   837f0:	d4000002 	hvc	#0x0
   837f4:	f0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   837f8:	91294001 	add	x1, x0, #0xa50
   837fc:	b27623e2 	mov	x2, #0x7fc00               	// #523264
   83800:	f9452800 	ldr	x0, [x0, #2640]
   83804:	f9400421 	ldr	x1, [x1, #8]
   83808:	d61f0040 	br	x2
   8380c:	00000000 	.inst	0x00000000 ; undefined

0000000000083810 <CMemorySystem::CMemorySystem(bool)>:
   83810:	f0000022 	adrp	x2, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   83814:	a900fc1f 	stp	xzr, xzr, [x0, #8]
   83818:	f9453043 	ldr	x3, [x2, #2656]
   8381c:	39000001 	strb	w1, [x0]
   83820:	b4000043 	cbz	x3, 83828 <CMemorySystem::CMemorySystem(bool)+0x18>
   83824:	d65f03c0 	ret
   83828:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8382c:	910003fd 	mov	x29, sp
   83830:	52800021 	mov	w1, #0x1                   	// #1
   83834:	f9053040 	str	x0, [x2, #2656]
   83838:	a90153f3 	stp	x19, x20, [sp, #16]
   8383c:	aa0003f3 	mov	x19, x0
   83840:	910083e0 	add	x0, sp, #0x20
   83844:	9400066f 	bl	85200 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   83848:	910083e0 	add	x0, sp, #0x20
   8384c:	528000a1 	mov	w1, #0x5                   	// #5
   83850:	72a00021 	movk	w1, #0x1, lsl #16
   83854:	52800004 	mov	w4, #0x0                   	// #0
   83858:	52800283 	mov	w3, #0x14                  	// #20
   8385c:	9100a3e2 	add	x2, sp, #0x28
   83860:	94000670 	bl	85220 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   83864:	72001c1f 	tst	w0, #0xff
   83868:	540001e0 	b.eq	838a4 <CMemorySystem::CMemorySystem(bool)+0x94>  // b.none
   8386c:	b94037e0 	ldr	w0, [sp, #52]
   83870:	35000360 	cbnz	w0, 838dc <CMemorySystem::CMemorySystem(bool)+0xcc>
   83874:	b9403be2 	ldr	w2, [sp, #56]
   83878:	d2800000 	mov	x0, #0x0                   	// #0
   8387c:	aa0203e1 	mov	x1, x2
   83880:	f9000662 	str	x2, [x19, #8]
   83884:	940004c3 	bl	84b90 <mem_init>
   83888:	39400260 	ldrb	w0, [x19]
   8388c:	35000160 	cbnz	w0, 838b8 <CMemorySystem::CMemorySystem(bool)+0xa8>
   83890:	910083e0 	add	x0, sp, #0x20
   83894:	9400065f 	bl	85210 <CBcmPropertyTags::~CBcmPropertyTags()>
   83898:	a94153f3 	ldp	x19, x20, [sp, #16]
   8389c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   838a0:	d65f03c0 	ret
   838a4:	d2e38001 	mov	x1, #0x1c00000000000000    	// #2017612633061982208
   838a8:	d2800000 	mov	x0, #0x0                   	// #0
   838ac:	d2a38002 	mov	x2, #0x1c000000            	// #469762048
   838b0:	f80343e1 	stur	x1, [sp, #52]
   838b4:	17fffff2 	b	8387c <CMemorySystem::CMemorySystem(bool)+0x6c>
   838b8:	d2800200 	mov	x0, #0x10                  	// #16
   838bc:	9400049d 	bl	84b30 <operator new(unsigned long)>
   838c0:	f9400661 	ldr	x1, [x19, #8]
   838c4:	aa0003f4 	mov	x20, x0
   838c8:	940001c8 	bl	83fe8 <CTranslationTable::CTranslationTable(unsigned long)>
   838cc:	aa1303e0 	mov	x0, x19
   838d0:	f9000a74 	str	x20, [x19, #16]
   838d4:	9400004b 	bl	83a00 <CMemorySystem::EnableMMU()>
   838d8:	17ffffee 	b	83890 <CMemorySystem::CMemorySystem(bool)+0x80>
   838dc:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   838e0:	d0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   838e4:	9136c000 	add	x0, x0, #0xdb0
   838e8:	52800622 	mov	w2, #0x31                  	// #49
   838ec:	91368021 	add	x1, x1, #0xda0
   838f0:	9400061c 	bl	85160 <assertion_failed>
   838f4:	29468be0 	ldp	w0, w2, [sp, #52]
   838f8:	17ffffe1 	b	8387c <CMemorySystem::CMemorySystem(bool)+0x6c>
   838fc:	d503201f 	nop

0000000000083900 <CMemorySystem::~CMemorySystem()>:
   83900:	f0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   83904:	f9453022 	ldr	x2, [x1, #2656]
   83908:	eb02001f 	cmp	x0, x2
   8390c:	54000040 	b.eq	83914 <CMemorySystem::~CMemorySystem()+0x14>  // b.none
   83910:	d65f03c0 	ret
   83914:	f905303f 	str	xzr, [x1, #2656]
   83918:	39400000 	ldrb	w0, [x0]
   8391c:	34ffffa0 	cbz	w0, 83910 <CMemorySystem::~CMemorySystem()+0x10>
   83920:	1400006c 	b	83ad0 <CMemorySystem::Destructor() [clone .part.0]>
   83924:	d503201f 	nop
   83928:	d503201f 	nop
   8392c:	d503201f 	nop

0000000000083930 <CMemorySystem::Destructor()>:
   83930:	f0000022 	adrp	x2, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   83934:	f9453041 	ldr	x1, [x2, #2656]
   83938:	eb00003f 	cmp	x1, x0
   8393c:	54000040 	b.eq	83944 <CMemorySystem::Destructor()+0x14>  // b.none
   83940:	d65f03c0 	ret
   83944:	f905305f 	str	xzr, [x2, #2656]
   83948:	39400020 	ldrb	w0, [x1]
   8394c:	34ffffa0 	cbz	w0, 83940 <CMemorySystem::Destructor()+0x10>
   83950:	14000060 	b	83ad0 <CMemorySystem::Destructor() [clone .part.0]>
   83954:	d503201f 	nop
   83958:	d503201f 	nop
   8395c:	d503201f 	nop

0000000000083960 <CMemorySystem::GetMemSize() const>:
   83960:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83964:	910003fd 	mov	x29, sp
   83968:	f9000bf3 	str	x19, [sp, #16]
   8396c:	f0000033 	adrp	x19, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   83970:	f9453260 	ldr	x0, [x19, #2656]
   83974:	b40000a0 	cbz	x0, 83988 <CMemorySystem::GetMemSize() const+0x28>
   83978:	f9400400 	ldr	x0, [x0, #8]
   8397c:	f9400bf3 	ldr	x19, [sp, #16]
   83980:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83984:	d65f03c0 	ret
   83988:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   8398c:	d0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   83990:	9133a000 	add	x0, x0, #0xce8
   83994:	91368021 	add	x1, x1, #0xda0
   83998:	52800e42 	mov	w2, #0x72                  	// #114
   8399c:	940005f1 	bl	85160 <assertion_failed>
   839a0:	f9453260 	ldr	x0, [x19, #2656]
   839a4:	17fffff5 	b	83978 <CMemorySystem::GetMemSize() const+0x18>
   839a8:	d503201f 	nop
   839ac:	d503201f 	nop

00000000000839b0 <CMemorySystem::Get()>:
   839b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   839b4:	910003fd 	mov	x29, sp
   839b8:	f9000bf3 	str	x19, [sp, #16]
   839bc:	f0000033 	adrp	x19, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   839c0:	f9453260 	ldr	x0, [x19, #2656]
   839c4:	b4000080 	cbz	x0, 839d4 <CMemorySystem::Get()+0x24>
   839c8:	f9400bf3 	ldr	x19, [sp, #16]
   839cc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   839d0:	d65f03c0 	ret
   839d4:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   839d8:	d0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   839dc:	9133a000 	add	x0, x0, #0xce8
   839e0:	91368021 	add	x1, x1, #0xda0
   839e4:	52800f02 	mov	w2, #0x78                  	// #120
   839e8:	940005de 	bl	85160 <assertion_failed>
   839ec:	f9453260 	ldr	x0, [x19, #2656]
   839f0:	17fffff6 	b	839c8 <CMemorySystem::Get()+0x18>
   839f4:	d503201f 	nop
   839f8:	d503201f 	nop
   839fc:	d503201f 	nop

0000000000083a00 <CMemorySystem::EnableMMU()>:
   83a00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83a04:	910003fd 	mov	x29, sp
   83a08:	f9000bf3 	str	x19, [sp, #16]
   83a0c:	aa0003f3 	mov	x19, x0
   83a10:	39400000 	ldrb	w0, [x0]
   83a14:	34000360 	cbz	w0, 83a80 <CMemorySystem::EnableMMU()+0x80>
   83a18:	d2809fe0 	mov	x0, #0x4ff                 	// #1279
   83a1c:	d518a200 	msr	mair_el1, x0
   83a20:	f9400a60 	ldr	x0, [x19, #16]
   83a24:	b40003c0 	cbz	x0, 83a9c <CMemorySystem::EnableMMU()+0x9c>
   83a28:	940001f6 	bl	84200 <CTranslationTable::GetBaseAddress() const>
   83a2c:	d5182000 	msr	ttbr0_el1, x0
   83a30:	d5382040 	mrs	x0, tcr_el1
   83a34:	929ff7e2 	mov	x2, #0xffffffffffff0040    	// #-65472
   83a38:	f2bff7e2 	movk	x2, #0xffbf, lsl #16
   83a3c:	f2dfff02 	movk	x2, #0xfff8, lsl #32
   83a40:	d28ea381 	mov	x1, #0x751c                	// #29980
   83a44:	f2a01001 	movk	x1, #0x80, lsl #16
   83a48:	8a020000 	and	x0, x0, x2
   83a4c:	f2c00021 	movk	x1, #0x1, lsl #32
   83a50:	aa010000 	orr	x0, x0, x1
   83a54:	d5182040 	msr	tcr_el1, x0
   83a58:	d5381000 	mrs	x0, sctlr_el1
   83a5c:	529fffa2 	mov	w2, #0xfffd                	// #65533
   83a60:	72bffee2 	movk	w2, #0xfff7, lsl #16
   83a64:	528200a1 	mov	w1, #0x1005                	// #4101
   83a68:	0a020000 	and	w0, w0, w2
   83a6c:	2a010000 	orr	w0, w0, w1
   83a70:	d5181000 	msr	sctlr_el1, x0
   83a74:	f9400bf3 	ldr	x19, [sp, #16]
   83a78:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83a7c:	d65f03c0 	ret
   83a80:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   83a84:	d0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   83a88:	91368021 	add	x1, x1, #0xda0
   83a8c:	91374000 	add	x0, x0, #0xdd0
   83a90:	52800fc2 	mov	w2, #0x7e                  	// #126
   83a94:	940005b3 	bl	85160 <assertion_failed>
   83a98:	17ffffe0 	b	83a18 <CMemorySystem::EnableMMU()+0x18>
   83a9c:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   83aa0:	d0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   83aa4:	91378000 	add	x0, x0, #0xde0
   83aa8:	91368021 	add	x1, x1, #0xda0
   83aac:	528010a2 	mov	w2, #0x85                  	// #133
   83ab0:	940005ac 	bl	85160 <assertion_failed>
   83ab4:	f9400a60 	ldr	x0, [x19, #16]
   83ab8:	17ffffdc 	b	83a28 <CMemorySystem::EnableMMU()+0x28>
   83abc:	d503201f 	nop

0000000000083ac0 <CMemorySystem::GetCoherentPage(unsigned int)>:
   83ac0:	53103c00 	lsl	w0, w0, #16
   83ac4:	91540000 	add	x0, x0, #0x500, lsl #12
   83ac8:	d65f03c0 	ret
   83acc:	d503201f 	nop

0000000000083ad0 <CMemorySystem::Destructor() [clone .part.0]>:
   83ad0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83ad4:	910003fd 	mov	x29, sp
   83ad8:	d5381000 	mrs	x0, sctlr_el1
   83adc:	128000a1 	mov	w1, #0xfffffffa            	// #-6
   83ae0:	0a010000 	and	w0, w0, w1
   83ae4:	d5181000 	msr	sctlr_el1, x0
   83ae8:	d5033f9f 	dsb	sy
   83aec:	d5033fdf 	isb
   83af0:	940000c0 	bl	83df0 <CleanDataCache>
   83af4:	94000063 	bl	83c80 <InvalidateDataCache>
   83af8:	d508871f 	tlbi	vmalle1
   83afc:	d5033f9f 	dsb	sy
   83b00:	d5033fdf 	isb
   83b04:	a8c17bfd 	ldp	x29, x30, [sp], #16
   83b08:	d65f03c0 	ret
   83b0c:	00000000 	.inst	0x00000000 ; undefined

0000000000083b10 <CurrentExecutionLevel>:
   83b10:	d53b4221 	mrs	x1, daif
   83b14:	52800040 	mov	w0, #0x2                   	// #2
   83b18:	f27a003f 	tst	x1, #0x40
   83b1c:	d3471c21 	ubfx	x1, x1, #7, #1
   83b20:	1a800020 	csel	w0, w1, w0, eq  // eq = none
   83b24:	d65f03c0 	ret
   83b28:	d503201f 	nop
   83b2c:	d503201f 	nop

0000000000083b30 <EnterCritical>:
   83b30:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83b34:	910003fd 	mov	x29, sp
   83b38:	a90153f3 	stp	x19, x20, [sp, #16]
   83b3c:	2a0003f4 	mov	w20, w0
   83b40:	51000400 	sub	w0, w0, #0x1
   83b44:	7100041f 	cmp	w0, #0x1
   83b48:	f90013f5 	str	x21, [sp, #32]
   83b4c:	540003e8 	b.hi	83bc8 <EnterCritical+0x98>  // b.pmore
   83b50:	d53b4235 	mrs	x21, daif
   83b54:	71000a9f 	cmp	w20, #0x2
   83b58:	54000461 	b.ne	83be4 <EnterCritical+0xb4>  // b.any
   83b5c:	d50343df 	msr	daifset, #0x3
   83b60:	f0000033 	adrp	x19, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   83b64:	b94a6a60 	ldr	w0, [x19, #2664]
   83b68:	71004c1f 	cmp	w0, #0x13
   83b6c:	54000208 	b.hi	83bac <EnterCritical+0x7c>  // b.pmore
   83b70:	b94a6a60 	ldr	w0, [x19, #2664]
   83b74:	9129a261 	add	x1, x19, #0xa68
   83b78:	7100069f 	cmp	w20, #0x1
   83b7c:	91002021 	add	x1, x1, #0x8
   83b80:	11000402 	add	w2, w0, #0x1
   83b84:	2a0003e0 	mov	w0, w0
   83b88:	b90a6a62 	str	w2, [x19, #2664]
   83b8c:	b8207835 	str	w21, [x1, x0, lsl #2]
   83b90:	54000041 	b.ne	83b98 <EnterCritical+0x68>  // b.any
   83b94:	d50341ff 	msr	daifclr, #0x1
   83b98:	d5033fbf 	dmb	sy
   83b9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   83ba0:	f94013f5 	ldr	x21, [sp, #32]
   83ba4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83ba8:	d65f03c0 	ret
   83bac:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   83bb0:	d0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   83bb4:	91380021 	add	x1, x1, #0xe00
   83bb8:	913a0000 	add	x0, x0, #0xe80
   83bbc:	52800da2 	mov	w2, #0x6d                  	// #109
   83bc0:	94000568 	bl	85160 <assertion_failed>
   83bc4:	17ffffeb 	b	83b70 <EnterCritical+0x40>
   83bc8:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   83bcc:	d0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   83bd0:	91380021 	add	x1, x1, #0xe00
   83bd4:	91386000 	add	x0, x0, #0xe18
   83bd8:	52800c62 	mov	w2, #0x63                  	// #99
   83bdc:	94000561 	bl	85160 <assertion_failed>
   83be0:	17ffffdc 	b	83b50 <EnterCritical+0x20>
   83be4:	3637fbd5 	tbz	w21, #6, 83b5c <EnterCritical+0x2c>
   83be8:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   83bec:	d0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   83bf0:	91380021 	add	x1, x1, #0xe00
   83bf4:	91394000 	add	x0, x0, #0xe50
   83bf8:	52800d22 	mov	w2, #0x69                  	// #105
   83bfc:	94000559 	bl	85160 <assertion_failed>
   83c00:	17ffffd7 	b	83b5c <EnterCritical+0x2c>
   83c04:	d503201f 	nop
   83c08:	d503201f 	nop
   83c0c:	d503201f 	nop

0000000000083c10 <LeaveCritical>:
   83c10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83c14:	910003fd 	mov	x29, sp
   83c18:	f9000bf3 	str	x19, [sp, #16]
   83c1c:	d5033fbf 	dmb	sy
   83c20:	d50341df 	msr	daifset, #0x1
   83c24:	f0000033 	adrp	x19, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   83c28:	b94a6a60 	ldr	w0, [x19, #2664]
   83c2c:	34000160 	cbz	w0, 83c58 <LeaveCritical+0x48>
   83c30:	b94a6a60 	ldr	w0, [x19, #2664]
   83c34:	9129a261 	add	x1, x19, #0xa68
   83c38:	91002021 	add	x1, x1, #0x8
   83c3c:	51000402 	sub	w2, w0, #0x1
   83c40:	b90a6a62 	str	w2, [x19, #2664]
   83c44:	b8627820 	ldr	w0, [x1, x2, lsl #2]
   83c48:	d51b4220 	msr	daif, x0
   83c4c:	f9400bf3 	ldr	x19, [sp, #16]
   83c50:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83c54:	d65f03c0 	ret
   83c58:	d0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   83c5c:	d0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   83c60:	91380021 	add	x1, x1, #0xe00
   83c64:	913aa000 	add	x0, x0, #0xea8
   83c68:	52800fc2 	mov	w2, #0x7e                  	// #126
   83c6c:	9400053d 	bl	85160 <assertion_failed>
   83c70:	17fffff0 	b	83c30 <LeaveCritical+0x20>
   83c74:	d503201f 	nop
   83c78:	d503201f 	nop
   83c7c:	d503201f 	nop

0000000000083c80 <InvalidateDataCache>:
   83c80:	d2800000 	mov	x0, #0x0                   	// #0
   83c84:	d503201f 	nop
   83c88:	d5087640 	dc	isw, x0
   83c8c:	32010001 	orr	w1, w0, #0x80000000
   83c90:	d5087641 	dc	isw, x1
   83c94:	91010000 	add	x0, x0, #0x40
   83c98:	f140101f 	cmp	x0, #0x4, lsl #12
   83c9c:	54ffff61 	b.ne	83c88 <InvalidateDataCache+0x8>  // b.any
   83ca0:	52800050 	mov	w16, #0x2                   	// #2
   83ca4:	72a20010 	movk	w16, #0x1000, lsl #16
   83ca8:	5280004f 	mov	w15, #0x2                   	// #2
   83cac:	72a4000f 	movk	w15, #0x2000, lsl #16
   83cb0:	5280004e 	mov	w14, #0x2                   	// #2
   83cb4:	72a6000e 	movk	w14, #0x3000, lsl #16
   83cb8:	5280004d 	mov	w13, #0x2                   	// #2
   83cbc:	72a8000d 	movk	w13, #0x4000, lsl #16
   83cc0:	5280004c 	mov	w12, #0x2                   	// #2
   83cc4:	72aa000c 	movk	w12, #0x5000, lsl #16
   83cc8:	5280004b 	mov	w11, #0x2                   	// #2
   83ccc:	72ac000b 	movk	w11, #0x6000, lsl #16
   83cd0:	5280004a 	mov	w10, #0x2                   	// #2
   83cd4:	72ae000a 	movk	w10, #0x7000, lsl #16
   83cd8:	52800049 	mov	w9, #0x2                   	// #2
   83cdc:	72b00009 	movk	w9, #0x8000, lsl #16
   83ce0:	52800048 	mov	w8, #0x2                   	// #2
   83ce4:	72b20008 	movk	w8, #0x9000, lsl #16
   83ce8:	52800047 	mov	w7, #0x2                   	// #2
   83cec:	72b40007 	movk	w7, #0xa000, lsl #16
   83cf0:	52800046 	mov	w6, #0x2                   	// #2
   83cf4:	72b60006 	movk	w6, #0xb000, lsl #16
   83cf8:	52800045 	mov	w5, #0x2                   	// #2
   83cfc:	72b80005 	movk	w5, #0xc000, lsl #16
   83d00:	52800044 	mov	w4, #0x2                   	// #2
   83d04:	72ba0004 	movk	w4, #0xd000, lsl #16
   83d08:	52800043 	mov	w3, #0x2                   	// #2
   83d0c:	72bc0003 	movk	w3, #0xe000, lsl #16
   83d10:	52800042 	mov	w2, #0x2                   	// #2
   83d14:	72be0002 	movk	w2, #0xf000, lsl #16
   83d18:	52800000 	mov	w0, #0x0                   	// #0
   83d1c:	d503201f 	nop
   83d20:	321f0001 	orr	w1, w0, #0x2
   83d24:	d5087641 	dc	isw, x1
   83d28:	2a100001 	orr	w1, w0, w16
   83d2c:	d5087641 	dc	isw, x1
   83d30:	2a0f0001 	orr	w1, w0, w15
   83d34:	d5087641 	dc	isw, x1
   83d38:	2a0e0001 	orr	w1, w0, w14
   83d3c:	d5087641 	dc	isw, x1
   83d40:	2a0d0001 	orr	w1, w0, w13
   83d44:	d5087641 	dc	isw, x1
   83d48:	2a0c0001 	orr	w1, w0, w12
   83d4c:	d5087641 	dc	isw, x1
   83d50:	2a0b0001 	orr	w1, w0, w11
   83d54:	d5087641 	dc	isw, x1
   83d58:	2a0a0001 	orr	w1, w0, w10
   83d5c:	d5087641 	dc	isw, x1
   83d60:	2a090001 	orr	w1, w0, w9
   83d64:	d5087641 	dc	isw, x1
   83d68:	2a080001 	orr	w1, w0, w8
   83d6c:	d5087641 	dc	isw, x1
   83d70:	2a070001 	orr	w1, w0, w7
   83d74:	d5087641 	dc	isw, x1
   83d78:	2a060001 	orr	w1, w0, w6
   83d7c:	d5087641 	dc	isw, x1
   83d80:	2a050001 	orr	w1, w0, w5
   83d84:	d5087641 	dc	isw, x1
   83d88:	2a040001 	orr	w1, w0, w4
   83d8c:	d5087641 	dc	isw, x1
   83d90:	2a030001 	orr	w1, w0, w3
   83d94:	d5087641 	dc	isw, x1
   83d98:	2a020001 	orr	w1, w0, w2
   83d9c:	d5087641 	dc	isw, x1
   83da0:	11010000 	add	w0, w0, #0x40
   83da4:	7140401f 	cmp	w0, #0x10, lsl #12
   83da8:	54fffbc1 	b.ne	83d20 <InvalidateDataCache+0xa0>  // b.any
   83dac:	d5033f9f 	dsb	sy
   83db0:	d65f03c0 	ret
   83db4:	d503201f 	nop
   83db8:	d503201f 	nop
   83dbc:	d503201f 	nop

0000000000083dc0 <InvalidateDataCacheL1Only>:
   83dc0:	d2800000 	mov	x0, #0x0                   	// #0
   83dc4:	d503201f 	nop
   83dc8:	d5087640 	dc	isw, x0
   83dcc:	32010001 	orr	w1, w0, #0x80000000
   83dd0:	d5087641 	dc	isw, x1
   83dd4:	91010000 	add	x0, x0, #0x40
   83dd8:	f140101f 	cmp	x0, #0x4, lsl #12
   83ddc:	54ffff61 	b.ne	83dc8 <InvalidateDataCacheL1Only+0x8>  // b.any
   83de0:	d5033f9f 	dsb	sy
   83de4:	d65f03c0 	ret
   83de8:	d503201f 	nop
   83dec:	d503201f 	nop

0000000000083df0 <CleanDataCache>:
   83df0:	d2800000 	mov	x0, #0x0                   	// #0
   83df4:	d503201f 	nop
   83df8:	d5087a40 	dc	csw, x0
   83dfc:	32010001 	orr	w1, w0, #0x80000000
   83e00:	d5087a41 	dc	csw, x1
   83e04:	91010000 	add	x0, x0, #0x40
   83e08:	f140101f 	cmp	x0, #0x4, lsl #12
   83e0c:	54ffff61 	b.ne	83df8 <CleanDataCache+0x8>  // b.any
   83e10:	52800050 	mov	w16, #0x2                   	// #2
   83e14:	72a20010 	movk	w16, #0x1000, lsl #16
   83e18:	5280004f 	mov	w15, #0x2                   	// #2
   83e1c:	72a4000f 	movk	w15, #0x2000, lsl #16
   83e20:	5280004e 	mov	w14, #0x2                   	// #2
   83e24:	72a6000e 	movk	w14, #0x3000, lsl #16
   83e28:	5280004d 	mov	w13, #0x2                   	// #2
   83e2c:	72a8000d 	movk	w13, #0x4000, lsl #16
   83e30:	5280004c 	mov	w12, #0x2                   	// #2
   83e34:	72aa000c 	movk	w12, #0x5000, lsl #16
   83e38:	5280004b 	mov	w11, #0x2                   	// #2
   83e3c:	72ac000b 	movk	w11, #0x6000, lsl #16
   83e40:	5280004a 	mov	w10, #0x2                   	// #2
   83e44:	72ae000a 	movk	w10, #0x7000, lsl #16
   83e48:	52800049 	mov	w9, #0x2                   	// #2
   83e4c:	72b00009 	movk	w9, #0x8000, lsl #16
   83e50:	52800048 	mov	w8, #0x2                   	// #2
   83e54:	72b20008 	movk	w8, #0x9000, lsl #16
   83e58:	52800047 	mov	w7, #0x2                   	// #2
   83e5c:	72b40007 	movk	w7, #0xa000, lsl #16
   83e60:	52800046 	mov	w6, #0x2                   	// #2
   83e64:	72b60006 	movk	w6, #0xb000, lsl #16
   83e68:	52800045 	mov	w5, #0x2                   	// #2
   83e6c:	72b80005 	movk	w5, #0xc000, lsl #16
   83e70:	52800044 	mov	w4, #0x2                   	// #2
   83e74:	72ba0004 	movk	w4, #0xd000, lsl #16
   83e78:	52800043 	mov	w3, #0x2                   	// #2
   83e7c:	72bc0003 	movk	w3, #0xe000, lsl #16
   83e80:	52800042 	mov	w2, #0x2                   	// #2
   83e84:	72be0002 	movk	w2, #0xf000, lsl #16
   83e88:	52800000 	mov	w0, #0x0                   	// #0
   83e8c:	d503201f 	nop
   83e90:	321f0001 	orr	w1, w0, #0x2
   83e94:	d5087a41 	dc	csw, x1
   83e98:	2a100001 	orr	w1, w0, w16
   83e9c:	d5087a41 	dc	csw, x1
   83ea0:	2a0f0001 	orr	w1, w0, w15
   83ea4:	d5087a41 	dc	csw, x1
   83ea8:	2a0e0001 	orr	w1, w0, w14
   83eac:	d5087a41 	dc	csw, x1
   83eb0:	2a0d0001 	orr	w1, w0, w13
   83eb4:	d5087a41 	dc	csw, x1
   83eb8:	2a0c0001 	orr	w1, w0, w12
   83ebc:	d5087a41 	dc	csw, x1
   83ec0:	2a0b0001 	orr	w1, w0, w11
   83ec4:	d5087a41 	dc	csw, x1
   83ec8:	2a0a0001 	orr	w1, w0, w10
   83ecc:	d5087a41 	dc	csw, x1
   83ed0:	2a090001 	orr	w1, w0, w9
   83ed4:	d5087a41 	dc	csw, x1
   83ed8:	2a080001 	orr	w1, w0, w8
   83edc:	d5087a41 	dc	csw, x1
   83ee0:	2a070001 	orr	w1, w0, w7
   83ee4:	d5087a41 	dc	csw, x1
   83ee8:	2a060001 	orr	w1, w0, w6
   83eec:	d5087a41 	dc	csw, x1
   83ef0:	2a050001 	orr	w1, w0, w5
   83ef4:	d5087a41 	dc	csw, x1
   83ef8:	2a040001 	orr	w1, w0, w4
   83efc:	d5087a41 	dc	csw, x1
   83f00:	2a030001 	orr	w1, w0, w3
   83f04:	d5087a41 	dc	csw, x1
   83f08:	2a020001 	orr	w1, w0, w2
   83f0c:	d5087a41 	dc	csw, x1
   83f10:	11010000 	add	w0, w0, #0x40
   83f14:	7140401f 	cmp	w0, #0x10, lsl #12
   83f18:	54fffbc1 	b.ne	83e90 <CleanDataCache+0xa0>  // b.any
   83f1c:	d5033f9f 	dsb	sy
   83f20:	d65f03c0 	ret
   83f24:	d503201f 	nop
   83f28:	d503201f 	nop
   83f2c:	d503201f 	nop

0000000000083f30 <InvalidateDataCacheRange>:
   83f30:	d5087620 	dc	ivac, x0
   83f34:	91010022 	add	x2, x1, #0x40
   83f38:	f100fc5f 	cmp	x2, #0x3f
   83f3c:	54000129 	b.ls	83f60 <InvalidateDataCacheRange+0x30>  // b.plast
   83f40:	91010000 	add	x0, x0, #0x40
   83f44:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   83f48:	8b010001 	add	x1, x0, x1
   83f4c:	d503201f 	nop
   83f50:	d5087620 	dc	ivac, x0
   83f54:	eb00003f 	cmp	x1, x0
   83f58:	91010000 	add	x0, x0, #0x40
   83f5c:	54ffffa1 	b.ne	83f50 <InvalidateDataCacheRange+0x20>  // b.any
   83f60:	d5033f9f 	dsb	sy
   83f64:	d65f03c0 	ret
   83f68:	d503201f 	nop
   83f6c:	d503201f 	nop

0000000000083f70 <CleanDataCacheRange>:
   83f70:	d50b7a20 	dc	cvac, x0
   83f74:	91010022 	add	x2, x1, #0x40
   83f78:	f100fc5f 	cmp	x2, #0x3f
   83f7c:	54000129 	b.ls	83fa0 <CleanDataCacheRange+0x30>  // b.plast
   83f80:	91010000 	add	x0, x0, #0x40
   83f84:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   83f88:	8b010001 	add	x1, x0, x1
   83f8c:	d503201f 	nop
   83f90:	d50b7a20 	dc	cvac, x0
   83f94:	eb00003f 	cmp	x1, x0
   83f98:	91010000 	add	x0, x0, #0x40
   83f9c:	54ffffa1 	b.ne	83f90 <CleanDataCacheRange+0x20>  // b.any
   83fa0:	d5033f9f 	dsb	sy
   83fa4:	d65f03c0 	ret
   83fa8:	d503201f 	nop
   83fac:	d503201f 	nop

0000000000083fb0 <CleanAndInvalidateDataCacheRange>:
   83fb0:	d50b7e20 	dc	civac, x0
   83fb4:	91010022 	add	x2, x1, #0x40
   83fb8:	f100fc5f 	cmp	x2, #0x3f
   83fbc:	54000129 	b.ls	83fe0 <CleanAndInvalidateDataCacheRange+0x30>  // b.plast
   83fc0:	91010000 	add	x0, x0, #0x40
   83fc4:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   83fc8:	8b010001 	add	x1, x0, x1
   83fcc:	d503201f 	nop
   83fd0:	d50b7e20 	dc	civac, x0
   83fd4:	eb00003f 	cmp	x1, x0
   83fd8:	91010000 	add	x0, x0, #0x40
   83fdc:	54ffffa1 	b.ne	83fd0 <CleanAndInvalidateDataCacheRange+0x20>  // b.any
   83fe0:	d5033f9f 	dsb	sy
   83fe4:	d65f03c0 	ret

0000000000083fe8 <CTranslationTable::CTranslationTable(unsigned long)>:
   83fe8:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   83fec:	910003fd 	mov	x29, sp
   83ff0:	f9000fe0 	str	x0, [sp, #24]
   83ff4:	f9000be1 	str	x1, [sp, #16]
   83ff8:	f9400fe0 	ldr	x0, [sp, #24]
   83ffc:	f9400be1 	ldr	x1, [sp, #16]
   84000:	f9000001 	str	x1, [x0]
   84004:	f9400fe0 	ldr	x0, [sp, #24]
   84008:	f900041f 	str	xzr, [x0, #8]
   8400c:	940003f5 	bl	84fe0 <palloc>
   84010:	aa0003e1 	mov	x1, x0
   84014:	f9400fe0 	ldr	x0, [sp, #24]
   84018:	f9000401 	str	x1, [x0, #8]
   8401c:	f9400fe0 	ldr	x0, [sp, #24]
   84020:	f9400400 	ldr	x0, [x0, #8]
   84024:	f100001f 	cmp	x0, #0x0
   84028:	1a9f07e0 	cset	w0, ne  // ne = any
   8402c:	12001c00 	and	w0, w0, #0xff
   84030:	92401c00 	and	x0, x0, #0xff
   84034:	f100001f 	cmp	x0, #0x0
   84038:	540000e1 	b.ne	84054 <CTranslationTable::CTranslationTable(unsigned long)+0x6c>  // b.any
   8403c:	528005e2 	mov	w2, #0x2f                  	// #47
   84040:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   84044:	913b0001 	add	x1, x0, #0xec0
   84048:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   8404c:	913b6000 	add	x0, x0, #0xed8
   84050:	94000444 	bl	85160 <assertion_failed>
   84054:	f9400fe0 	ldr	x0, [sp, #24]
   84058:	f9400400 	ldr	x0, [x0, #8]
   8405c:	d2a00022 	mov	x2, #0x10000               	// #65536
   84060:	52800001 	mov	w1, #0x0                   	// #0
   84064:	94000eff 	bl	87c60 <memset>
   84068:	b9003fff 	str	wzr, [sp, #60]
   8406c:	b9403fe0 	ldr	w0, [sp, #60]
   84070:	7101fc1f 	cmp	w0, #0x7f
   84074:	54000ba8 	b.hi	841e8 <CTranslationTable::CTranslationTable(unsigned long)+0x200>  // b.pmore
   84078:	b9403fe0 	ldr	w0, [sp, #60]
   8407c:	d3638800 	lsl	x0, x0, #29
   84080:	f9001be0 	str	x0, [sp, #48]
   84084:	f9401be1 	ldr	x1, [sp, #48]
   84088:	b2407fe0 	mov	x0, #0xffffffff            	// #4294967295
   8408c:	eb00003f 	cmp	x1, x0
   84090:	54000169 	b.ls	840bc <CTranslationTable::CTranslationTable(unsigned long)+0xd4>  // b.plast
   84094:	f9401be1 	ldr	x1, [sp, #48]
   84098:	b2407fe0 	mov	x0, #0xffffffff            	// #4294967295
   8409c:	f2c000a0 	movk	x0, #0x5, lsl #32
   840a0:	eb00003f 	cmp	x1, x0
   840a4:	54000989 	b.ls	841d4 <CTranslationTable::CTranslationTable(unsigned long)+0x1ec>  // b.plast
   840a8:	f9401be1 	ldr	x1, [sp, #48]
   840ac:	b24067e0 	mov	x0, #0x3ffffff             	// #67108863
   840b0:	f2c000c0 	movk	x0, #0x6, lsl #32
   840b4:	eb00003f 	cmp	x1, x0
   840b8:	540008e8 	b.hi	841d4 <CTranslationTable::CTranslationTable(unsigned long)+0x1ec>  // b.pmore
   840bc:	f9401be1 	ldr	x1, [sp, #48]
   840c0:	f9400fe0 	ldr	x0, [sp, #24]
   840c4:	94000060 	bl	84244 <CTranslationTable::CreateLevel3Table(unsigned long)>
   840c8:	f90017e0 	str	x0, [sp, #40]
   840cc:	f94017e0 	ldr	x0, [sp, #40]
   840d0:	f100001f 	cmp	x0, #0x0
   840d4:	1a9f07e0 	cset	w0, ne  // ne = any
   840d8:	12001c00 	and	w0, w0, #0xff
   840dc:	92401c00 	and	x0, x0, #0xff
   840e0:	f100001f 	cmp	x0, #0x0
   840e4:	540000e1 	b.ne	84100 <CTranslationTable::CTranslationTable(unsigned long)+0x118>  // b.any
   840e8:	52800822 	mov	w2, #0x41                  	// #65
   840ec:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   840f0:	913b0001 	add	x1, x0, #0xec0
   840f4:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   840f8:	913ba000 	add	x0, x0, #0xee8
   840fc:	94000419 	bl	85160 <assertion_failed>
   84100:	f9400fe0 	ldr	x0, [sp, #24]
   84104:	f9400401 	ldr	x1, [x0, #8]
   84108:	b9403fe0 	ldr	w0, [sp, #60]
   8410c:	d37df000 	lsl	x0, x0, #3
   84110:	8b000020 	add	x0, x1, x0
   84114:	f90013e0 	str	x0, [sp, #32]
   84118:	f94013e0 	ldr	x0, [sp, #32]
   8411c:	39400001 	ldrb	w1, [x0]
   84120:	32000421 	orr	w1, w1, #0x3
   84124:	39000001 	strb	w1, [x0]
   84128:	f94013e0 	ldr	x0, [sp, #32]
   8412c:	39400001 	ldrb	w1, [x0]
   84130:	12000421 	and	w1, w1, #0x3
   84134:	39000001 	strb	w1, [x0]
   84138:	39400401 	ldrb	w1, [x0, #1]
   8413c:	52800002 	mov	w2, #0x0                   	// #0
   84140:	0a020021 	and	w1, w1, w2
   84144:	39000401 	strb	w1, [x0, #1]
   84148:	f94017e0 	ldr	x0, [sp, #40]
   8414c:	d350fc01 	lsr	x1, x0, #16
   84150:	2a0103e2 	mov	w2, w1
   84154:	f94013e1 	ldr	x1, [sp, #32]
   84158:	f9400020 	ldr	x0, [x1]
   8415c:	b3707c40 	bfi	x0, x2, #16, #32
   84160:	f9000020 	str	x0, [x1]
   84164:	f94013e0 	ldr	x0, [sp, #32]
   84168:	39401801 	ldrb	w1, [x0, #6]
   8416c:	121c6c21 	and	w1, w1, #0xfffffff0
   84170:	39001801 	strb	w1, [x0, #6]
   84174:	f94013e0 	ldr	x0, [sp, #32]
   84178:	39401801 	ldrb	w1, [x0, #6]
   8417c:	12000c21 	and	w1, w1, #0xf
   84180:	39001801 	strb	w1, [x0, #6]
   84184:	39401c01 	ldrb	w1, [x0, #7]
   84188:	121d7021 	and	w1, w1, #0xfffffff8
   8418c:	39001c01 	strb	w1, [x0, #7]
   84190:	f94013e0 	ldr	x0, [sp, #32]
   84194:	39401c01 	ldrb	w1, [x0, #7]
   84198:	121c7821 	and	w1, w1, #0xfffffff7
   8419c:	39001c01 	strb	w1, [x0, #7]
   841a0:	f94013e0 	ldr	x0, [sp, #32]
   841a4:	39401c01 	ldrb	w1, [x0, #7]
   841a8:	121b7821 	and	w1, w1, #0xffffffef
   841ac:	39001c01 	strb	w1, [x0, #7]
   841b0:	f94013e0 	ldr	x0, [sp, #32]
   841b4:	39401c01 	ldrb	w1, [x0, #7]
   841b8:	12197421 	and	w1, w1, #0xffffff9f
   841bc:	39001c01 	strb	w1, [x0, #7]
   841c0:	f94013e0 	ldr	x0, [sp, #32]
   841c4:	39401c01 	ldrb	w1, [x0, #7]
   841c8:	12001821 	and	w1, w1, #0x7f
   841cc:	39001c01 	strb	w1, [x0, #7]
   841d0:	14000002 	b	841d8 <CTranslationTable::CTranslationTable(unsigned long)+0x1f0>
   841d4:	d503201f 	nop
   841d8:	b9403fe0 	ldr	w0, [sp, #60]
   841dc:	11000400 	add	w0, w0, #0x1
   841e0:	b9003fe0 	str	w0, [sp, #60]
   841e4:	17ffffa2 	b	8406c <CTranslationTable::CTranslationTable(unsigned long)+0x84>
   841e8:	d5033f9f 	dsb	sy
   841ec:	d503201f 	nop
   841f0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   841f4:	d65f03c0 	ret

00000000000841f8 <CTranslationTable::~CTranslationTable()>:
   841f8:	f9400400 	ldr	x0, [x0, #8]
   841fc:	140003b1 	b	850c0 <pfree>

0000000000084200 <CTranslationTable::GetBaseAddress() const>:
   84200:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84204:	910003fd 	mov	x29, sp
   84208:	f9000bf3 	str	x19, [sp, #16]
   8420c:	aa0003f3 	mov	x19, x0
   84210:	f9400400 	ldr	x0, [x0, #8]
   84214:	b4000080 	cbz	x0, 84224 <CTranslationTable::GetBaseAddress() const+0x24>
   84218:	f9400bf3 	ldr	x19, [sp, #16]
   8421c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84220:	d65f03c0 	ret
   84224:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   84228:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   8422c:	913b6000 	add	x0, x0, #0xed8
   84230:	913b0021 	add	x1, x1, #0xec0
   84234:	52800b62 	mov	w2, #0x5b                  	// #91
   84238:	940003ca 	bl	85160 <assertion_failed>
   8423c:	f9400660 	ldr	x0, [x19, #8]
   84240:	17fffff6 	b	84218 <CTranslationTable::GetBaseAddress() const+0x18>

0000000000084244 <CTranslationTable::CreateLevel3Table(unsigned long)>:
   84244:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   84248:	910003fd 	mov	x29, sp
   8424c:	f9000fe0 	str	x0, [sp, #24]
   84250:	f9000be1 	str	x1, [sp, #16]
   84254:	94000363 	bl	84fe0 <palloc>
   84258:	f9001be0 	str	x0, [sp, #48]
   8425c:	f9401be0 	ldr	x0, [sp, #48]
   84260:	f100001f 	cmp	x0, #0x0
   84264:	1a9f07e0 	cset	w0, ne  // ne = any
   84268:	12001c00 	and	w0, w0, #0xff
   8426c:	92401c00 	and	x0, x0, #0xff
   84270:	f100001f 	cmp	x0, #0x0
   84274:	540000e1 	b.ne	84290 <CTranslationTable::CreateLevel3Table(unsigned long)+0x4c>  // b.any
   84278:	52800c42 	mov	w2, #0x62                  	// #98
   8427c:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   84280:	913b0001 	add	x1, x0, #0xec0
   84284:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   84288:	913ba000 	add	x0, x0, #0xee8
   8428c:	940003b5 	bl	85160 <assertion_failed>
   84290:	b9003fff 	str	wzr, [sp, #60]
   84294:	b9403fe1 	ldr	w1, [sp, #60]
   84298:	5283ffe0 	mov	w0, #0x1fff                	// #8191
   8429c:	6b00003f 	cmp	w1, w0
   842a0:	54000ee8 	b.hi	8447c <CTranslationTable::CreateLevel3Table(unsigned long)+0x238>  // b.pmore
   842a4:	b9403fe0 	ldr	w0, [sp, #60]
   842a8:	d37df000 	lsl	x0, x0, #3
   842ac:	f9401be1 	ldr	x1, [sp, #48]
   842b0:	8b000020 	add	x0, x1, x0
   842b4:	f90017e0 	str	x0, [sp, #40]
   842b8:	f94017e0 	ldr	x0, [sp, #40]
   842bc:	39400001 	ldrb	w1, [x0]
   842c0:	32000421 	orr	w1, w1, #0x3
   842c4:	39000001 	strb	w1, [x0]
   842c8:	f94017e0 	ldr	x0, [sp, #40]
   842cc:	39400001 	ldrb	w1, [x0]
   842d0:	121b7021 	and	w1, w1, #0xffffffe3
   842d4:	39000001 	strb	w1, [x0]
   842d8:	f94017e0 	ldr	x0, [sp, #40]
   842dc:	39400001 	ldrb	w1, [x0]
   842e0:	121a7821 	and	w1, w1, #0xffffffdf
   842e4:	39000001 	strb	w1, [x0]
   842e8:	f94017e0 	ldr	x0, [sp, #40]
   842ec:	39400001 	ldrb	w1, [x0]
   842f0:	12001421 	and	w1, w1, #0x3f
   842f4:	39000001 	strb	w1, [x0]
   842f8:	f94017e0 	ldr	x0, [sp, #40]
   842fc:	39400401 	ldrb	w1, [x0, #1]
   84300:	32000421 	orr	w1, w1, #0x3
   84304:	39000401 	strb	w1, [x0, #1]
   84308:	f94017e0 	ldr	x0, [sp, #40]
   8430c:	39400401 	ldrb	w1, [x0, #1]
   84310:	321e0021 	orr	w1, w1, #0x4
   84314:	39000401 	strb	w1, [x0, #1]
   84318:	f94017e0 	ldr	x0, [sp, #40]
   8431c:	39400401 	ldrb	w1, [x0, #1]
   84320:	121c7821 	and	w1, w1, #0xfffffff7
   84324:	39000401 	strb	w1, [x0, #1]
   84328:	f94017e0 	ldr	x0, [sp, #40]
   8432c:	39400401 	ldrb	w1, [x0, #1]
   84330:	12000c21 	and	w1, w1, #0xf
   84334:	39000401 	strb	w1, [x0, #1]
   84338:	f9400be0 	ldr	x0, [sp, #16]
   8433c:	d350fc01 	lsr	x1, x0, #16
   84340:	2a0103e2 	mov	w2, w1
   84344:	f94017e1 	ldr	x1, [sp, #40]
   84348:	f9400020 	ldr	x0, [x1]
   8434c:	b3707c40 	bfi	x0, x2, #16, #32
   84350:	f9000020 	str	x0, [x1]
   84354:	f94017e0 	ldr	x0, [sp, #40]
   84358:	39401801 	ldrb	w1, [x0, #6]
   8435c:	121c6c21 	and	w1, w1, #0xfffffff0
   84360:	39001801 	strb	w1, [x0, #6]
   84364:	f94017e0 	ldr	x0, [sp, #40]
   84368:	39401801 	ldrb	w1, [x0, #6]
   8436c:	121b7821 	and	w1, w1, #0xffffffef
   84370:	39001801 	strb	w1, [x0, #6]
   84374:	f94017e0 	ldr	x0, [sp, #40]
   84378:	39401801 	ldrb	w1, [x0, #6]
   8437c:	121a7821 	and	w1, w1, #0xffffffdf
   84380:	39001801 	strb	w1, [x0, #6]
   84384:	f94017e0 	ldr	x0, [sp, #40]
   84388:	39401801 	ldrb	w1, [x0, #6]
   8438c:	321a0021 	orr	w1, w1, #0x40
   84390:	39001801 	strb	w1, [x0, #6]
   84394:	f94017e0 	ldr	x0, [sp, #40]
   84398:	39401801 	ldrb	w1, [x0, #6]
   8439c:	12001821 	and	w1, w1, #0x7f
   843a0:	39001801 	strb	w1, [x0, #6]
   843a4:	39401c01 	ldrb	w1, [x0, #7]
   843a8:	52800002 	mov	w2, #0x0                   	// #0
   843ac:	0a020021 	and	w1, w1, w2
   843b0:	39001c01 	strb	w1, [x0, #7]
   843b4:	f9400be1 	ldr	x1, [sp, #16]
   843b8:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   843bc:	91181000 	add	x0, x0, #0x604
   843c0:	eb00003f 	cmp	x1, x0
   843c4:	540004e3 	b.cc	84460 <CTranslationTable::CreateLevel3Table(unsigned long)+0x21c>  // b.lo, b.ul, b.last
   843c8:	f94017e0 	ldr	x0, [sp, #40]
   843cc:	39401801 	ldrb	w1, [x0, #6]
   843d0:	321b0021 	orr	w1, w1, #0x20
   843d4:	39001801 	strb	w1, [x0, #6]
   843d8:	f9400fe0 	ldr	x0, [sp, #24]
   843dc:	f9400001 	ldr	x1, [x0]
   843e0:	f9400be0 	ldr	x0, [sp, #16]
   843e4:	eb00003f 	cmp	x1, x0
   843e8:	54000188 	b.hi	84418 <CTranslationTable::CreateLevel3Table(unsigned long)+0x1d4>  // b.pmore
   843ec:	f94017e1 	ldr	x1, [sp, #40]
   843f0:	39400020 	ldrb	w0, [x1]
   843f4:	52800022 	mov	w2, #0x1                   	// #1
   843f8:	331e0840 	bfi	w0, w2, #2, #3
   843fc:	39000020 	strb	w0, [x1]
   84400:	f94017e1 	ldr	x1, [sp, #40]
   84404:	39400420 	ldrb	w0, [x1, #1]
   84408:	52800042 	mov	w2, #0x2                   	// #2
   8440c:	33000440 	bfxil	w0, w2, #0, #2
   84410:	39000420 	strb	w0, [x1, #1]
   84414:	14000013 	b	84460 <CTranslationTable::CreateLevel3Table(unsigned long)+0x21c>
   84418:	f9400be1 	ldr	x1, [sp, #16]
   8441c:	12bff600 	mov	w0, #0x4fffff              	// #5242879
   84420:	eb00003f 	cmp	x1, x0
   84424:	540001e9 	b.ls	84460 <CTranslationTable::CreateLevel3Table(unsigned long)+0x21c>  // b.plast
   84428:	f9400be1 	ldr	x1, [sp, #16]
   8442c:	12bfee00 	mov	w0, #0x8fffff              	// #9437183
   84430:	eb00003f 	cmp	x1, x0
   84434:	54000168 	b.hi	84460 <CTranslationTable::CreateLevel3Table(unsigned long)+0x21c>  // b.pmore
   84438:	f94017e1 	ldr	x1, [sp, #40]
   8443c:	39400020 	ldrb	w0, [x1]
   84440:	52800042 	mov	w2, #0x2                   	// #2
   84444:	331e0840 	bfi	w0, w2, #2, #3
   84448:	39000020 	strb	w0, [x1]
   8444c:	f94017e1 	ldr	x1, [sp, #40]
   84450:	39400420 	ldrb	w0, [x1, #1]
   84454:	52800042 	mov	w2, #0x2                   	// #2
   84458:	33000440 	bfxil	w0, w2, #0, #2
   8445c:	39000420 	strb	w0, [x1, #1]
   84460:	f9400be0 	ldr	x0, [sp, #16]
   84464:	91404000 	add	x0, x0, #0x10, lsl #12
   84468:	f9000be0 	str	x0, [sp, #16]
   8446c:	b9403fe0 	ldr	w0, [sp, #60]
   84470:	11000400 	add	w0, w0, #0x1
   84474:	b9003fe0 	str	w0, [sp, #60]
   84478:	17ffff87 	b	84294 <CTranslationTable::CreateLevel3Table(unsigned long)+0x50>
   8447c:	f9401be0 	ldr	x0, [sp, #48]
   84480:	a8c47bfd 	ldp	x29, x30, [sp], #64
   84484:	d65f03c0 	ret
	...

0000000000084490 <CInterruptSystem::CInterruptSystem()>:
   84490:	aa0003e1 	mov	x1, x0
   84494:	91200002 	add	x2, x0, #0x800
   84498:	91002021 	add	x1, x1, #0x8
   8449c:	f81f803f 	stur	xzr, [x1, #-8]
   844a0:	f903fc3f 	str	xzr, [x1, #2040]
   844a4:	eb02003f 	cmp	x1, x2
   844a8:	54ffff81 	b.ne	84498 <CInterruptSystem::CInterruptSystem()+0x8>  // b.any
   844ac:	d0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   844b0:	f9056020 	str	x0, [x1, #2752]
   844b4:	d65f03c0 	ret
   844b8:	d503201f 	nop
   844bc:	d503201f 	nop

00000000000844c0 <CInterruptSystem::~CInterruptSystem()>:
   844c0:	d50342df 	msr	daifset, #0x2
   844c4:	d2820001 	mov	x1, #0x1000                	// #4096
   844c8:	f2bff081 	movk	x1, #0xff84, lsl #16
   844cc:	d0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   844d0:	b900003f 	str	wzr, [x1]
   844d4:	f905601f 	str	xzr, [x0, #2752]
   844d8:	d65f03c0 	ret
   844dc:	d503201f 	nop

00000000000844e0 <CInterruptSystem::Initialize()>:
   844e0:	d2820003 	mov	x3, #0x1000                	// #4096
   844e4:	f2bff083 	movk	x3, #0xff84, lsl #16
   844e8:	d2823000 	mov	x0, #0x1180                	// #4480
   844ec:	f2bff080 	movk	x0, #0xff84, lsl #16
   844f0:	d2823402 	mov	x2, #0x11a0                	// #4512
   844f4:	f2bff082 	movk	x2, #0xff84, lsl #16
   844f8:	b900007f 	str	wzr, [x3]
   844fc:	12800001 	mov	w1, #0xffffffff            	// #-1
   84500:	b9000001 	str	w1, [x0]
   84504:	91001000 	add	x0, x0, #0x4
   84508:	b900fc01 	str	w1, [x0, #252]
   8450c:	b901fc01 	str	w1, [x0, #508]
   84510:	eb02001f 	cmp	x0, x2
   84514:	54ffff61 	b.ne	84500 <CInterruptSystem::Initialize()+0x20>  // b.any
   84518:	d2828000 	mov	x0, #0x1400                	// #5120
   8451c:	f2bff080 	movk	x0, #0xff84, lsl #16
   84520:	52941403 	mov	w3, #0xa0a0                	// #41120
   84524:	72b41403 	movk	w3, #0xa0a0, lsl #16
   84528:	d282a001 	mov	x1, #0x1500                	// #5376
   8452c:	f2bff081 	movk	x1, #0xff84, lsl #16
   84530:	3200c3e2 	mov	w2, #0x1010101             	// #16843009
   84534:	d503201f 	nop
   84538:	b9000003 	str	w3, [x0]
   8453c:	91001000 	add	x0, x0, #0x4
   84540:	b903fc02 	str	w2, [x0, #1020]
   84544:	eb01001f 	cmp	x0, x1
   84548:	54ffff81 	b.ne	84538 <CInterruptSystem::Initialize()+0x58>  // b.any
   8454c:	d2838000 	mov	x0, #0x1c00                	// #7168
   84550:	f2bff080 	movk	x0, #0xff84, lsl #16
   84554:	d2838801 	mov	x1, #0x1c40                	// #7232
   84558:	f2bff081 	movk	x1, #0xff84, lsl #16
   8455c:	d503201f 	nop
   84560:	b800441f 	str	wzr, [x0], #4
   84564:	eb01001f 	cmp	x0, x1
   84568:	54ffffc1 	b.ne	84560 <CInterruptSystem::Initialize()+0x80>  // b.any
   8456c:	52800020 	mov	w0, #0x1                   	// #1
   84570:	d2820004 	mov	x4, #0x1000                	// #4096
   84574:	f2bff084 	movk	x4, #0xff84, lsl #16
   84578:	52801e03 	mov	w3, #0xf0                  	// #240
   8457c:	d2840082 	mov	x2, #0x2004                	// #8196
   84580:	f2bff082 	movk	x2, #0xff84, lsl #16
   84584:	d2840001 	mov	x1, #0x2000                	// #8192
   84588:	f2bff081 	movk	x1, #0xff84, lsl #16
   8458c:	b9000080 	str	w0, [x4]
   84590:	b9000043 	str	w3, [x2]
   84594:	b9000020 	str	w0, [x1]
   84598:	d50342ff 	msr	daifclr, #0x2
   8459c:	d65f03c0 	ret

00000000000845a0 <CInterruptSystem::DisconnectFIQ()>:
   845a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   845a4:	910003fd 	mov	x29, sp
   845a8:	f9000bf3 	str	x19, [sp, #16]
   845ac:	d0000033 	adrp	x19, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   845b0:	91278273 	add	x19, x19, #0x9e0
   845b4:	f9400260 	ldr	x0, [x19]
   845b8:	b40000a0 	cbz	x0, 845cc <CInterruptSystem::DisconnectFIQ()+0x2c>
   845bc:	a9007e7f 	stp	xzr, xzr, [x19]
   845c0:	f9400bf3 	ldr	x19, [sp, #16]
   845c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   845c8:	d65f03c0 	ret
   845cc:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   845d0:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   845d4:	913be021 	add	x1, x1, #0xef8
   845d8:	913c4000 	add	x0, x0, #0xf10
   845dc:	52801942 	mov	w2, #0xca                  	// #202
   845e0:	940002e0 	bl	85160 <assertion_failed>
   845e4:	17fffff6 	b	845bc <CInterruptSystem::DisconnectFIQ()+0x1c>
   845e8:	d503201f 	nop
   845ec:	d503201f 	nop

00000000000845f0 <CInterruptSystem::EnableIRQ(unsigned int)>:
   845f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   845f4:	910003fd 	mov	x29, sp
   845f8:	7103fc1f 	cmp	w0, #0xff
   845fc:	f9000bf3 	str	x19, [sp, #16]
   84600:	2a0003f3 	mov	w19, w0
   84604:	54000168 	b.hi	84630 <CInterruptSystem::EnableIRQ(unsigned int)+0x40>  // b.pmore
   84608:	52808801 	mov	w1, #0x440                 	// #1088
   8460c:	72a7fc21 	movk	w1, #0x3fe1, lsl #16
   84610:	0b531421 	add	w1, w1, w19, lsr #5
   84614:	52800020 	mov	w0, #0x1                   	// #1
   84618:	1ad32000 	lsl	w0, w0, w19
   8461c:	f9400bf3 	ldr	x19, [sp, #16]
   84620:	531e7421 	lsl	w1, w1, #2
   84624:	b9000020 	str	w0, [x1]
   84628:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8462c:	d65f03c0 	ret
   84630:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   84634:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   84638:	913be021 	add	x1, x1, #0xef8
   8463c:	913ca000 	add	x0, x0, #0xf28
   84640:	52801a82 	mov	w2, #0xd4                  	// #212
   84644:	940002c7 	bl	85160 <assertion_failed>
   84648:	17fffff0 	b	84608 <CInterruptSystem::EnableIRQ(unsigned int)+0x18>
   8464c:	d503201f 	nop

0000000000084650 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   84650:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   84654:	910003fd 	mov	x29, sp
   84658:	7103fc3f 	cmp	w1, #0xff
   8465c:	a90153f3 	stp	x19, x20, [sp, #16]
   84660:	2a0103f3 	mov	w19, w1
   84664:	aa0003f4 	mov	x20, x0
   84668:	a9025bf5 	stp	x21, x22, [sp, #32]
   8466c:	f9001bf7 	str	x23, [sp, #48]
   84670:	aa0203f7 	mov	x23, x2
   84674:	540001a8 	b.hi	846a8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>  // b.pmore
   84678:	2a1303f5 	mov	w21, w19
   8467c:	f8757a80 	ldr	x0, [x20, x21, lsl #3]
   84680:	8b150e96 	add	x22, x20, x21, lsl #3
   84684:	b5000240 	cbnz	x0, 846cc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x7c>
   84688:	f8357a97 	str	x23, [x20, x21, lsl #3]
   8468c:	2a1303e0 	mov	w0, w19
   84690:	a94153f3 	ldp	x19, x20, [sp, #16]
   84694:	f9401bf7 	ldr	x23, [sp, #48]
   84698:	f90402c3 	str	x3, [x22, #2048]
   8469c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   846a0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   846a4:	17ffffd3 	b	845f0 <CInterruptSystem::EnableIRQ(unsigned int)>
   846a8:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   846ac:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   846b0:	f90027e3 	str	x3, [sp, #72]
   846b4:	913be021 	add	x1, x1, #0xef8
   846b8:	913ca000 	add	x0, x0, #0xf28
   846bc:	52801502 	mov	w2, #0xa8                  	// #168
   846c0:	940002a8 	bl	85160 <assertion_failed>
   846c4:	f94027e3 	ldr	x3, [sp, #72]
   846c8:	17ffffec 	b	84678 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x28>
   846cc:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   846d0:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   846d4:	f90027e3 	str	x3, [sp, #72]
   846d8:	913be021 	add	x1, x1, #0xef8
   846dc:	913d0000 	add	x0, x0, #0xf40
   846e0:	52801522 	mov	w2, #0xa9                  	// #169
   846e4:	9400029f 	bl	85160 <assertion_failed>
   846e8:	f94027e3 	ldr	x3, [sp, #72]
   846ec:	17ffffe7 	b	84688 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x38>

00000000000846f0 <CInterruptSystem::DisableIRQ(unsigned int)>:
   846f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   846f4:	910003fd 	mov	x29, sp
   846f8:	7103fc1f 	cmp	w0, #0xff
   846fc:	f9000bf3 	str	x19, [sp, #16]
   84700:	2a0003f3 	mov	w19, w0
   84704:	54000168 	b.hi	84730 <CInterruptSystem::DisableIRQ(unsigned int)+0x40>  // b.pmore
   84708:	52808c01 	mov	w1, #0x460                 	// #1120
   8470c:	72a7fc21 	movk	w1, #0x3fe1, lsl #16
   84710:	0b531421 	add	w1, w1, w19, lsr #5
   84714:	52800020 	mov	w0, #0x1                   	// #1
   84718:	1ad32000 	lsl	w0, w0, w19
   8471c:	f9400bf3 	ldr	x19, [sp, #16]
   84720:	531e7421 	lsl	w1, w1, #2
   84724:	b9000020 	str	w0, [x1]
   84728:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8472c:	d65f03c0 	ret
   84730:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   84734:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   84738:	913be021 	add	x1, x1, #0xef8
   8473c:	913ca000 	add	x0, x0, #0xf28
   84740:	52801b62 	mov	w2, #0xdb                  	// #219
   84744:	94000287 	bl	85160 <assertion_failed>
   84748:	17fffff0 	b	84708 <CInterruptSystem::DisableIRQ(unsigned int)+0x18>
   8474c:	d503201f 	nop

0000000000084750 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   84750:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   84754:	910003fd 	mov	x29, sp
   84758:	7103fc3f 	cmp	w1, #0xff
   8475c:	a90153f3 	stp	x19, x20, [sp, #16]
   84760:	aa0003f3 	mov	x19, x0
   84764:	a9025bf5 	stp	x21, x22, [sp, #32]
   84768:	2a0103f5 	mov	w21, w1
   8476c:	540001a8 	b.hi	847a0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x50>  // b.pmore
   84770:	2a1503f4 	mov	w20, w21
   84774:	f8747a60 	ldr	x0, [x19, x20, lsl #3]
   84778:	8b140e76 	add	x22, x19, x20, lsl #3
   8477c:	b4000200 	cbz	x0, 847bc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x6c>
   84780:	2a1503e0 	mov	w0, w21
   84784:	97ffffdb 	bl	846f0 <CInterruptSystem::DisableIRQ(unsigned int)>
   84788:	f8347a7f 	str	xzr, [x19, x20, lsl #3]
   8478c:	a94153f3 	ldp	x19, x20, [sp, #16]
   84790:	f90402df 	str	xzr, [x22, #2048]
   84794:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84798:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8479c:	d65f03c0 	ret
   847a0:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   847a4:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   847a8:	913be021 	add	x1, x1, #0xef8
   847ac:	913ca000 	add	x0, x0, #0xf28
   847b0:	52801662 	mov	w2, #0xb3                  	// #179
   847b4:	9400026b 	bl	85160 <assertion_failed>
   847b8:	17ffffee 	b	84770 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x20>
   847bc:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   847c0:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   847c4:	913be021 	add	x1, x1, #0xef8
   847c8:	913d8000 	add	x0, x0, #0xf60
   847cc:	52801682 	mov	w2, #0xb4                  	// #180
   847d0:	94000264 	bl	85160 <assertion_failed>
   847d4:	17ffffeb 	b	84780 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x30>
   847d8:	d503201f 	nop
   847dc:	d503201f 	nop

00000000000847e0 <CInterruptSystem::EnableFIQ(unsigned int)>:
   847e0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   847e4:	910003fd 	mov	x29, sp
   847e8:	9400059a 	bl	85e50 <CLogger::Get()>
   847ec:	b0000023 	adrp	x3, 89000 <SErrorStub+0xc>
   847f0:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   847f4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   847f8:	913e0063 	add	x3, x3, #0xf80
   847fc:	913ea021 	add	x1, x1, #0xfa8
   84800:	52800002 	mov	w2, #0x0                   	// #0
   84804:	140004cf 	b	85b40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84808:	d503201f 	nop
   8480c:	d503201f 	nop

0000000000084810 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   84810:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   84814:	910003fd 	mov	x29, sp
   84818:	7104003f 	cmp	w1, #0x100
   8481c:	a90153f3 	stp	x19, x20, [sp, #16]
   84820:	aa0203f4 	mov	x20, x2
   84824:	f90013f5 	str	x21, [sp, #32]
   84828:	2a0103f5 	mov	w21, w1
   8482c:	54000188 	b.hi	8485c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x4c>  // b.pmore
   84830:	b4000294 	cbz	x20, 84880 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x70>
   84834:	d0000033 	adrp	x19, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84838:	91278273 	add	x19, x19, #0x9e0
   8483c:	f9400260 	ldr	x0, [x19]
   84840:	b5000320 	cbnz	x0, 848a4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x94>
   84844:	a9000e74 	stp	x20, x3, [x19]
   84848:	2a1503e0 	mov	w0, w21
   8484c:	a94153f3 	ldp	x19, x20, [sp, #16]
   84850:	f94013f5 	ldr	x21, [sp, #32]
   84854:	a8c47bfd 	ldp	x29, x30, [sp], #64
   84858:	17ffffe2 	b	847e0 <CInterruptSystem::EnableFIQ(unsigned int)>
   8485c:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   84860:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   84864:	f9001fe3 	str	x3, [sp, #56]
   84868:	913be021 	add	x1, x1, #0xef8
   8486c:	913ec000 	add	x0, x0, #0xfb0
   84870:	528017c2 	mov	w2, #0xbe                  	// #190
   84874:	9400023b 	bl	85160 <assertion_failed>
   84878:	f9401fe3 	ldr	x3, [sp, #56]
   8487c:	b5fffdd4 	cbnz	x20, 84834 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x24>
   84880:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   84884:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   84888:	f9001fe3 	str	x3, [sp, #56]
   8488c:	913be021 	add	x1, x1, #0xef8
   84890:	913c6000 	add	x0, x0, #0xf18
   84894:	528017e2 	mov	w2, #0xbf                  	// #191
   84898:	94000232 	bl	85160 <assertion_failed>
   8489c:	f9401fe3 	ldr	x3, [sp, #56]
   848a0:	17ffffe5 	b	84834 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x24>
   848a4:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   848a8:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   848ac:	f9001fe3 	str	x3, [sp, #56]
   848b0:	913be021 	add	x1, x1, #0xef8
   848b4:	913f2000 	add	x0, x0, #0xfc8
   848b8:	52801802 	mov	w2, #0xc0                  	// #192
   848bc:	94000229 	bl	85160 <assertion_failed>
   848c0:	f9401fe3 	ldr	x3, [sp, #56]
   848c4:	17ffffe0 	b	84844 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x34>
   848c8:	d503201f 	nop
   848cc:	d503201f 	nop

00000000000848d0 <CInterruptSystem::DisableFIQ()>:
   848d0:	d65f03c0 	ret
   848d4:	d503201f 	nop
   848d8:	d503201f 	nop
   848dc:	d503201f 	nop

00000000000848e0 <CInterruptSystem::Get()>:
   848e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   848e4:	910003fd 	mov	x29, sp
   848e8:	f9000bf3 	str	x19, [sp, #16]
   848ec:	d0000033 	adrp	x19, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   848f0:	f9456260 	ldr	x0, [x19, #2752]
   848f4:	b4000080 	cbz	x0, 84904 <CInterruptSystem::Get()+0x24>
   848f8:	f9400bf3 	ldr	x19, [sp, #16]
   848fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84900:	d65f03c0 	ret
   84904:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   84908:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   8490c:	9133a000 	add	x0, x0, #0xce8
   84910:	913be021 	add	x1, x1, #0xef8
   84914:	52801f62 	mov	w2, #0xfb                  	// #251
   84918:	94000212 	bl	85160 <assertion_failed>
   8491c:	f9456260 	ldr	x0, [x19, #2752]
   84920:	17fffff6 	b	848f8 <CInterruptSystem::Get()+0x18>
   84924:	d503201f 	nop
   84928:	d503201f 	nop
   8492c:	d503201f 	nop

0000000000084930 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   84930:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84934:	910003fd 	mov	x29, sp
   84938:	7103fc3f 	cmp	w1, #0xff
   8493c:	a90153f3 	stp	x19, x20, [sp, #16]
   84940:	2a0103f3 	mov	w19, w1
   84944:	aa0003f4 	mov	x20, x0
   84948:	54000228 	b.hi	8498c <CInterruptSystem::CallIRQHandler(unsigned int)+0x5c>  // b.pmore
   8494c:	2a1303e0 	mov	w0, w19
   84950:	f8607a81 	ldr	x1, [x20, x0, lsl #3]
   84954:	8b000e80 	add	x0, x20, x0, lsl #3
   84958:	b40000e1 	cbz	x1, 84974 <CInterruptSystem::CallIRQHandler(unsigned int)+0x44>
   8495c:	f9440000 	ldr	x0, [x0, #2048]
   84960:	d63f0020 	blr	x1
   84964:	a94153f3 	ldp	x19, x20, [sp, #16]
   84968:	52800020 	mov	w0, #0x1                   	// #1
   8496c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84970:	d65f03c0 	ret
   84974:	2a1303e0 	mov	w0, w19
   84978:	97ffff5e 	bl	846f0 <CInterruptSystem::DisableIRQ(unsigned int)>
   8497c:	52800000 	mov	w0, #0x0                   	// #0
   84980:	a94153f3 	ldp	x19, x20, [sp, #16]
   84984:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84988:	d65f03c0 	ret
   8498c:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   84990:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   84994:	913be021 	add	x1, x1, #0xef8
   84998:	913ca000 	add	x0, x0, #0xf28
   8499c:	52802022 	mov	w2, #0x101                 	// #257
   849a0:	940001f0 	bl	85160 <assertion_failed>
   849a4:	17ffffea 	b	8494c <CInterruptSystem::CallIRQHandler(unsigned int)+0x1c>
   849a8:	d503201f 	nop
   849ac:	d503201f 	nop

00000000000849b0 <CInterruptSystem::InterruptHandler()>:
   849b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   849b4:	d2840180 	mov	x0, #0x200c                	// #8204
   849b8:	f2bff080 	movk	x0, #0xff84, lsl #16
   849bc:	910003fd 	mov	x29, sp
   849c0:	a90153f3 	stp	x19, x20, [sp, #16]
   849c4:	b9400013 	ldr	w19, [x0]
   849c8:	7218067f 	tst	w19, #0x300
   849cc:	12002674 	and	w20, w19, #0x3ff
   849d0:	54000201 	b.ne	84a10 <CInterruptSystem::InterruptHandler()+0x60>  // b.any
   849d4:	721c167f 	tst	w19, #0x3f0
   849d8:	54000100 	b.eq	849f8 <CInterruptSystem::InterruptHandler()+0x48>  // b.none
   849dc:	f90013f5 	str	x21, [sp, #32]
   849e0:	d0000035 	adrp	x21, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   849e4:	f94562a0 	ldr	x0, [x21, #2752]
   849e8:	b4000280 	cbz	x0, 84a38 <CInterruptSystem::InterruptHandler()+0x88>
   849ec:	2a1403e1 	mov	w1, w20
   849f0:	97ffffd0 	bl	84930 <CInterruptSystem::CallIRQHandler(unsigned int)>
   849f4:	f94013f5 	ldr	x21, [sp, #32]
   849f8:	d2840200 	mov	x0, #0x2010                	// #8208
   849fc:	f2bff080 	movk	x0, #0xff84, lsl #16
   84a00:	b9000013 	str	w19, [x0]
   84a04:	a94153f3 	ldp	x19, x20, [sp, #16]
   84a08:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84a0c:	d65f03c0 	ret
   84a10:	710fee9f 	cmp	w20, #0x3fb
   84a14:	54ffff88 	b.hi	84a04 <CInterruptSystem::InterruptHandler()+0x54>  // b.pmore
   84a18:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   84a1c:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   84a20:	a94153f3 	ldp	x19, x20, [sp, #16]
   84a24:	913be021 	add	x1, x1, #0xef8
   84a28:	913f8000 	add	x0, x0, #0xfe0
   84a2c:	528025c2 	mov	w2, #0x12e                 	// #302
   84a30:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84a34:	140001cb 	b	85160 <assertion_failed>
   84a38:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   84a3c:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   84a40:	9133a000 	add	x0, x0, #0xce8
   84a44:	913be021 	add	x1, x1, #0xef8
   84a48:	52802382 	mov	w2, #0x11c                 	// #284
   84a4c:	940001c5 	bl	85160 <assertion_failed>
   84a50:	f94562a0 	ldr	x0, [x21, #2752]
   84a54:	17ffffe6 	b	849ec <CInterruptSystem::InterruptHandler()+0x3c>
   84a58:	d503201f 	nop
   84a5c:	d503201f 	nop

0000000000084a60 <InterruptHandler>:
   84a60:	17ffffd4 	b	849b0 <CInterruptSystem::InterruptHandler()>
   84a64:	d503201f 	nop
   84a68:	d503201f 	nop
   84a6c:	d503201f 	nop

0000000000084a70 <CInterruptSystem::InitializeSecondary()>:
   84a70:	52801e03 	mov	w3, #0xf0                  	// #240
   84a74:	d2840082 	mov	x2, #0x2004                	// #8196
   84a78:	f2bff082 	movk	x2, #0xff84, lsl #16
   84a7c:	52800021 	mov	w1, #0x1                   	// #1
   84a80:	d2840000 	mov	x0, #0x2000                	// #8192
   84a84:	f2bff080 	movk	x0, #0xff84, lsl #16
   84a88:	b9000043 	str	w3, [x2]
   84a8c:	b9000001 	str	w1, [x0]
   84a90:	d65f03c0 	ret
   84a94:	d503201f 	nop
   84a98:	d503201f 	nop
   84a9c:	d503201f 	nop

0000000000084aa0 <CInterruptSystem::SendIPI(unsigned int, unsigned int)>:
   84aa0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84aa4:	910003fd 	mov	x29, sp
   84aa8:	71001c1f 	cmp	w0, #0x7
   84aac:	a90153f3 	stp	x19, x20, [sp, #16]
   84ab0:	2a0003f3 	mov	w19, w0
   84ab4:	2a0103f4 	mov	w20, w1
   84ab8:	540001a8 	b.hi	84aec <CInterruptSystem::SendIPI(unsigned int, unsigned int)+0x4c>  // b.pmore
   84abc:	71003e9f 	cmp	w20, #0xf
   84ac0:	54000248 	b.hi	84b08 <CInterruptSystem::SendIPI(unsigned int, unsigned int)+0x68>  // b.pmore
   84ac4:	11004273 	add	w19, w19, #0x10
   84ac8:	52800021 	mov	w1, #0x1                   	// #1
   84acc:	1ad32021 	lsl	w1, w1, w19
   84ad0:	d283e000 	mov	x0, #0x1f00                	// #7936
   84ad4:	f2bff080 	movk	x0, #0xff84, lsl #16
   84ad8:	2a140021 	orr	w1, w1, w20
   84adc:	a94153f3 	ldp	x19, x20, [sp, #16]
   84ae0:	b9000001 	str	w1, [x0]
   84ae4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84ae8:	d65f03c0 	ret
   84aec:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   84af0:	b0000020 	adrp	x0, 89000 <SErrorStub+0xc>
   84af4:	913be021 	add	x1, x1, #0xef8
   84af8:	913fc000 	add	x0, x0, #0xff0
   84afc:	52802822 	mov	w2, #0x141                 	// #321
   84b00:	94000198 	bl	85160 <assertion_failed>
   84b04:	17ffffee 	b	84abc <CInterruptSystem::SendIPI(unsigned int, unsigned int)+0x1c>
   84b08:	b0000021 	adrp	x1, 89000 <SErrorStub+0xc>
   84b0c:	d0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84b10:	913be021 	add	x1, x1, #0xef8
   84b14:	91000000 	add	x0, x0, #0x0
   84b18:	52802842 	mov	w2, #0x142                 	// #322
   84b1c:	94000191 	bl	85160 <assertion_failed>
   84b20:	17ffffe9 	b	84ac4 <CInterruptSystem::SendIPI(unsigned int, unsigned int)+0x24>
	...

0000000000084b30 <operator new(unsigned long)>:
   84b30:	14000034 	b	84c00 <malloc>
   84b34:	d503201f 	nop
   84b38:	d503201f 	nop
   84b3c:	d503201f 	nop

0000000000084b40 <operator new[](unsigned long)>:
   84b40:	14000030 	b	84c00 <malloc>
   84b44:	d503201f 	nop
   84b48:	d503201f 	nop
   84b4c:	d503201f 	nop

0000000000084b50 <operator delete(void*)>:
   84b50:	1400009c 	b	84dc0 <free>
   84b54:	d503201f 	nop
   84b58:	d503201f 	nop
   84b5c:	d503201f 	nop

0000000000084b60 <operator delete[](void*)>:
   84b60:	14000098 	b	84dc0 <free>
   84b64:	d503201f 	nop
   84b68:	d503201f 	nop
   84b6c:	d503201f 	nop

0000000000084b70 <operator delete(void*, unsigned long)>:
   84b70:	14000094 	b	84dc0 <free>
   84b74:	d503201f 	nop
   84b78:	d503201f 	nop
   84b7c:	d503201f 	nop

0000000000084b80 <operator delete[](void*, unsigned long)>:
   84b80:	14000090 	b	84dc0 <free>
	...

0000000000084b90 <mem_init>:
   84b90:	8b010001 	add	x1, x0, x1
   84b94:	b2689fe4 	mov	x4, #0xffffffffff000000    	// #-16777216
   84b98:	d17fc023 	sub	x3, x1, #0xff0, lsl #12
   84b9c:	d0000025 	adrp	x5, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84ba0:	912b20a2 	add	x2, x5, #0xac8
   84ba4:	8b040024 	add	x4, x1, x4
   84ba8:	9270bc63 	and	x3, x3, #0xffffffffffff0000
   84bac:	f164001f 	cmp	x0, #0x900, lsl #12
   84bb0:	d2a01206 	mov	x6, #0x900000              	// #9437184
   84bb4:	9a862000 	csel	x0, x0, x6, cs  // cs = hs, nlast
   84bb8:	f90564a0 	str	x0, [x5, #2760]
   84bbc:	a9008c44 	stp	x4, x3, [x2, #8]
   84bc0:	f9000c41 	str	x1, [x2, #24]
   84bc4:	d65f03c0 	ret
   84bc8:	d503201f 	nop
   84bcc:	d503201f 	nop

0000000000084bd0 <mem_get_size>:
   84bd0:	d0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84bd4:	912b2001 	add	x1, x0, #0xac8
   84bd8:	f9456403 	ldr	x3, [x0, #2760]
   84bdc:	a9408022 	ldp	x2, x0, [x1, #8]
   84be0:	f9400c21 	ldr	x1, [x1, #24]
   84be4:	cb030042 	sub	x2, x2, x3
   84be8:	cb000020 	sub	x0, x1, x0
   84bec:	8b000040 	add	x0, x2, x0
   84bf0:	d65f03c0 	ret
   84bf4:	d503201f 	nop
   84bf8:	d503201f 	nop
   84bfc:	d503201f 	nop

0000000000084c00 <malloc>:
   84c00:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   84c04:	910003fd 	mov	x29, sp
   84c08:	a9025bf5 	stp	x21, x22, [sp, #32]
   84c0c:	d0000036 	adrp	x22, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84c10:	a90153f3 	stp	x19, x20, [sp, #16]
   84c14:	aa0003f4 	mov	x20, x0
   84c18:	f94566c0 	ldr	x0, [x22, #2760]
   84c1c:	f9001bf7 	str	x23, [sp, #48]
   84c20:	b4000a00 	cbz	x0, 84d60 <malloc+0x160>
   84c24:	912b22d7 	add	x23, x22, #0xac8
   84c28:	b94022e0 	ldr	w0, [x23, #32]
   84c2c:	35000920 	cbnz	w0, 84d50 <malloc+0x150>
   84c30:	d0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84c34:	91256001 	add	x1, x0, #0x958
   84c38:	b9495800 	ldr	w0, [x0, #2392]
   84c3c:	34000160 	cbz	w0, 84c68 <malloc+0x68>
   84c40:	2a0003e0 	mov	w0, w0
   84c44:	aa0103f3 	mov	x19, x1
   84c48:	eb00029f 	cmp	x20, x0
   84c4c:	540000a8 	b.hi	84c60 <malloc+0x60>  // b.pmore
   84c50:	14000021 	b	84cd4 <malloc+0xd4>
   84c54:	2a0003e0 	mov	w0, w0
   84c58:	eb14001f 	cmp	x0, x20
   84c5c:	540003c2 	b.cs	84cd4 <malloc+0xd4>  // b.hs, b.nlast
   84c60:	b8410e60 	ldr	w0, [x19, #16]!
   84c64:	35ffff80 	cbnz	w0, 84c54 <malloc+0x54>
   84c68:	f94566d5 	ldr	x21, [x22, #2760]
   84c6c:	91007e80 	add	x0, x20, #0x1f
   84c70:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   84c74:	8b0002a0 	add	x0, x21, x0
   84c78:	eb0002bf 	cmp	x21, x0
   84c7c:	54000482 	b.cs	84d0c <malloc+0x10c>  // b.hs, b.nlast
   84c80:	b9408023 	ldr	w3, [x1, #128]
   84c84:	f94006e2 	ldr	x2, [x23, #8]
   84c88:	cb030042 	sub	x2, x2, x3
   84c8c:	eb02001f 	cmp	x0, x2
   84c90:	540003e8 	b.hi	84d0c <malloc+0x10c>  // b.pmore
   84c94:	5289a861 	mov	w1, #0x4d43                	// #19779
   84c98:	72a84981 	movk	w1, #0x424c, lsl #16
   84c9c:	f90566c0 	str	x0, [x22, #2760]
   84ca0:	b94022e0 	ldr	w0, [x23, #32]
   84ca4:	290052a1 	stp	w1, w20, [x21]
   84ca8:	350002e0 	cbnz	w0, 84d04 <malloc+0x104>
   84cac:	910042b3 	add	x19, x21, #0x10
   84cb0:	f90006bf 	str	xzr, [x21, #8]
   84cb4:	f2400e7f 	tst	x19, #0xf
   84cb8:	54000621 	b.ne	84d7c <malloc+0x17c>  // b.any
   84cbc:	aa1303e0 	mov	x0, x19
   84cc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   84cc4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84cc8:	f9401bf7 	ldr	x23, [sp, #48]
   84ccc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   84cd0:	d65f03c0 	ret
   84cd4:	f9400675 	ldr	x21, [x19, #8]
   84cd8:	aa0003f4 	mov	x20, x0
   84cdc:	b4fffc75 	cbz	x21, 84c68 <malloc+0x68>
   84ce0:	b94002a1 	ldr	w1, [x21]
   84ce4:	5289a860 	mov	w0, #0x4d43                	// #19779
   84ce8:	72a84980 	movk	w0, #0x424c, lsl #16
   84cec:	6b00003f 	cmp	w1, w0
   84cf0:	54000541 	b.ne	84d98 <malloc+0x198>  // b.any
   84cf4:	f94006a0 	ldr	x0, [x21, #8]
   84cf8:	f9000660 	str	x0, [x19, #8]
   84cfc:	b94022e0 	ldr	w0, [x23, #32]
   84d00:	34fffd60 	cbz	w0, 84cac <malloc+0xac>
   84d04:	97fffbc3 	bl	83c10 <LeaveCritical>
   84d08:	17ffffe9 	b	84cac <malloc+0xac>
   84d0c:	b94022e0 	ldr	w0, [x23, #32]
   84d10:	b900803f 	str	wzr, [x1, #128]
   84d14:	35000220 	cbnz	w0, 84d58 <malloc+0x158>
   84d18:	9400044e 	bl	85e50 <CLogger::Get()>
   84d1c:	d0000023 	adrp	x3, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84d20:	d0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84d24:	91018063 	add	x3, x3, #0x60
   84d28:	9101c021 	add	x1, x1, #0x70
   84d2c:	52800002 	mov	w2, #0x0                   	// #0
   84d30:	d2800013 	mov	x19, #0x0                   	// #0
   84d34:	94000383 	bl	85b40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84d38:	aa1303e0 	mov	x0, x19
   84d3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   84d40:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84d44:	f9401bf7 	ldr	x23, [sp, #48]
   84d48:	a8c47bfd 	ldp	x29, x30, [sp], #64
   84d4c:	d65f03c0 	ret
   84d50:	97fffb78 	bl	83b30 <EnterCritical>
   84d54:	17ffffb7 	b	84c30 <malloc+0x30>
   84d58:	97fffbae 	bl	83c10 <LeaveCritical>
   84d5c:	17ffffef 	b	84d18 <malloc+0x118>
   84d60:	d0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84d64:	d0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84d68:	91004021 	add	x1, x1, #0x10
   84d6c:	91008000 	add	x0, x0, #0x20
   84d70:	52800e02 	mov	w2, #0x70                  	// #112
   84d74:	940000fb 	bl	85160 <assertion_failed>
   84d78:	17ffffab 	b	84c24 <malloc+0x24>
   84d7c:	d0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84d80:	d0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84d84:	91004021 	add	x1, x1, #0x10
   84d88:	9101e000 	add	x0, x0, #0x78
   84d8c:	52801662 	mov	w2, #0xb3                  	// #179
   84d90:	940000f4 	bl	85160 <assertion_failed>
   84d94:	17ffffca 	b	84cbc <malloc+0xbc>
   84d98:	d0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84d9c:	d0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84da0:	91004021 	add	x1, x1, #0x10
   84da4:	9100e000 	add	x0, x0, #0x38
   84da8:	52801142 	mov	w2, #0x8a                  	// #138
   84dac:	940000ed 	bl	85160 <assertion_failed>
   84db0:	17ffffd1 	b	84cf4 <malloc+0xf4>
   84db4:	d503201f 	nop
   84db8:	d503201f 	nop
   84dbc:	d503201f 	nop

0000000000084dc0 <free>:
   84dc0:	b40004e0 	cbz	x0, 84e5c <free+0x9c>
   84dc4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   84dc8:	910003fd 	mov	x29, sp
   84dcc:	a90153f3 	stp	x19, x20, [sp, #16]
   84dd0:	aa0003f4 	mov	x20, x0
   84dd4:	5289a860 	mov	w0, #0x4d43                	// #19779
   84dd8:	72a84980 	movk	w0, #0x424c, lsl #16
   84ddc:	a9025bf5 	stp	x21, x22, [sp, #32]
   84de0:	d1004296 	sub	x22, x20, #0x10
   84de4:	b85f0281 	ldur	w1, [x20, #-16]
   84de8:	6b00003f 	cmp	w1, w0
   84dec:	540004e1 	b.ne	84e88 <free+0xc8>  // b.any
   84df0:	d0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84df4:	91256013 	add	x19, x0, #0x958
   84df8:	b9495800 	ldr	w0, [x0, #2392]
   84dfc:	34000120 	cbz	w0, 84e20 <free+0x60>
   84e00:	b85f4282 	ldur	w2, [x20, #-12]
   84e04:	6b02001f 	cmp	w0, w2
   84e08:	54000081 	b.ne	84e18 <free+0x58>  // b.any
   84e0c:	14000009 	b	84e30 <free+0x70>
   84e10:	6b01005f 	cmp	w2, w1
   84e14:	540000e0 	b.eq	84e30 <free+0x70>  // b.none
   84e18:	b8410e61 	ldr	w1, [x19, #16]!
   84e1c:	35ffffa1 	cbnz	w1, 84e10 <free+0x50>
   84e20:	a94153f3 	ldp	x19, x20, [sp, #16]
   84e24:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84e28:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84e2c:	d65f03c0 	ret
   84e30:	d0000035 	adrp	x21, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84e34:	912b22b5 	add	x21, x21, #0xac8
   84e38:	b94022a0 	ldr	w0, [x21, #32]
   84e3c:	35000120 	cbnz	w0, 84e60 <free+0xa0>
   84e40:	f9400660 	ldr	x0, [x19, #8]
   84e44:	f81f8280 	stur	x0, [x20, #-8]
   84e48:	f9000676 	str	x22, [x19, #8]
   84e4c:	a94153f3 	ldp	x19, x20, [sp, #16]
   84e50:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84e54:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84e58:	d65f03c0 	ret
   84e5c:	d65f03c0 	ret
   84e60:	97fffb34 	bl	83b30 <EnterCritical>
   84e64:	f9400661 	ldr	x1, [x19, #8]
   84e68:	b94022a0 	ldr	w0, [x21, #32]
   84e6c:	f81f8281 	stur	x1, [x20, #-8]
   84e70:	f9000676 	str	x22, [x19, #8]
   84e74:	34fffd60 	cbz	w0, 84e20 <free+0x60>
   84e78:	a94153f3 	ldp	x19, x20, [sp, #16]
   84e7c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84e80:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84e84:	17fffb63 	b	83c10 <LeaveCritical>
   84e88:	d0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84e8c:	d0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84e90:	91004021 	add	x1, x1, #0x10
   84e94:	9100e000 	add	x0, x0, #0x38
   84e98:	52801802 	mov	w2, #0xc0                  	// #192
   84e9c:	940000b1 	bl	85160 <assertion_failed>
   84ea0:	17ffffd4 	b	84df0 <free+0x30>
   84ea4:	d503201f 	nop
   84ea8:	d503201f 	nop
   84eac:	d503201f 	nop

0000000000084eb0 <calloc>:
   84eb0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84eb4:	910003fd 	mov	x29, sp
   84eb8:	a90153f3 	stp	x19, x20, [sp, #16]
   84ebc:	9b007c33 	mul	x19, x1, x0
   84ec0:	f100027f 	cmp	x19, #0x0
   84ec4:	9a9f1673 	csinc	x19, x19, xzr, ne  // ne = any
   84ec8:	eb00027f 	cmp	x19, x0
   84ecc:	54000183 	b.cc	84efc <calloc+0x4c>  // b.lo, b.ul, b.last
   84ed0:	aa1303e0 	mov	x0, x19
   84ed4:	97ffff4b 	bl	84c00 <malloc>
   84ed8:	aa0003f4 	mov	x20, x0
   84edc:	b4000080 	cbz	x0, 84eec <calloc+0x3c>
   84ee0:	aa1303e2 	mov	x2, x19
   84ee4:	52800001 	mov	w1, #0x0                   	// #0
   84ee8:	94000b5e 	bl	87c60 <memset>
   84eec:	aa1403e0 	mov	x0, x20
   84ef0:	a94153f3 	ldp	x19, x20, [sp, #16]
   84ef4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84ef8:	d65f03c0 	ret
   84efc:	d0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84f00:	d0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84f04:	91004021 	add	x1, x1, #0x10
   84f08:	9102a000 	add	x0, x0, #0xa8
   84f0c:	52801c42 	mov	w2, #0xe2                  	// #226
   84f10:	94000094 	bl	85160 <assertion_failed>
   84f14:	17ffffef 	b	84ed0 <calloc+0x20>
   84f18:	d503201f 	nop
   84f1c:	d503201f 	nop

0000000000084f20 <realloc>:
   84f20:	b4000480 	cbz	x0, 84fb0 <realloc+0x90>
   84f24:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   84f28:	910003fd 	mov	x29, sp
   84f2c:	a90153f3 	stp	x19, x20, [sp, #16]
   84f30:	aa0103f4 	mov	x20, x1
   84f34:	f90013f5 	str	x21, [sp, #32]
   84f38:	b4000401 	cbz	x1, 84fb8 <realloc+0x98>
   84f3c:	aa0003f3 	mov	x19, x0
   84f40:	5289a860 	mov	w0, #0x4d43                	// #19779
   84f44:	72a84980 	movk	w0, #0x424c, lsl #16
   84f48:	b85f0261 	ldur	w1, [x19, #-16]
   84f4c:	6b00003f 	cmp	w1, w0
   84f50:	540003a1 	b.ne	84fc4 <realloc+0xa4>  // b.any
   84f54:	b85f4260 	ldur	w0, [x19, #-12]
   84f58:	aa1303f5 	mov	x21, x19
   84f5c:	eb14001f 	cmp	x0, x20
   84f60:	540000c3 	b.cc	84f78 <realloc+0x58>  // b.lo, b.ul, b.last
   84f64:	aa1503e0 	mov	x0, x21
   84f68:	a94153f3 	ldp	x19, x20, [sp, #16]
   84f6c:	f94013f5 	ldr	x21, [sp, #32]
   84f70:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84f74:	d65f03c0 	ret
   84f78:	aa1403e0 	mov	x0, x20
   84f7c:	97ffff21 	bl	84c00 <malloc>
   84f80:	aa0003f5 	mov	x21, x0
   84f84:	b4ffff00 	cbz	x0, 84f64 <realloc+0x44>
   84f88:	b85f4262 	ldur	w2, [x19, #-12]
   84f8c:	aa1303e1 	mov	x1, x19
   84f90:	94000cca 	bl	882b8 <memcpy>
   84f94:	aa1303e0 	mov	x0, x19
   84f98:	97ffff8a 	bl	84dc0 <free>
   84f9c:	aa1503e0 	mov	x0, x21
   84fa0:	a94153f3 	ldp	x19, x20, [sp, #16]
   84fa4:	f94013f5 	ldr	x21, [sp, #32]
   84fa8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84fac:	d65f03c0 	ret
   84fb0:	aa0103e0 	mov	x0, x1
   84fb4:	17ffff13 	b	84c00 <malloc>
   84fb8:	97ffff82 	bl	84dc0 <free>
   84fbc:	d2800015 	mov	x21, #0x0                   	// #0
   84fc0:	17ffffe9 	b	84f64 <realloc+0x44>
   84fc4:	d0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84fc8:	d0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84fcc:	91004021 	add	x1, x1, #0x10
   84fd0:	9100e000 	add	x0, x0, #0x38
   84fd4:	52801f82 	mov	w2, #0xfc                  	// #252
   84fd8:	94000062 	bl	85160 <assertion_failed>
   84fdc:	17ffffde 	b	84f54 <realloc+0x34>

0000000000084fe0 <palloc>:
   84fe0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84fe4:	910003fd 	mov	x29, sp
   84fe8:	a90153f3 	stp	x19, x20, [sp, #16]
   84fec:	d0000033 	adrp	x19, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   84ff0:	912b2273 	add	x19, x19, #0xac8
   84ff4:	f9400a60 	ldr	x0, [x19, #16]
   84ff8:	b4000460 	cbz	x0, 85084 <palloc+0xa4>
   84ffc:	b9402a60 	ldr	w0, [x19, #40]
   85000:	35000220 	cbnz	w0, 85044 <palloc+0x64>
   85004:	f9401a74 	ldr	x20, [x19, #48]
   85008:	b4000254 	cbz	x20, 85050 <palloc+0x70>
   8500c:	b9400281 	ldr	w1, [x20]
   85010:	5289a860 	mov	w0, #0x4d43                	// #19779
   85014:	72aa08e0 	movk	w0, #0x5047, lsl #16
   85018:	6b00003f 	cmp	w1, w0
   8501c:	54000421 	b.ne	850a0 <palloc+0xc0>  // b.any
   85020:	b9402a60 	ldr	w0, [x19, #40]
   85024:	b900029f 	str	wzr, [x20]
   85028:	f9400681 	ldr	x1, [x20, #8]
   8502c:	f9001a61 	str	x1, [x19, #48]
   85030:	35000200 	cbnz	w0, 85070 <palloc+0x90>
   85034:	aa1403e0 	mov	x0, x20
   85038:	a94153f3 	ldp	x19, x20, [sp, #16]
   8503c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85040:	d65f03c0 	ret
   85044:	97fffabb 	bl	83b30 <EnterCritical>
   85048:	f9401a74 	ldr	x20, [x19, #48]
   8504c:	b5fffe14 	cbnz	x20, 8500c <palloc+0x2c>
   85050:	a9410a74 	ldp	x20, x2, [x19, #16]
   85054:	b9402a60 	ldr	w0, [x19, #40]
   85058:	91404281 	add	x1, x20, #0x10, lsl #12
   8505c:	eb02003f 	cmp	x1, x2
   85060:	f9000a61 	str	x1, [x19, #16]
   85064:	54fffe69 	b.ls	85030 <palloc+0x50>  // b.plast
   85068:	d2800014 	mov	x20, #0x0                   	// #0
   8506c:	34fffe40 	cbz	w0, 85034 <palloc+0x54>
   85070:	97fffae8 	bl	83c10 <LeaveCritical>
   85074:	aa1403e0 	mov	x0, x20
   85078:	a94153f3 	ldp	x19, x20, [sp, #16]
   8507c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85080:	d65f03c0 	ret
   85084:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85088:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8508c:	91004021 	add	x1, x1, #0x10
   85090:	91030000 	add	x0, x0, #0xc0
   85094:	52802222 	mov	w2, #0x111                 	// #273
   85098:	94000032 	bl	85160 <assertion_failed>
   8509c:	17ffffd8 	b	84ffc <palloc+0x1c>
   850a0:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   850a4:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   850a8:	91004021 	add	x1, x1, #0x10
   850ac:	91036000 	add	x0, x0, #0xd8
   850b0:	528023e2 	mov	w2, #0x11f                 	// #287
   850b4:	9400002b 	bl	85160 <assertion_failed>
   850b8:	17ffffda 	b	85020 <palloc+0x40>
   850bc:	d503201f 	nop

00000000000850c0 <pfree>:
   850c0:	b40003e0 	cbz	x0, 8513c <pfree+0x7c>
   850c4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   850c8:	910003fd 	mov	x29, sp
   850cc:	a90153f3 	stp	x19, x20, [sp, #16]
   850d0:	b0000033 	adrp	x19, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   850d4:	912b2273 	add	x19, x19, #0xac8
   850d8:	b9402a61 	ldr	w1, [x19, #40]
   850dc:	35000141 	cbnz	w1, 85104 <pfree+0x44>
   850e0:	f9401a61 	ldr	x1, [x19, #48]
   850e4:	5289a862 	mov	w2, #0x4d43                	// #19779
   850e8:	72aa08e2 	movk	w2, #0x5047, lsl #16
   850ec:	f9001a60 	str	x0, [x19, #48]
   850f0:	b9000002 	str	w2, [x0]
   850f4:	f9000401 	str	x1, [x0, #8]
   850f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   850fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85100:	d65f03c0 	ret
   85104:	aa0003f4 	mov	x20, x0
   85108:	2a0103e0 	mov	w0, w1
   8510c:	97fffa89 	bl	83b30 <EnterCritical>
   85110:	f9401a61 	ldr	x1, [x19, #48]
   85114:	5289a860 	mov	w0, #0x4d43                	// #19779
   85118:	72aa08e0 	movk	w0, #0x5047, lsl #16
   8511c:	f9001a74 	str	x20, [x19, #48]
   85120:	b9000280 	str	w0, [x20]
   85124:	b9402a60 	ldr	w0, [x19, #40]
   85128:	f9000681 	str	x1, [x20, #8]
   8512c:	34fffe60 	cbz	w0, 850f8 <pfree+0x38>
   85130:	a94153f3 	ldp	x19, x20, [sp, #16]
   85134:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85138:	17fffab6 	b	83c10 <LeaveCritical>
   8513c:	d65f03c0 	ret

0000000000085140 <_GLOBAL__sub_I_mem_init>:
   85140:	52800021 	mov	w1, #0x1                   	// #1
   85144:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85148:	912b2000 	add	x0, x0, #0xac8
   8514c:	b9002001 	str	w1, [x0, #32]
   85150:	b9002801 	str	w1, [x0, #40]
   85154:	d65f03c0 	ret
	...

0000000000085160 <assertion_failed>:
   85160:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   85164:	910003fd 	mov	x29, sp
   85168:	f9000bf3 	str	x19, [sp, #16]
   8516c:	b9002fe2 	str	w2, [sp, #44]
   85170:	a90303e1 	stp	x1, x0, [sp, #48]
   85174:	910003f3 	mov	x19, sp
   85178:	97fffdd6 	bl	848d0 <CInterruptSystem::DisableFIQ()>
   8517c:	d50341ff 	msr	daifclr, #0x1
   85180:	910103e0 	add	x0, sp, #0x40
   85184:	940005fb 	bl	86970 <CString::CString()>
   85188:	b9402fe2 	ldr	w2, [sp, #44]
   8518c:	b0000025 	adrp	x5, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85190:	910103e0 	add	x0, sp, #0x40
   85194:	f9401be1 	ldr	x1, [sp, #48]
   85198:	2a0203e3 	mov	w3, w2
   8519c:	aa0103e2 	mov	x2, x1
   851a0:	910400a1 	add	x1, x5, #0x100
   851a4:	94000a8f 	bl	87be0 <CString::Format(char const*, ...)>
   851a8:	910103e0 	add	x0, sp, #0x40
   851ac:	9400060d 	bl	869e0 <CString::operator char const*() const>
   851b0:	aa0003e1 	mov	x1, x0
   851b4:	aa1303e0 	mov	x0, x19
   851b8:	940000de 	bl	85530 <debug_stacktrace(unsigned long const*, char const*)>
   851bc:	94000325 	bl	85e50 <CLogger::Get()>
   851c0:	aa0003f3 	mov	x19, x0
   851c4:	910103e0 	add	x0, sp, #0x40
   851c8:	94000606 	bl	869e0 <CString::operator char const*() const>
   851cc:	b0000023 	adrp	x3, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   851d0:	f9401fe4 	ldr	x4, [sp, #56]
   851d4:	aa0003e1 	mov	x1, x0
   851d8:	91042063 	add	x3, x3, #0x108
   851dc:	aa1303e0 	mov	x0, x19
   851e0:	52800002 	mov	w2, #0x0                   	// #0
   851e4:	94000257 	bl	85b40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   851e8:	910103e0 	add	x0, sp, #0x40
   851ec:	940005a5 	bl	86880 <CString::~CString()>
   851f0:	f9400bf3 	ldr	x19, [sp, #16]
   851f4:	a8c67bfd 	ldp	x29, x30, [sp], #96
   851f8:	d65f03c0 	ret
   851fc:	00000000 	.inst	0x00000000 ; undefined

0000000000085200 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   85200:	2a0103e2 	mov	w2, w1
   85204:	52800101 	mov	w1, #0x8                   	// #8
   85208:	14000fea 	b	891b0 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   8520c:	d503201f 	nop

0000000000085210 <CBcmPropertyTags::~CBcmPropertyTags()>:
   85210:	14000fec 	b	891c0 <CBcmMailBox::~CBcmMailBox()>
   85214:	d503201f 	nop
   85218:	d503201f 	nop
   8521c:	d503201f 	nop

0000000000085220 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   85220:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   85224:	910003fd 	mov	x29, sp
   85228:	a90153f3 	stp	x19, x20, [sp, #16]
   8522c:	aa0203f3 	mov	x19, x2
   85230:	aa0003f4 	mov	x20, x0
   85234:	f90013f5 	str	x21, [sp, #32]
   85238:	2a0103f5 	mov	w21, w1
   8523c:	b40002a2 	cbz	x2, 85290 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x70>
   85240:	71003c7f 	cmp	w3, #0xf
   85244:	54000369 	b.ls	852b0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x90>  // b.plast
   85248:	12007884 	and	w4, w4, #0x7fffffff
   8524c:	51003065 	sub	w5, w3, #0xc
   85250:	aa1403e0 	mov	x0, x20
   85254:	2a0303e2 	mov	w2, w3
   85258:	aa1303e1 	mov	x1, x19
   8525c:	29001675 	stp	w21, w5, [x19]
   85260:	b9000a64 	str	w4, [x19, #8]
   85264:	9400001b 	bl	852d0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   85268:	72001c00 	ands	w0, w0, #0xff
   8526c:	540000a0 	b.eq	85280 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x60>  // b.none
   85270:	b9400a61 	ldr	w1, [x19, #8]
   85274:	72007821 	ands	w1, w1, #0x7fffffff
   85278:	1a9f07e0 	cset	w0, ne  // ne = any
   8527c:	b9000a61 	str	w1, [x19, #8]
   85280:	a94153f3 	ldp	x19, x20, [sp, #16]
   85284:	f94013f5 	ldr	x21, [sp, #32]
   85288:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8528c:	d65f03c0 	ret
   85290:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85294:	91048021 	add	x1, x1, #0x120
   85298:	290713e3 	stp	w3, w4, [sp, #56]
   8529c:	91006020 	add	x0, x1, #0x18
   852a0:	52800662 	mov	w2, #0x33                  	// #51
   852a4:	97ffffaf 	bl	85160 <assertion_failed>
   852a8:	294713e3 	ldp	w3, w4, [sp, #56]
   852ac:	17ffffe5 	b	85240 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x20>
   852b0:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   852b4:	91048021 	add	x1, x1, #0x120
   852b8:	290713e3 	stp	w3, w4, [sp, #56]
   852bc:	9100a020 	add	x0, x1, #0x28
   852c0:	52800682 	mov	w2, #0x34                  	// #52
   852c4:	97ffffa7 	bl	85160 <assertion_failed>
   852c8:	294713e3 	ldp	w3, w4, [sp, #56]
   852cc:	17ffffdf 	b	85248 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x28>

00000000000852d0 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   852d0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   852d4:	910003fd 	mov	x29, sp
   852d8:	a90153f3 	stp	x19, x20, [sp, #16]
   852dc:	2a0203f4 	mov	w20, w2
   852e0:	a9025bf5 	stp	x21, x22, [sp, #32]
   852e4:	aa0103f5 	mov	x21, x1
   852e8:	a90363f7 	stp	x23, x24, [sp, #48]
   852ec:	f90023f9 	str	x25, [sp, #64]
   852f0:	aa0003f9 	mov	x25, x0
   852f4:	b40005e1 	cbz	x1, 853b0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
   852f8:	71003e9f 	cmp	w20, #0xf
   852fc:	54000669 	b.ls	853c8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf8>  // b.plast
   85300:	11003297 	add	w23, w20, #0xc
   85304:	f24006ff 	tst	x23, #0x3
   85308:	540006c1 	b.ne	853e0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>  // b.any
   8530c:	52800000 	mov	w0, #0x0                   	// #0
   85310:	2a1403f8 	mov	w24, w20
   85314:	97fff9eb 	bl	83ac0 <CMemorySystem::GetCoherentPage(unsigned int)>
   85318:	aa0003f3 	mov	x19, x0
   8531c:	91002016 	add	x22, x0, #0x8
   85320:	aa1803e2 	mov	x2, x24
   85324:	aa1503e1 	mov	x1, x21
   85328:	aa1603e0 	mov	x0, x22
   8532c:	29007e77 	stp	w23, wzr, [x19]
   85330:	94000be2 	bl	882b8 <memcpy>
   85334:	b8344adf 	str	wzr, [x22, w20, uxtw]
   85338:	d5033f9f 	dsb	sy
   8533c:	32020674 	orr	w20, w19, #0xc0000000
   85340:	aa1903e0 	mov	x0, x25
   85344:	2a1403e1 	mov	w1, w20
   85348:	94000fea 	bl	892f0 <CBcmMailBox::WriteRead(unsigned int)>
   8534c:	6b14001f 	cmp	w0, w20
   85350:	540000c1 	b.ne	85368 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x98>  // b.any
   85354:	d5033fbf 	dmb	sy
   85358:	b9400661 	ldr	w1, [x19, #4]
   8535c:	52b00000 	mov	w0, #0x80000000            	// #-2147483648
   85360:	6b00003f 	cmp	w1, w0
   85364:	54000100 	b.eq	85384 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xb4>  // b.none
   85368:	52800000 	mov	w0, #0x0                   	// #0
   8536c:	a94153f3 	ldp	x19, x20, [sp, #16]
   85370:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85374:	a94363f7 	ldp	x23, x24, [sp, #48]
   85378:	f94023f9 	ldr	x25, [sp, #64]
   8537c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   85380:	d65f03c0 	ret
   85384:	aa1803e2 	mov	x2, x24
   85388:	aa1603e1 	mov	x1, x22
   8538c:	aa1503e0 	mov	x0, x21
   85390:	94000bca 	bl	882b8 <memcpy>
   85394:	52800020 	mov	w0, #0x1                   	// #1
   85398:	a94153f3 	ldp	x19, x20, [sp, #16]
   8539c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   853a0:	a94363f7 	ldp	x23, x24, [sp, #48]
   853a4:	f94023f9 	ldr	x25, [sp, #64]
   853a8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   853ac:	d65f03c0 	ret
   853b0:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   853b4:	91048021 	add	x1, x1, #0x120
   853b8:	91014020 	add	x0, x1, #0x50
   853bc:	52800962 	mov	w2, #0x4b                  	// #75
   853c0:	97ffff68 	bl	85160 <assertion_failed>
   853c4:	17ffffcd 	b	852f8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
   853c8:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   853cc:	91048021 	add	x1, x1, #0x120
   853d0:	91018020 	add	x0, x1, #0x60
   853d4:	52800982 	mov	w2, #0x4c                  	// #76
   853d8:	97ffff62 	bl	85160 <assertion_failed>
   853dc:	17ffffc9 	b	85300 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x30>
   853e0:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   853e4:	91048021 	add	x1, x1, #0x120
   853e8:	91024020 	add	x0, x1, #0x90
   853ec:	528009c2 	mov	w2, #0x4e                  	// #78
   853f0:	97ffff5c 	bl	85160 <assertion_failed>
   853f4:	17ffffc6 	b	8530c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x3c>
	...

0000000000085400 <debug_hexdump(void const*, unsigned int, char const*)>:
   85400:	d102c3ff 	sub	sp, sp, #0xb0
   85404:	f100005f 	cmp	x2, #0x0
   85408:	a9077bfd 	stp	x29, x30, [sp, #112]
   8540c:	9101c3fd 	add	x29, sp, #0x70
   85410:	a9095bf5 	stp	x21, x22, [sp, #144]
   85414:	aa0003f6 	mov	x22, x0
   85418:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8541c:	91072000 	add	x0, x0, #0x1c8
   85420:	9a820015 	csel	x21, x0, x2, eq  // eq = none
   85424:	a90853f3 	stp	x19, x20, [sp, #128]
   85428:	2a0103f4 	mov	w20, w1
   8542c:	94000289 	bl	85e50 <CLogger::Get()>
   85430:	b0000023 	adrp	x3, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85434:	aa1503e1 	mov	x1, x21
   85438:	aa1603e5 	mov	x5, x22
   8543c:	2a1403e4 	mov	w4, w20
   85440:	91074063 	add	x3, x3, #0x1d0
   85444:	52800082 	mov	w2, #0x4                   	// #4
   85448:	940001be 	bl	85b40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8544c:	34000674 	cbz	w20, 85518 <debug_hexdump(void const*, unsigned int, char const*)+0x118>
   85450:	927c6e80 	and	x0, x20, #0xfffffff0
   85454:	aa1603f3 	mov	x19, x22
   85458:	f90053f7 	str	x23, [sp, #160]
   8545c:	91004000 	add	x0, x0, #0x10
   85460:	0b160294 	add	w20, w20, w22
   85464:	b0000037 	adrp	x23, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85468:	9107e2f7 	add	x23, x23, #0x1f8
   8546c:	8b0002d6 	add	x22, x22, x0
   85470:	14000003 	b	8547c <debug_hexdump(void const*, unsigned int, char const*)+0x7c>
   85474:	6b13029f 	cmp	w20, w19
   85478:	540004e0 	b.eq	85514 <debug_hexdump(void const*, unsigned int, char const*)+0x114>  // b.none
   8547c:	94000275 	bl	85e50 <CLogger::Get()>
   85480:	39401665 	ldrb	w5, [x19, #5]
   85484:	12003e64 	and	w4, w19, #0xffff
   85488:	aa1703e3 	mov	x3, x23
   8548c:	52800082 	mov	w2, #0x4                   	// #4
   85490:	aa1503e1 	mov	x1, x21
   85494:	39401267 	ldrb	w7, [x19, #4]
   85498:	91004273 	add	x19, x19, #0x10
   8549c:	385f3266 	ldurb	w6, [x19, #-13]
   854a0:	b90013e5 	str	w5, [sp, #16]
   854a4:	385ff265 	ldurb	w5, [x19, #-1]
   854a8:	b9000be7 	str	w7, [sp, #8]
   854ac:	385fe267 	ldurb	w7, [x19, #-2]
   854b0:	b90003e6 	str	w6, [sp]
   854b4:	385fd266 	ldurb	w6, [x19, #-3]
   854b8:	b90063e5 	str	w5, [sp, #96]
   854bc:	385fc265 	ldurb	w5, [x19, #-4]
   854c0:	b9005be7 	str	w7, [sp, #88]
   854c4:	385fb267 	ldurb	w7, [x19, #-5]
   854c8:	b90053e6 	str	w6, [sp, #80]
   854cc:	385fa266 	ldurb	w6, [x19, #-6]
   854d0:	b9004be5 	str	w5, [sp, #72]
   854d4:	385f9265 	ldurb	w5, [x19, #-7]
   854d8:	b90043e7 	str	w7, [sp, #64]
   854dc:	385f8267 	ldurb	w7, [x19, #-8]
   854e0:	b9003be6 	str	w6, [sp, #56]
   854e4:	385f7266 	ldurb	w6, [x19, #-9]
   854e8:	b90033e5 	str	w5, [sp, #48]
   854ec:	385f6265 	ldurb	w5, [x19, #-10]
   854f0:	b9002be7 	str	w7, [sp, #40]
   854f4:	385f2267 	ldurb	w7, [x19, #-14]
   854f8:	b90023e6 	str	w6, [sp, #32]
   854fc:	385f1266 	ldurb	w6, [x19, #-15]
   85500:	b9001be5 	str	w5, [sp, #24]
   85504:	385f0265 	ldurb	w5, [x19, #-16]
   85508:	9400018e 	bl	85b40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8550c:	eb16027f 	cmp	x19, x22
   85510:	54fffb21 	b.ne	85474 <debug_hexdump(void const*, unsigned int, char const*)+0x74>  // b.any
   85514:	f94053f7 	ldr	x23, [sp, #160]
   85518:	a9477bfd 	ldp	x29, x30, [sp, #112]
   8551c:	a94853f3 	ldp	x19, x20, [sp, #128]
   85520:	a9495bf5 	ldp	x21, x22, [sp, #144]
   85524:	9102c3ff 	add	sp, sp, #0xb0
   85528:	d65f03c0 	ret
   8552c:	d503201f 	nop

0000000000085530 <debug_stacktrace(unsigned long const*, char const*)>:
   85530:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   85534:	910003fd 	mov	x29, sp
   85538:	f100003f 	cmp	x1, #0x0
   8553c:	a90153f3 	stp	x19, x20, [sp, #16]
   85540:	aa0003f4 	mov	x20, x0
   85544:	d2800013 	mov	x19, #0x0                   	// #0
   85548:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8554c:	91072000 	add	x0, x0, #0x1c8
   85550:	a9025bf5 	stp	x21, x22, [sp, #32]
   85554:	90000036 	adrp	x22, 89000 <SErrorStub+0xc>
   85558:	911812d6 	add	x22, x22, #0x604
   8555c:	b2404bf5 	mov	x21, #0x7ffff               	// #524287
   85560:	a90363f7 	stp	x23, x24, [sp, #48]
   85564:	b0000038 	adrp	x24, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85568:	91094318 	add	x24, x24, #0x250
   8556c:	9a810017 	csel	x23, x0, x1, eq  // eq = none
   85570:	14000004 	b	85580 <debug_stacktrace(unsigned long const*, char const*)+0x50>
   85574:	91000673 	add	x19, x19, #0x1
   85578:	f101027f 	cmp	x19, #0x40
   8557c:	54000240 	b.eq	855c4 <debug_stacktrace(unsigned long const*, char const*)+0x94>  // b.none
   85580:	f8737a80 	ldr	x0, [x20, x19, lsl #3]
   85584:	eb15001f 	cmp	x0, x21
   85588:	54ffff69 	b.ls	85574 <debug_stacktrace(unsigned long const*, char const*)+0x44>  // b.plast
   8558c:	eb16001f 	cmp	x0, x22
   85590:	54ffff22 	b.cs	85574 <debug_stacktrace(unsigned long const*, char const*)+0x44>  // b.hs, b.nlast
   85594:	f240041f 	tst	x0, #0x3
   85598:	54fffee1 	b.ne	85574 <debug_stacktrace(unsigned long const*, char const*)+0x44>  // b.any
   8559c:	9400022d 	bl	85e50 <CLogger::Get()>
   855a0:	2a1303e4 	mov	w4, w19
   855a4:	aa1803e3 	mov	x3, x24
   855a8:	f8737a85 	ldr	x5, [x20, x19, lsl #3]
   855ac:	52800082 	mov	w2, #0x4                   	// #4
   855b0:	aa1703e1 	mov	x1, x23
   855b4:	94000163 	bl	85b40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   855b8:	91000673 	add	x19, x19, #0x1
   855bc:	f101027f 	cmp	x19, #0x40
   855c0:	54fffe01 	b.ne	85580 <debug_stacktrace(unsigned long const*, char const*)+0x50>  // b.any
   855c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   855c8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   855cc:	a94363f7 	ldp	x23, x24, [sp, #48]
   855d0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   855d4:	d65f03c0 	ret
	...

0000000000085600 <DelayLoop>:
   85600:	2a0103e1 	mov	w1, w1
   85604:	2a0203e2 	mov	w2, w2
   85608:	71000400 	subs	w0, w0, #0x1
   8560c:	54ffffa1 	b.ne	85600 <DelayLoop>  // b.any
   85610:	d65f03c0 	ret
	...

0000000000085620 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   85620:	91004002 	add	x2, x0, #0x10
   85624:	91070003 	add	x3, x0, #0x1c0
   85628:	f9000001 	str	x1, [x0]
   8562c:	3900201f 	strb	wzr, [x0, #8]
   85630:	f800845f 	str	xzr, [x2], #8
   85634:	eb03005f 	cmp	x2, x3
   85638:	54ffffc1 	b.ne	85630 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x10>  // b.any
   8563c:	d65f03c0 	ret

0000000000085640 <CGPIOManager::~CGPIOManager()>:
   85640:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   85644:	910003fd 	mov	x29, sp
   85648:	a90153f3 	stp	x19, x20, [sp, #16]
   8564c:	91004013 	add	x19, x0, #0x10
   85650:	91070014 	add	x20, x0, #0x1c0
   85654:	a9025bf5 	stp	x21, x22, [sp, #32]
   85658:	b0000036 	adrp	x22, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8565c:	9109a2d6 	add	x22, x22, #0x268
   85660:	b0000035 	adrp	x21, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85664:	9109e2b5 	add	x21, x21, #0x278
   85668:	f9001bf7 	str	x23, [sp, #48]
   8566c:	aa0003f7 	mov	x23, x0
   85670:	14000003 	b	8567c <CGPIOManager::~CGPIOManager()+0x3c>
   85674:	eb14027f 	cmp	x19, x20
   85678:	54000140 	b.eq	856a0 <CGPIOManager::~CGPIOManager()+0x60>  // b.none
   8567c:	f9400260 	ldr	x0, [x19]
   85680:	91002273 	add	x19, x19, #0x8
   85684:	b4ffff80 	cbz	x0, 85674 <CGPIOManager::~CGPIOManager()+0x34>
   85688:	52800582 	mov	w2, #0x2c                  	// #44
   8568c:	aa1603e1 	mov	x1, x22
   85690:	aa1503e0 	mov	x0, x21
   85694:	97fffeb3 	bl	85160 <assertion_failed>
   85698:	eb14027f 	cmp	x19, x20
   8569c:	54ffff01 	b.ne	8567c <CGPIOManager::~CGPIOManager()+0x3c>  // b.any
   856a0:	394022e0 	ldrb	w0, [x23, #8]
   856a4:	34000120 	cbz	w0, 856c8 <CGPIOManager::~CGPIOManager()+0x88>
   856a8:	f94002e0 	ldr	x0, [x23]
   856ac:	b4000180 	cbz	x0, 856dc <CGPIOManager::~CGPIOManager()+0x9c>
   856b0:	52801281 	mov	w1, #0x94                  	// #148
   856b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   856b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   856bc:	f9401bf7 	ldr	x23, [sp, #48]
   856c0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   856c4:	17fffc23 	b	84750 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   856c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   856cc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   856d0:	f9401bf7 	ldr	x23, [sp, #48]
   856d4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   856d8:	d65f03c0 	ret
   856dc:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   856e0:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   856e4:	910a4000 	add	x0, x0, #0x290
   856e8:	9109a021 	add	x1, x1, #0x268
   856ec:	52800642 	mov	w2, #0x32                  	// #50
   856f0:	97fffe9c 	bl	85160 <assertion_failed>
   856f4:	f94002e0 	ldr	x0, [x23]
   856f8:	17ffffee 	b	856b0 <CGPIOManager::~CGPIOManager()+0x70>
   856fc:	d503201f 	nop

0000000000085700 <CGPIOManager::Initialize()>:
   85700:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85704:	910003fd 	mov	x29, sp
   85708:	f9000bf3 	str	x19, [sp, #16]
   8570c:	aa0003f3 	mov	x19, x0
   85710:	39402000 	ldrb	w0, [x0, #8]
   85714:	350001c0 	cbnz	w0, 8574c <CGPIOManager::Initialize()+0x4c>
   85718:	f9400260 	ldr	x0, [x19]
   8571c:	b4000260 	cbz	x0, 85768 <CGPIOManager::Initialize()+0x68>
   85720:	aa1303e3 	mov	x3, x19
   85724:	52801281 	mov	w1, #0x94                  	// #148
   85728:	90000002 	adrp	x2, 85000 <palloc+0x20>
   8572c:	91278042 	add	x2, x2, #0x9e0
   85730:	97fffbc8 	bl	84650 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   85734:	52800021 	mov	w1, #0x1                   	// #1
   85738:	2a0103e0 	mov	w0, w1
   8573c:	39002261 	strb	w1, [x19, #8]
   85740:	f9400bf3 	ldr	x19, [sp, #16]
   85744:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85748:	d65f03c0 	ret
   8574c:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85750:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85754:	9109a021 	add	x1, x1, #0x268
   85758:	910aa000 	add	x0, x0, #0x2a8
   8575c:	52800762 	mov	w2, #0x3b                  	// #59
   85760:	97fffe80 	bl	85160 <assertion_failed>
   85764:	17ffffed 	b	85718 <CGPIOManager::Initialize()+0x18>
   85768:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8576c:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85770:	910a4000 	add	x0, x0, #0x290
   85774:	9109a021 	add	x1, x1, #0x268
   85778:	52800782 	mov	w2, #0x3c                  	// #60
   8577c:	97fffe79 	bl	85160 <assertion_failed>
   85780:	f9400260 	ldr	x0, [x19]
   85784:	17ffffe7 	b	85720 <CGPIOManager::Initialize()+0x20>
   85788:	d503201f 	nop
   8578c:	d503201f 	nop

0000000000085790 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   85790:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   85794:	910003fd 	mov	x29, sp
   85798:	a90153f3 	stp	x19, x20, [sp, #16]
   8579c:	aa0103f4 	mov	x20, x1
   857a0:	f90013f5 	str	x21, [sp, #32]
   857a4:	aa0003f5 	mov	x21, x0
   857a8:	39402000 	ldrb	w0, [x0, #8]
   857ac:	340001a0 	cbz	w0, 857e0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x50>
   857b0:	b4000294 	cbz	x20, 85800 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x70>
   857b4:	b9400a93 	ldr	w19, [x20, #8]
   857b8:	7100d67f 	cmp	w19, #0x35
   857bc:	54000308 	b.hi	8581c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x8c>  // b.pmore
   857c0:	8b334eb3 	add	x19, x21, w19, uxtw #3
   857c4:	f9400a60 	ldr	x0, [x19, #16]
   857c8:	b5000380 	cbnz	x0, 85838 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa8>
   857cc:	f94013f5 	ldr	x21, [sp, #32]
   857d0:	f9000a74 	str	x20, [x19, #16]
   857d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   857d8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   857dc:	d65f03c0 	ret
   857e0:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   857e4:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   857e8:	9109a021 	add	x1, x1, #0x268
   857ec:	910b0000 	add	x0, x0, #0x2c0
   857f0:	528008a2 	mov	w2, #0x45                  	// #69
   857f4:	97fffe5b 	bl	85160 <assertion_failed>
   857f8:	b5fffdf4 	cbnz	x20, 857b4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x24>
   857fc:	d503201f 	nop
   85800:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85804:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85808:	9109a021 	add	x1, x1, #0x268
   8580c:	910b4000 	add	x0, x0, #0x2d0
   85810:	528008e2 	mov	w2, #0x47                  	// #71
   85814:	97fffe53 	bl	85160 <assertion_failed>
   85818:	17ffffe7 	b	857b4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x24>
   8581c:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85820:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85824:	9109a021 	add	x1, x1, #0x268
   85828:	910b8000 	add	x0, x0, #0x2e0
   8582c:	52800922 	mov	w2, #0x49                  	// #73
   85830:	97fffe4c 	bl	85160 <assertion_failed>
   85834:	17ffffe3 	b	857c0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x30>
   85838:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8583c:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85840:	9109a021 	add	x1, x1, #0x268
   85844:	9109e000 	add	x0, x0, #0x278
   85848:	52800962 	mov	w2, #0x4b                  	// #75
   8584c:	97fffe45 	bl	85160 <assertion_failed>
   85850:	17ffffdf 	b	857cc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   85854:	d503201f 	nop
   85858:	d503201f 	nop
   8585c:	d503201f 	nop

0000000000085860 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   85860:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85864:	910003fd 	mov	x29, sp
   85868:	a90153f3 	stp	x19, x20, [sp, #16]
   8586c:	aa0003f4 	mov	x20, x0
   85870:	aa0103f3 	mov	x19, x1
   85874:	39402000 	ldrb	w0, [x0, #8]
   85878:	34000180 	cbz	w0, 858a8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
   8587c:	b4000273 	cbz	x19, 858c8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x68>
   85880:	b9400a73 	ldr	w19, [x19, #8]
   85884:	7100d67f 	cmp	w19, #0x35
   85888:	540002e8 	b.hi	858e4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x84>  // b.pmore
   8588c:	8b334e93 	add	x19, x20, w19, uxtw #3
   85890:	f9400a60 	ldr	x0, [x19, #16]
   85894:	b4000360 	cbz	x0, 85900 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xa0>
   85898:	f9000a7f 	str	xzr, [x19, #16]
   8589c:	a94153f3 	ldp	x19, x20, [sp, #16]
   858a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   858a4:	d65f03c0 	ret
   858a8:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   858ac:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   858b0:	9109a021 	add	x1, x1, #0x268
   858b4:	910b0000 	add	x0, x0, #0x2c0
   858b8:	52800a42 	mov	w2, #0x52                  	// #82
   858bc:	97fffe29 	bl	85160 <assertion_failed>
   858c0:	b5fffe13 	cbnz	x19, 85880 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
   858c4:	d503201f 	nop
   858c8:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   858cc:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   858d0:	9109a021 	add	x1, x1, #0x268
   858d4:	910b4000 	add	x0, x0, #0x2d0
   858d8:	52800a82 	mov	w2, #0x54                  	// #84
   858dc:	97fffe21 	bl	85160 <assertion_failed>
   858e0:	17ffffe8 	b	85880 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
   858e4:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   858e8:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   858ec:	9109a021 	add	x1, x1, #0x268
   858f0:	910b8000 	add	x0, x0, #0x2e0
   858f4:	52800ac2 	mov	w2, #0x56                  	// #86
   858f8:	97fffe1a 	bl	85160 <assertion_failed>
   858fc:	17ffffe4 	b	8588c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x2c>
   85900:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85904:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85908:	9109a021 	add	x1, x1, #0x268
   8590c:	910be000 	add	x0, x0, #0x2f8
   85910:	52800b02 	mov	w2, #0x58                  	// #88
   85914:	97fffe13 	bl	85160 <assertion_failed>
   85918:	17ffffe0 	b	85898 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x38>
   8591c:	d503201f 	nop

0000000000085920 <CGPIOManager::InterruptHandler()>:
   85920:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85924:	910003fd 	mov	x29, sp
   85928:	a90153f3 	stp	x19, x20, [sp, #16]
   8592c:	aa0003f4 	mov	x20, x0
   85930:	39402000 	ldrb	w0, [x0, #8]
   85934:	34000460 	cbz	w0, 859c0 <CGPIOManager::InterruptHandler()+0xa0>
   85938:	d2800800 	mov	x0, #0x40                  	// #64
   8593c:	f2bfc400 	movk	x0, #0xfe20, lsl #16
   85940:	b9400000 	ldr	w0, [x0]
   85944:	d2800881 	mov	x1, #0x44                  	// #68
   85948:	f2bfc401 	movk	x1, #0xfe20, lsl #16
   8594c:	52800013 	mov	w19, #0x0                   	// #0
   85950:	37000160 	tbnz	w0, #0, 8597c <CGPIOManager::InterruptHandler()+0x5c>
   85954:	11000673 	add	w19, w19, #0x1
   85958:	53017c00 	lsr	w0, w0, #1
   8595c:	f240127f 	tst	x19, #0x1f
   85960:	54000041 	b.ne	85968 <CGPIOManager::InterruptHandler()+0x48>  // b.any
   85964:	b9400020 	ldr	w0, [x1]
   85968:	7100da7f 	cmp	w19, #0x36
   8596c:	54ffff21 	b.ne	85950 <CGPIOManager::InterruptHandler()+0x30>  // b.any
   85970:	a94153f3 	ldp	x19, x20, [sp, #16]
   85974:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85978:	d65f03c0 	ret
   8597c:	8b334e94 	add	x20, x20, w19, uxtw #3
   85980:	52800021 	mov	w1, #0x1                   	// #1
   85984:	f9400a80 	ldr	x0, [x20, #16]
   85988:	1ad32034 	lsl	w20, w1, w19
   8598c:	b4000140 	cbz	x0, 859b4 <CGPIOManager::InterruptHandler()+0x94>
   85990:	97ffefc4 	bl	818a0 <CGPIOPin::InterruptHandler()>
   85994:	52800200 	mov	w0, #0x10                  	// #16
   85998:	72a7f100 	movk	w0, #0x3f88, lsl #16
   8599c:	0b531413 	add	w19, w0, w19, lsr #5
   859a0:	531e7673 	lsl	w19, w19, #2
   859a4:	b9000274 	str	w20, [x19]
   859a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   859ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   859b0:	d65f03c0 	ret
   859b4:	2a1303e0 	mov	w0, w19
   859b8:	97ffefe2 	bl	81940 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   859bc:	17fffff6 	b	85994 <CGPIOManager::InterruptHandler()+0x74>
   859c0:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   859c4:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   859c8:	9109a021 	add	x1, x1, #0x268
   859cc:	910b0000 	add	x0, x0, #0x2c0
   859d0:	52800bc2 	mov	w2, #0x5e                  	// #94
   859d4:	97fffde3 	bl	85160 <assertion_failed>
   859d8:	17ffffd8 	b	85938 <CGPIOManager::InterruptHandler()+0x18>
   859dc:	d503201f 	nop

00000000000859e0 <CGPIOManager::InterruptStub(void*)>:
   859e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   859e4:	910003fd 	mov	x29, sp
   859e8:	f9000bf3 	str	x19, [sp, #16]
   859ec:	aa0003f3 	mov	x19, x0
   859f0:	b40000a0 	cbz	x0, 85a04 <CGPIOManager::InterruptStub(void*)+0x24>
   859f4:	aa1303e0 	mov	x0, x19
   859f8:	f9400bf3 	ldr	x19, [sp, #16]
   859fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85a00:	17ffffc8 	b	85920 <CGPIOManager::InterruptHandler()>
   85a04:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85a08:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85a0c:	9109a021 	add	x1, x1, #0x268
   85a10:	910c4000 	add	x0, x0, #0x310
   85a14:	52801142 	mov	w2, #0x8a                  	// #138
   85a18:	97fffdd2 	bl	85160 <assertion_failed>
   85a1c:	17fffff6 	b	859f4 <CGPIOManager::InterruptStub(void*)+0x14>

0000000000085a20 <CLogger::CLogger(unsigned int, CTimer*)>:
   85a20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85a24:	910003fd 	mov	x29, sp
   85a28:	52800023 	mov	w3, #0x1                   	// #1
   85a2c:	f9000bf3 	str	x19, [sp, #16]
   85a30:	aa0003f3 	mov	x19, x0
   85a34:	d2880000 	mov	x0, #0x4000                	// #16384
   85a38:	b9000261 	str	w1, [x19]
   85a3c:	a900fe62 	stp	x2, xzr, [x19, #8]
   85a40:	a901fe7f 	stp	xzr, xzr, [x19, #24]
   85a44:	b9002a63 	str	w3, [x19, #40]
   85a48:	f900e27f 	str	xzr, [x19, #448]
   85a4c:	b901ca63 	str	w3, [x19, #456]
   85a50:	a91d7e7f 	stp	xzr, xzr, [x19, #464]
   85a54:	97fffc3b 	bl	84b40 <operator new[](unsigned long)>
   85a58:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85a5c:	f9000e60 	str	x0, [x19, #24]
   85a60:	f9058033 	str	x19, [x1, #2816]
   85a64:	f9400bf3 	ldr	x19, [sp, #16]
   85a68:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85a6c:	d65f03c0 	ret

0000000000085a70 <CLogger::~CLogger()>:
   85a70:	b0000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85a74:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85a78:	910003fd 	mov	x29, sp
   85a7c:	f905803f 	str	xzr, [x1, #2816]
   85a80:	f9000bf3 	str	x19, [sp, #16]
   85a84:	aa0003f3 	mov	x19, x0
   85a88:	b941c400 	ldr	w0, [x0, #452]
   85a8c:	14000008 	b	85aac <CLogger::~CLogger()+0x3c>
   85a90:	f9401860 	ldr	x0, [x3, #48]
   85a94:	97fffc37 	bl	84b70 <operator delete(void*, unsigned long)>
   85a98:	b941c660 	ldr	w0, [x19, #452]
   85a9c:	11000400 	add	w0, w0, #0x1
   85aa0:	7100c81f 	cmp	w0, #0x32
   85aa4:	b901c660 	str	w0, [x19, #452]
   85aa8:	54000160 	b.eq	85ad4 <CLogger::~CLogger()+0x64>  // b.none
   85aac:	b941c262 	ldr	w2, [x19, #448]
   85ab0:	8b204e63 	add	x3, x19, w0, uxtw #3
   85ab4:	d2802201 	mov	x1, #0x110                 	// #272
   85ab8:	6b00005f 	cmp	w2, w0
   85abc:	54fffea1 	b.ne	85a90 <CLogger::~CLogger()+0x20>  // b.any
   85ac0:	f9400e60 	ldr	x0, [x19, #24]
   85ac4:	b40000e0 	cbz	x0, 85ae0 <CLogger::~CLogger()+0x70>
   85ac8:	f9400bf3 	ldr	x19, [sp, #16]
   85acc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85ad0:	17fffc24 	b	84b60 <operator delete[](void*)>
   85ad4:	52800000 	mov	w0, #0x0                   	// #0
   85ad8:	b901c67f 	str	wzr, [x19, #452]
   85adc:	17fffff4 	b	85aac <CLogger::~CLogger()+0x3c>
   85ae0:	f9400bf3 	ldr	x19, [sp, #16]
   85ae4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85ae8:	d65f03c0 	ret
   85aec:	d503201f 	nop

0000000000085af0 <CLogger::Initialize(CDevice*)>:
   85af0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85af4:	910003fd 	mov	x29, sp
   85af8:	f9000bf3 	str	x19, [sp, #16]
   85afc:	aa0003f3 	mov	x19, x0
   85b00:	f9000801 	str	x1, [x0, #16]
   85b04:	97fff215 	bl	82358 <CMachineInfo::Get()>
   85b08:	97fff0e8 	bl	81ea8 <CMachineInfo::GetMachineName() const>
   85b0c:	b0000023 	adrp	x3, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85b10:	910c8063 	add	x3, x3, #0x320
   85b14:	aa0003e4 	mov	x4, x0
   85b18:	9100a061 	add	x1, x3, #0x28
   85b1c:	aa1303e0 	mov	x0, x19
   85b20:	52800062 	mov	w2, #0x3                   	// #3
   85b24:	94000007 	bl	85b40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   85b28:	52800020 	mov	w0, #0x1                   	// #1
   85b2c:	f9400bf3 	ldr	x19, [sp, #16]
   85b30:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85b34:	d65f03c0 	ret
   85b38:	d503201f 	nop
   85b3c:	d503201f 	nop

0000000000085b40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   85b40:	a9b17bfd 	stp	x29, x30, [sp, #-240]!
   85b44:	9103c3e8 	add	x8, sp, #0xf0
   85b48:	9103c3eb 	add	x11, sp, #0xf0
   85b4c:	910003fd 	mov	x29, sp
   85b50:	910343ea 	add	x10, sp, #0xd0
   85b54:	128003e9 	mov	w9, #0xffffffe0            	// #-32
   85b58:	a9032fe8 	stp	x8, x11, [sp, #48]
   85b5c:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   85b60:	f90023ea 	str	x10, [sp, #64]
   85b64:	b9004be9 	str	w9, [sp, #72]
   85b68:	b9004fe8 	str	w8, [sp, #76]
   85b6c:	a9432fea 	ldp	x10, x11, [sp, #48]
   85b70:	a94427e8 	ldp	x8, x9, [sp, #64]
   85b74:	a90d17e4 	stp	x4, x5, [sp, #208]
   85b78:	910043e4 	add	x4, sp, #0x10
   85b7c:	a9012fea 	stp	x10, x11, [sp, #16]
   85b80:	a90227e8 	stp	x8, x9, [sp, #32]
   85b84:	3d8017e0 	str	q0, [sp, #80]
   85b88:	3d801be1 	str	q1, [sp, #96]
   85b8c:	3d801fe2 	str	q2, [sp, #112]
   85b90:	3d8023e3 	str	q3, [sp, #128]
   85b94:	3d8027e4 	str	q4, [sp, #144]
   85b98:	3d802be5 	str	q5, [sp, #160]
   85b9c:	3d802fe6 	str	q6, [sp, #176]
   85ba0:	3d8033e7 	str	q7, [sp, #192]
   85ba4:	a90e1fe6 	stp	x6, x7, [sp, #224]
   85ba8:	94000006 	bl	85bc0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   85bac:	a8cf7bfd 	ldp	x29, x30, [sp], #240
   85bb0:	d65f03c0 	ret
   85bb4:	d503201f 	nop
   85bb8:	d503201f 	nop
   85bbc:	d503201f 	nop

0000000000085bc0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   85bc0:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   85bc4:	910003fd 	mov	x29, sp
   85bc8:	a90153f3 	stp	x19, x20, [sp, #16]
   85bcc:	aa0003f3 	mov	x19, x0
   85bd0:	9101c3e0 	add	x0, sp, #0x70
   85bd4:	2a0203f4 	mov	w20, w2
   85bd8:	a9025bf5 	stp	x21, x22, [sp, #32]
   85bdc:	aa0403f5 	mov	x21, x4
   85be0:	aa0103f6 	mov	x22, x1
   85be4:	f90027e3 	str	x3, [sp, #72]
   85be8:	94000362 	bl	86970 <CString::CString()>
   85bec:	a9401ea6 	ldp	x6, x7, [x21]
   85bf0:	910143e2 	add	x2, sp, #0x50
   85bf4:	9101c3e0 	add	x0, sp, #0x70
   85bf8:	a94116a4 	ldp	x4, x5, [x21, #16]
   85bfc:	a9051fe6 	stp	x6, x7, [sp, #80]
   85c00:	f94027e1 	ldr	x1, [sp, #72]
   85c04:	a90617e4 	stp	x4, x5, [sp, #96]
   85c08:	9400055e 	bl	87180 <CString::FormatV(char const*, std::__va_list)>
   85c0c:	9101c3e0 	add	x0, sp, #0x70
   85c10:	94000374 	bl	869e0 <CString::operator char const*() const>
   85c14:	aa0003e3 	mov	x3, x0
   85c18:	2a1403e2 	mov	w2, w20
   85c1c:	aa1303e0 	mov	x0, x19
   85c20:	aa1603e1 	mov	x1, x22
   85c24:	940000f3 	bl	85ff0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   85c28:	b9400260 	ldr	w0, [x19]
   85c2c:	6b14001f 	cmp	w0, w20
   85c30:	540005c3 	b.cc	85ce8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x128>  // b.lo, b.ul, b.last
   85c34:	910243e0 	add	x0, sp, #0x90
   85c38:	b0000035 	adrp	x21, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85c3c:	910c82b5 	add	x21, x21, #0x320
   85c40:	9400034c 	bl	86970 <CString::CString()>
   85c44:	340005f4 	cbz	w20, 85d00 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x140>
   85c48:	f9400660 	ldr	x0, [x19, #8]
   85c4c:	b4000220 	cbz	x0, 85c90 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
   85c50:	f9001bf7 	str	x23, [sp, #48]
   85c54:	97fff35b 	bl	829c0 <CTimer::GetTimeString()>
   85c58:	aa0003f7 	mov	x23, x0
   85c5c:	b40007e0 	cbz	x0, 85d58 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x198>
   85c60:	94000360 	bl	869e0 <CString::operator char const*() const>
   85c64:	aa0003e1 	mov	x1, x0
   85c68:	910243e0 	add	x0, sp, #0x90
   85c6c:	940003a1 	bl	86af0 <CString::Append(char const*)>
   85c70:	9100e2a1 	add	x1, x21, #0x38
   85c74:	910243e0 	add	x0, sp, #0x90
   85c78:	9400039e 	bl	86af0 <CString::Append(char const*)>
   85c7c:	f94002e1 	ldr	x1, [x23]
   85c80:	aa1703e0 	mov	x0, x23
   85c84:	f9400421 	ldr	x1, [x1, #8]
   85c88:	d63f0020 	blr	x1
   85c8c:	f9401bf7 	ldr	x23, [sp, #48]
   85c90:	aa1603e1 	mov	x1, x22
   85c94:	910243e0 	add	x0, sp, #0x90
   85c98:	94000396 	bl	86af0 <CString::Append(char const*)>
   85c9c:	910102a1 	add	x1, x21, #0x40
   85ca0:	910243e0 	add	x0, sp, #0x90
   85ca4:	94000393 	bl	86af0 <CString::Append(char const*)>
   85ca8:	9101c3e0 	add	x0, sp, #0x70
   85cac:	9400034d 	bl	869e0 <CString::operator char const*() const>
   85cb0:	aa0003e1 	mov	x1, x0
   85cb4:	910243e0 	add	x0, sp, #0x90
   85cb8:	9400038e 	bl	86af0 <CString::Append(char const*)>
   85cbc:	340002f4 	cbz	w20, 85d18 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x158>
   85cc0:	910142a1 	add	x1, x21, #0x50
   85cc4:	910243e0 	add	x0, sp, #0x90
   85cc8:	9400038a 	bl	86af0 <CString::Append(char const*)>
   85ccc:	910243e0 	add	x0, sp, #0x90
   85cd0:	94000344 	bl	869e0 <CString::operator char const*() const>
   85cd4:	aa0003e1 	mov	x1, x0
   85cd8:	aa1303e0 	mov	x0, x19
   85cdc:	94000061 	bl	85e60 <CLogger::Write(char const*)>
   85ce0:	910243e0 	add	x0, sp, #0x90
   85ce4:	940002e7 	bl	86880 <CString::~CString()>
   85ce8:	9101c3e0 	add	x0, sp, #0x70
   85cec:	940002e5 	bl	86880 <CString::~CString()>
   85cf0:	a94153f3 	ldp	x19, x20, [sp, #16]
   85cf4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85cf8:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   85cfc:	d65f03c0 	ret
   85d00:	9100c2a1 	add	x1, x21, #0x30
   85d04:	910243e0 	add	x0, sp, #0x90
   85d08:	9400033e 	bl	86a00 <CString::operator=(char const*)>
   85d0c:	f9400660 	ldr	x0, [x19, #8]
   85d10:	b5fffa00 	cbnz	x0, 85c50 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x90>
   85d14:	17ffffdf 	b	85c90 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
   85d18:	910122a1 	add	x1, x21, #0x48
   85d1c:	910243e0 	add	x0, sp, #0x90
   85d20:	f9001bf7 	str	x23, [sp, #48]
   85d24:	94000373 	bl	86af0 <CString::Append(char const*)>
   85d28:	910142a1 	add	x1, x21, #0x50
   85d2c:	910243e0 	add	x0, sp, #0x90
   85d30:	94000370 	bl	86af0 <CString::Append(char const*)>
   85d34:	910243e0 	add	x0, sp, #0x90
   85d38:	9400032a 	bl	869e0 <CString::operator char const*() const>
   85d3c:	aa0003e1 	mov	x1, x0
   85d40:	aa1303e0 	mov	x0, x19
   85d44:	94000047 	bl	85e60 <CLogger::Write(char const*)>
   85d48:	f940ee60 	ldr	x0, [x19, #472]
   85d4c:	b4000040 	cbz	x0, 85d54 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x194>
   85d50:	d63f0000 	blr	x0
   85d54:	97fff19f 	bl	823d0 <halt>
   85d58:	f9401bf7 	ldr	x23, [sp, #48]
   85d5c:	17ffffcd 	b	85c90 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>

0000000000085d60 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   85d60:	b9400005 	ldr	w5, [x0]
   85d64:	6b0200bf 	cmp	w5, w2
   85d68:	540006c3 	b.cc	85e40 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xe0>  // b.lo, b.ul, b.last
   85d6c:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
   85d70:	910003fd 	mov	x29, sp
   85d74:	a90153f3 	stp	x19, x20, [sp, #16]
   85d78:	aa0003f3 	mov	x19, x0
   85d7c:	a9025bf5 	stp	x21, x22, [sp, #32]
   85d80:	aa0303f5 	mov	x21, x3
   85d84:	3900e3ff 	strb	wzr, [sp, #56]
   85d88:	340002a2 	cbz	w2, 85ddc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x7c>
   85d8c:	9100e3e0 	add	x0, sp, #0x38
   85d90:	b0000034 	adrp	x20, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85d94:	910c8294 	add	x20, x20, #0x320
   85d98:	9400087e 	bl	87f90 <strcat>
   85d9c:	91010281 	add	x1, x20, #0x40
   85da0:	9100e3e0 	add	x0, sp, #0x38
   85da4:	9400087b 	bl	87f90 <strcat>
   85da8:	aa1503e1 	mov	x1, x21
   85dac:	9100e3e0 	add	x0, sp, #0x38
   85db0:	94000878 	bl	87f90 <strcat>
   85db4:	91014281 	add	x1, x20, #0x50
   85db8:	9100e3e0 	add	x0, sp, #0x38
   85dbc:	94000875 	bl	87f90 <strcat>
   85dc0:	9100e3e1 	add	x1, sp, #0x38
   85dc4:	aa1303e0 	mov	x0, x19
   85dc8:	94000026 	bl	85e60 <CLogger::Write(char const*)>
   85dcc:	a94153f3 	ldp	x19, x20, [sp, #16]
   85dd0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85dd4:	a8d07bfd 	ldp	x29, x30, [sp], #256
   85dd8:	d65f03c0 	ret
   85ddc:	b0000036 	adrp	x22, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85de0:	910c82d6 	add	x22, x22, #0x320
   85de4:	aa0103f4 	mov	x20, x1
   85de8:	9100e3e0 	add	x0, sp, #0x38
   85dec:	9100c2c1 	add	x1, x22, #0x30
   85df0:	9400084c 	bl	87f20 <strcpy>
   85df4:	aa1403e1 	mov	x1, x20
   85df8:	9100e3e0 	add	x0, sp, #0x38
   85dfc:	94000865 	bl	87f90 <strcat>
   85e00:	910102c1 	add	x1, x22, #0x40
   85e04:	9100e3e0 	add	x0, sp, #0x38
   85e08:	94000862 	bl	87f90 <strcat>
   85e0c:	aa1503e1 	mov	x1, x21
   85e10:	9100e3e0 	add	x0, sp, #0x38
   85e14:	9400085f 	bl	87f90 <strcat>
   85e18:	910122c1 	add	x1, x22, #0x48
   85e1c:	9100e3e0 	add	x0, sp, #0x38
   85e20:	9400085c 	bl	87f90 <strcat>
   85e24:	910142c1 	add	x1, x22, #0x50
   85e28:	9100e3e0 	add	x0, sp, #0x38
   85e2c:	94000859 	bl	87f90 <strcat>
   85e30:	9100e3e1 	add	x1, sp, #0x38
   85e34:	aa1303e0 	mov	x0, x19
   85e38:	9400000a 	bl	85e60 <CLogger::Write(char const*)>
   85e3c:	97fff165 	bl	823d0 <halt>
   85e40:	d65f03c0 	ret
   85e44:	d503201f 	nop
   85e48:	d503201f 	nop
   85e4c:	d503201f 	nop

0000000000085e50 <CLogger::Get()>:
   85e50:	b0000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   85e54:	f9458000 	ldr	x0, [x0, #2816]
   85e58:	d65f03c0 	ret
   85e5c:	d503201f 	nop

0000000000085e60 <CLogger::Write(char const*)>:
   85e60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   85e64:	910003fd 	mov	x29, sp
   85e68:	a90153f3 	stp	x19, x20, [sp, #16]
   85e6c:	aa0003f3 	mov	x19, x0
   85e70:	aa0103e0 	mov	x0, x1
   85e74:	aa0103f4 	mov	x20, x1
   85e78:	f90013f5 	str	x21, [sp, #32]
   85e7c:	940007bd 	bl	87d70 <strlen>
   85e80:	aa0003e2 	mov	x2, x0
   85e84:	aa0003f5 	mov	x21, x0
   85e88:	f9400a60 	ldr	x0, [x19, #16]
   85e8c:	aa1403e1 	mov	x1, x20
   85e90:	f9400003 	ldr	x3, [x0]
   85e94:	f9400c63 	ldr	x3, [x3, #24]
   85e98:	d63f0060 	blr	x3
   85e9c:	b9402a60 	ldr	w0, [x19, #40]
   85ea0:	35000320 	cbnz	w0, 85f04 <CLogger::Write(char const*)+0xa4>
   85ea4:	8b150280 	add	x0, x20, x21
   85ea8:	eb00029f 	cmp	x20, x0
   85eac:	54000200 	b.eq	85eec <CLogger::Write(char const*)+0x8c>  // b.none
   85eb0:	38c01681 	ldrsb	w1, [x20], #1
   85eb4:	7100343f 	cmp	w1, #0xd
   85eb8:	54ffff80 	b.eq	85ea8 <CLogger::Write(char const*)+0x48>  // b.none
   85ebc:	b9402263 	ldr	w3, [x19, #32]
   85ec0:	f9400e64 	ldr	x4, [x19, #24]
   85ec4:	38236881 	strb	w1, [x4, x3]
   85ec8:	29440e61 	ldp	w1, w3, [x19, #32]
   85ecc:	11000421 	add	w1, w1, #0x1
   85ed0:	12003421 	and	w1, w1, #0x3fff
   85ed4:	6b03003f 	cmp	w1, w3
   85ed8:	b9002261 	str	w1, [x19, #32]
   85edc:	54fffe61 	b.ne	85ea8 <CLogger::Write(char const*)+0x48>  // b.any
   85ee0:	51000421 	sub	w1, w1, #0x1
   85ee4:	12003421 	and	w1, w1, #0x3fff
   85ee8:	b9002261 	str	w1, [x19, #32]
   85eec:	b9402a60 	ldr	w0, [x19, #40]
   85ef0:	350000e0 	cbnz	w0, 85f0c <CLogger::Write(char const*)+0xac>
   85ef4:	a94153f3 	ldp	x19, x20, [sp, #16]
   85ef8:	f94013f5 	ldr	x21, [sp, #32]
   85efc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85f00:	d65f03c0 	ret
   85f04:	97fff70b 	bl	83b30 <EnterCritical>
   85f08:	17ffffe7 	b	85ea4 <CLogger::Write(char const*)+0x44>
   85f0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   85f10:	f94013f5 	ldr	x21, [sp, #32]
   85f14:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85f18:	17fff73e 	b	83c10 <LeaveCritical>
   85f1c:	d503201f 	nop

0000000000085f20 <CLogger::Read(void*, unsigned int)>:
   85f20:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   85f24:	910003fd 	mov	x29, sp
   85f28:	a90153f3 	stp	x19, x20, [sp, #16]
   85f2c:	aa0003f3 	mov	x19, x0
   85f30:	2a0203f4 	mov	w20, w2
   85f34:	b9402800 	ldr	w0, [x0, #40]
   85f38:	f90013f5 	str	x21, [sp, #32]
   85f3c:	aa0103f5 	mov	x21, x1
   85f40:	350003a0 	cbnz	w0, 85fb4 <CLogger::Read(void*, unsigned int)+0x94>
   85f44:	29440261 	ldp	w1, w0, [x19, #32]
   85f48:	6b00003f 	cmp	w1, w0
   85f4c:	54000420 	b.eq	85fd0 <CLogger::Read(void*, unsigned int)+0xb0>  // b.none
   85f50:	2a1403e2 	mov	w2, w20
   85f54:	d2800004 	mov	x4, #0x0                   	// #0
   85f58:	1400000d 	b	85f8c <CLogger::Read(void*, unsigned int)+0x6c>
   85f5c:	b9402660 	ldr	w0, [x19, #36]
   85f60:	11000494 	add	w20, w4, #0x1
   85f64:	f9400e63 	ldr	x3, [x19, #24]
   85f68:	38e06860 	ldrsb	w0, [x3, x0]
   85f6c:	38246aa0 	strb	w0, [x21, x4]
   85f70:	91000484 	add	x4, x4, #0x1
   85f74:	29440e60 	ldp	w0, w3, [x19, #32]
   85f78:	11000463 	add	w3, w3, #0x1
   85f7c:	12003463 	and	w3, w3, #0x3fff
   85f80:	6b00007f 	cmp	w3, w0
   85f84:	b9002663 	str	w3, [x19, #36]
   85f88:	54000080 	b.eq	85f98 <CLogger::Read(void*, unsigned int)+0x78>  // b.none
   85f8c:	eb04005f 	cmp	x2, x4
   85f90:	2a0403f4 	mov	w20, w4
   85f94:	54fffe41 	b.ne	85f5c <CLogger::Read(void*, unsigned int)+0x3c>  // b.any
   85f98:	b9402a60 	ldr	w0, [x19, #40]
   85f9c:	350001e0 	cbnz	w0, 85fd8 <CLogger::Read(void*, unsigned int)+0xb8>
   85fa0:	2a1403e0 	mov	w0, w20
   85fa4:	a94153f3 	ldp	x19, x20, [sp, #16]
   85fa8:	f94013f5 	ldr	x21, [sp, #32]
   85fac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85fb0:	d65f03c0 	ret
   85fb4:	97fff6df 	bl	83b30 <EnterCritical>
   85fb8:	29440261 	ldp	w1, w0, [x19, #32]
   85fbc:	6b00003f 	cmp	w1, w0
   85fc0:	54fffc81 	b.ne	85f50 <CLogger::Read(void*, unsigned int)+0x30>  // b.any
   85fc4:	b9402a60 	ldr	w0, [x19, #40]
   85fc8:	34000040 	cbz	w0, 85fd0 <CLogger::Read(void*, unsigned int)+0xb0>
   85fcc:	97fff711 	bl	83c10 <LeaveCritical>
   85fd0:	12800014 	mov	w20, #0xffffffff            	// #-1
   85fd4:	17fffff3 	b	85fa0 <CLogger::Read(void*, unsigned int)+0x80>
   85fd8:	97fff70e 	bl	83c10 <LeaveCritical>
   85fdc:	2a1403e0 	mov	w0, w20
   85fe0:	a94153f3 	ldp	x19, x20, [sp, #16]
   85fe4:	f94013f5 	ldr	x21, [sp, #32]
   85fe8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85fec:	d65f03c0 	ret

0000000000085ff0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   85ff0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   85ff4:	910003fd 	mov	x29, sp
   85ff8:	a90153f3 	stp	x19, x20, [sp, #16]
   85ffc:	aa0003f3 	mov	x19, x0
   86000:	d2802200 	mov	x0, #0x110                 	// #272
   86004:	f90013f5 	str	x21, [sp, #32]
   86008:	2a0203f5 	mov	w21, w2
   8600c:	a90307e3 	stp	x3, x1, [sp, #48]
   86010:	97fffac8 	bl	84b30 <operator new(unsigned long)>
   86014:	aa0003f4 	mov	x20, x0
   86018:	d2800642 	mov	x2, #0x32                  	// #50
   8601c:	b8004415 	str	w21, [x0], #4
   86020:	f9401fe1 	ldr	x1, [sp, #56]
   86024:	940007cb 	bl	87f50 <strncpy>
   86028:	f9401be3 	ldr	x3, [sp, #48]
   8602c:	9100da80 	add	x0, x20, #0x36
   86030:	d2801902 	mov	x2, #0xc8                  	// #200
   86034:	3900d69f 	strb	wzr, [x20, #53]
   86038:	aa0303e1 	mov	x1, x3
   8603c:	940007c5 	bl	87f50 <strncpy>
   86040:	3903f69f 	strb	wzr, [x20, #253]
   86044:	f9400660 	ldr	x0, [x19, #8]
   86048:	b40000c0 	cbz	x0, 86060 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   8604c:	910133e2 	add	x2, sp, #0x4c
   86050:	910123e1 	add	x1, sp, #0x48
   86054:	97fff1e3 	bl	827e0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   86058:	72001c1f 	tst	w0, #0xff
   8605c:	540005e1 	b.ne	86118 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x128>  // b.any
   86060:	a9107e9f 	stp	xzr, xzr, [x20, #256]
   86064:	b941ca62 	ldr	w2, [x19, #456]
   86068:	35000502 	cbnz	w2, 86108 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x118>
   8606c:	b941c261 	ldr	w1, [x19, #448]
   86070:	8b214e60 	add	x0, x19, w1, uxtw #3
   86074:	f9001814 	str	x20, [x0, #48]
   86078:	11000421 	add	w1, w1, #0x1
   8607c:	7100c83f 	cmp	w1, #0x32
   86080:	54000340 	b.eq	860e8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>  // b.none
   86084:	b941c660 	ldr	w0, [x19, #452]
   86088:	b901c261 	str	w1, [x19, #448]
   8608c:	6b00003f 	cmp	w1, w0
   86090:	54000120 	b.eq	860b4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc4>  // b.none
   86094:	35000262 	cbnz	w2, 860e0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
   86098:	f940ea60 	ldr	x0, [x19, #464]
   8609c:	b4000040 	cbz	x0, 860a4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb4>
   860a0:	d63f0000 	blr	x0
   860a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   860a8:	f94013f5 	ldr	x21, [sp, #32]
   860ac:	a8c57bfd 	ldp	x29, x30, [sp], #80
   860b0:	d65f03c0 	ret
   860b4:	11000423 	add	w3, w1, #0x1
   860b8:	8b214e61 	add	x1, x19, w1, uxtw #3
   860bc:	f9401820 	ldr	x0, [x1, #48]
   860c0:	7100c87f 	cmp	w3, #0x32
   860c4:	540001c1 	b.ne	860fc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x10c>  // b.any
   860c8:	b901c67f 	str	wzr, [x19, #452]
   860cc:	350003c2 	cbnz	w2, 86144 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x154>
   860d0:	b4fffe40 	cbz	x0, 86098 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xa8>
   860d4:	d2802201 	mov	x1, #0x110                 	// #272
   860d8:	97fffaa6 	bl	84b70 <operator delete(void*, unsigned long)>
   860dc:	17ffffef 	b	86098 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xa8>
   860e0:	97fff6cc 	bl	83c10 <LeaveCritical>
   860e4:	17ffffed 	b	86098 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xa8>
   860e8:	b941c660 	ldr	w0, [x19, #452]
   860ec:	b901c27f 	str	wzr, [x19, #448]
   860f0:	35fffd20 	cbnz	w0, 86094 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xa4>
   860f4:	f9401a60 	ldr	x0, [x19, #48]
   860f8:	52800023 	mov	w3, #0x1                   	// #1
   860fc:	b901c663 	str	w3, [x19, #452]
   86100:	34fffe82 	cbz	w2, 860d0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   86104:	14000010 	b	86144 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x154>
   86108:	2a0203e0 	mov	w0, w2
   8610c:	97fff689 	bl	83b30 <EnterCritical>
   86110:	b941ca62 	ldr	w2, [x19, #456]
   86114:	17ffffd6 	b	8606c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x7c>
   86118:	294907e2 	ldp	w2, w1, [sp, #72]
   8611c:	5282eb23 	mov	w3, #0x1759                	// #5977
   86120:	72ba36e3 	movk	w3, #0xd1b7, lsl #16
   86124:	f9400660 	ldr	x0, [x19, #8]
   86128:	9ba37c21 	umull	x1, w1, w3
   8612c:	f9008282 	str	x2, [x20, #256]
   86130:	d36dfc21 	lsr	x1, x1, #45
   86134:	b9010a81 	str	w1, [x20, #264]
   86138:	97fff16a 	bl	826e0 <CTimer::GetTimeZone() const>
   8613c:	b9010e80 	str	w0, [x20, #268]
   86140:	17ffffc9 	b	86064 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x74>
   86144:	f9001be0 	str	x0, [sp, #48]
   86148:	97fff6b2 	bl	83c10 <LeaveCritical>
   8614c:	f9401be0 	ldr	x0, [sp, #48]
   86150:	17ffffe0 	b	860d0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   86154:	d503201f 	nop
   86158:	d503201f 	nop
   8615c:	d503201f 	nop

0000000000086160 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   86160:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   86164:	910003fd 	mov	x29, sp
   86168:	a90153f3 	stp	x19, x20, [sp, #16]
   8616c:	aa0003f3 	mov	x19, x0
   86170:	b941c800 	ldr	w0, [x0, #456]
   86174:	a9025bf5 	stp	x21, x22, [sp, #32]
   86178:	aa0403f5 	mov	x21, x4
   8617c:	aa0503f6 	mov	x22, x5
   86180:	a90363f7 	stp	x23, x24, [sp, #48]
   86184:	aa0103f8 	mov	x24, x1
   86188:	aa0603f7 	mov	x23, x6
   8618c:	f90023f9 	str	x25, [sp, #64]
   86190:	aa0303f9 	mov	x25, x3
   86194:	35000480 	cbnz	w0, 86224 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xc4>
   86198:	b941c263 	ldr	w3, [x19, #448]
   8619c:	b941c661 	ldr	w1, [x19, #452]
   861a0:	6b03003f 	cmp	w1, w3
   861a4:	54000540 	b.eq	8624c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xec>  // b.none
   861a8:	11000424 	add	w4, w1, #0x1
   861ac:	8b214e61 	add	x1, x19, w1, uxtw #3
   861b0:	f9401834 	ldr	x20, [x1, #48]
   861b4:	7100c89f 	cmp	w4, #0x32
   861b8:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
   861bc:	b901c664 	str	w4, [x19, #452]
   861c0:	35000540 	cbnz	w0, 86268 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x108>
   861c4:	aa1403e1 	mov	x1, x20
   861c8:	aa0203e0 	mov	x0, x2
   861cc:	b8404422 	ldr	w2, [x1], #4
   861d0:	b9000302 	str	w2, [x24]
   861d4:	94000753 	bl	87f20 <strcpy>
   861d8:	9100da81 	add	x1, x20, #0x36
   861dc:	aa1903e0 	mov	x0, x25
   861e0:	94000750 	bl	87f20 <strcpy>
   861e4:	f9408282 	ldr	x2, [x20, #256]
   861e8:	aa1403e0 	mov	x0, x20
   861ec:	d2802201 	mov	x1, #0x110                 	// #272
   861f0:	f90002a2 	str	x2, [x21]
   861f4:	b9410a82 	ldr	w2, [x20, #264]
   861f8:	b90002c2 	str	w2, [x22]
   861fc:	b9410e82 	ldr	w2, [x20, #268]
   86200:	b90002e2 	str	w2, [x23]
   86204:	97fffa5b 	bl	84b70 <operator delete(void*, unsigned long)>
   86208:	52800020 	mov	w0, #0x1                   	// #1
   8620c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86210:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86214:	a94363f7 	ldp	x23, x24, [sp, #48]
   86218:	f94023f9 	ldr	x25, [sp, #64]
   8621c:	a8c67bfd 	ldp	x29, x30, [sp], #96
   86220:	d65f03c0 	ret
   86224:	f9002fe2 	str	x2, [sp, #88]
   86228:	97fff642 	bl	83b30 <EnterCritical>
   8622c:	b941c260 	ldr	w0, [x19, #448]
   86230:	b941c661 	ldr	w1, [x19, #452]
   86234:	f9402fe2 	ldr	x2, [sp, #88]
   86238:	6b01001f 	cmp	w0, w1
   8623c:	b941ca60 	ldr	w0, [x19, #456]
   86240:	54fffb41 	b.ne	861a8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x48>  // b.any
   86244:	34000040 	cbz	w0, 8624c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xec>
   86248:	97fff672 	bl	83c10 <LeaveCritical>
   8624c:	52800000 	mov	w0, #0x0                   	// #0
   86250:	a94153f3 	ldp	x19, x20, [sp, #16]
   86254:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86258:	a94363f7 	ldp	x23, x24, [sp, #48]
   8625c:	f94023f9 	ldr	x25, [sp, #64]
   86260:	a8c67bfd 	ldp	x29, x30, [sp], #96
   86264:	d65f03c0 	ret
   86268:	f9002fe2 	str	x2, [sp, #88]
   8626c:	97fff669 	bl	83c10 <LeaveCritical>
   86270:	f9402fe2 	ldr	x2, [sp, #88]
   86274:	17ffffd4 	b	861c4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x64>
   86278:	d503201f 	nop
   8627c:	d503201f 	nop

0000000000086280 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   86280:	f900e801 	str	x1, [x0, #464]
   86284:	d65f03c0 	ret
   86288:	d503201f 	nop
   8628c:	d503201f 	nop

0000000000086290 <CLogger::RegisterPanicHandler(void (*)())>:
   86290:	f900ec01 	str	x1, [x0, #472]
   86294:	d65f03c0 	ret
	...

00000000000862a0 <CPtrList::CPtrList()>:
   862a0:	f900001f 	str	xzr, [x0]
   862a4:	d65f03c0 	ret
   862a8:	d503201f 	nop
   862ac:	d503201f 	nop

00000000000862b0 <CPtrList::~CPtrList()>:
   862b0:	f9400000 	ldr	x0, [x0]
   862b4:	b5000040 	cbnz	x0, 862bc <CPtrList::~CPtrList()+0xc>
   862b8:	d65f03c0 	ret
   862bc:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   862c0:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   862c4:	910de021 	add	x1, x1, #0x378
   862c8:	910e2000 	add	x0, x0, #0x388
   862cc:	52800542 	mov	w2, #0x2a                  	// #42
   862d0:	17fffba4 	b	85160 <assertion_failed>
   862d4:	d503201f 	nop
   862d8:	d503201f 	nop
   862dc:	d503201f 	nop

00000000000862e0 <CPtrList::GetFirst()>:
   862e0:	f9400000 	ldr	x0, [x0]
   862e4:	d65f03c0 	ret
   862e8:	d503201f 	nop
   862ec:	d503201f 	nop

00000000000862f0 <CPtrList::GetNext(TPtrListElement*)>:
   862f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   862f4:	910003fd 	mov	x29, sp
   862f8:	f9000bf3 	str	x19, [sp, #16]
   862fc:	aa0103f3 	mov	x19, x1
   86300:	b4000141 	cbz	x1, 86328 <CPtrList::GetNext(TPtrListElement*)+0x38>
   86304:	b9400261 	ldr	w1, [x19]
   86308:	5289a860 	mov	w0, #0x4d43                	// #19779
   8630c:	72aa0980 	movk	w0, #0x504c, lsl #16
   86310:	6b00003f 	cmp	w1, w0
   86314:	54000181 	b.ne	86344 <CPtrList::GetNext(TPtrListElement*)+0x54>  // b.any
   86318:	f9400a60 	ldr	x0, [x19, #16]
   8631c:	f9400bf3 	ldr	x19, [sp, #16]
   86320:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86324:	d65f03c0 	ret
   86328:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8632c:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86330:	910de021 	add	x1, x1, #0x378
   86334:	910e6000 	add	x0, x0, #0x398
   86338:	52800682 	mov	w2, #0x34                  	// #52
   8633c:	97fffb89 	bl	85160 <assertion_failed>
   86340:	17fffff1 	b	86304 <CPtrList::GetNext(TPtrListElement*)+0x14>
   86344:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86348:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8634c:	910de021 	add	x1, x1, #0x378
   86350:	910ea000 	add	x0, x0, #0x3a8
   86354:	528006a2 	mov	w2, #0x35                  	// #53
   86358:	97fffb82 	bl	85160 <assertion_failed>
   8635c:	17ffffef 	b	86318 <CPtrList::GetNext(TPtrListElement*)+0x28>

0000000000086360 <CPtrList::GetPtr(TPtrListElement*)>:
   86360:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86364:	910003fd 	mov	x29, sp
   86368:	f9000bf3 	str	x19, [sp, #16]
   8636c:	aa0103f3 	mov	x19, x1
   86370:	b4000141 	cbz	x1, 86398 <CPtrList::GetPtr(TPtrListElement*)+0x38>
   86374:	b9400261 	ldr	w1, [x19]
   86378:	5289a860 	mov	w0, #0x4d43                	// #19779
   8637c:	72aa0980 	movk	w0, #0x504c, lsl #16
   86380:	6b00003f 	cmp	w1, w0
   86384:	54000181 	b.ne	863b4 <CPtrList::GetPtr(TPtrListElement*)+0x54>  // b.any
   86388:	f9400e60 	ldr	x0, [x19, #24]
   8638c:	f9400bf3 	ldr	x19, [sp, #16]
   86390:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86394:	d65f03c0 	ret
   86398:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8639c:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   863a0:	910de021 	add	x1, x1, #0x378
   863a4:	910e6000 	add	x0, x0, #0x398
   863a8:	52800782 	mov	w2, #0x3c                  	// #60
   863ac:	97fffb6d 	bl	85160 <assertion_failed>
   863b0:	17fffff1 	b	86374 <CPtrList::GetPtr(TPtrListElement*)+0x14>
   863b4:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   863b8:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   863bc:	910de021 	add	x1, x1, #0x378
   863c0:	910ea000 	add	x0, x0, #0x3a8
   863c4:	528007a2 	mov	w2, #0x3d                  	// #61
   863c8:	97fffb66 	bl	85160 <assertion_failed>
   863cc:	17ffffef 	b	86388 <CPtrList::GetPtr(TPtrListElement*)+0x28>

00000000000863d0 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   863d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   863d4:	910003fd 	mov	x29, sp
   863d8:	f90013f5 	str	x21, [sp, #32]
   863dc:	aa0003f5 	mov	x21, x0
   863e0:	d2800400 	mov	x0, #0x20                  	// #32
   863e4:	a90153f3 	stp	x19, x20, [sp, #16]
   863e8:	aa0103f4 	mov	x20, x1
   863ec:	f9001fe2 	str	x2, [sp, #56]
   863f0:	97fff9d0 	bl	84b30 <operator new(unsigned long)>
   863f4:	f9401fe2 	ldr	x2, [sp, #56]
   863f8:	aa0003f3 	mov	x19, x0
   863fc:	5289a861 	mov	w1, #0x4d43                	// #19779
   86400:	72aa0981 	movk	w1, #0x504c, lsl #16
   86404:	f94002a0 	ldr	x0, [x21]
   86408:	b9000261 	str	w1, [x19]
   8640c:	f9000e62 	str	x2, [x19, #24]
   86410:	b40003e0 	cbz	x0, 8648c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xbc>
   86414:	b40004b4 	cbz	x20, 864a8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   86418:	b9400281 	ldr	w1, [x20]
   8641c:	5289a860 	mov	w0, #0x4d43                	// #19779
   86420:	72aa0980 	movk	w0, #0x504c, lsl #16
   86424:	6b00003f 	cmp	w1, w0
   86428:	540004e1 	b.ne	864c4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>  // b.any
   8642c:	f94002a0 	ldr	x0, [x21]
   86430:	eb14001f 	cmp	x0, x20
   86434:	540001e0 	b.eq	86470 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>  // b.none
   86438:	f9400680 	ldr	x0, [x20, #8]
   8643c:	a900d260 	stp	x0, x20, [x19, #8]
   86440:	b40000e0 	cbz	x0, 8645c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x8c>
   86444:	5289a861 	mov	w1, #0x4d43                	// #19779
   86448:	72aa0981 	movk	w1, #0x504c, lsl #16
   8644c:	b9400002 	ldr	w2, [x0]
   86450:	6b01005f 	cmp	w2, w1
   86454:	54000461 	b.ne	864e0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x110>  // b.any
   86458:	f9000813 	str	x19, [x0, #16]
   8645c:	f9000693 	str	x19, [x20, #8]
   86460:	a94153f3 	ldp	x19, x20, [sp, #16]
   86464:	f94013f5 	ldr	x21, [sp, #32]
   86468:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8646c:	d65f03c0 	ret
   86470:	f9000693 	str	x19, [x20, #8]
   86474:	f90002b3 	str	x19, [x21]
   86478:	a900d27f 	stp	xzr, x20, [x19, #8]
   8647c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86480:	f94013f5 	ldr	x21, [sp, #32]
   86484:	a8c47bfd 	ldp	x29, x30, [sp], #64
   86488:	d65f03c0 	ret
   8648c:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86490:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86494:	910de021 	add	x1, x1, #0x378
   86498:	910f4000 	add	x0, x0, #0x3d0
   8649c:	52800982 	mov	w2, #0x4c                  	// #76
   864a0:	97fffb30 	bl	85160 <assertion_failed>
   864a4:	b5fffbb4 	cbnz	x20, 86418 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x48>
   864a8:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   864ac:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   864b0:	910de021 	add	x1, x1, #0x378
   864b4:	910f8000 	add	x0, x0, #0x3e0
   864b8:	528009a2 	mov	w2, #0x4d                  	// #77
   864bc:	97fffb29 	bl	85160 <assertion_failed>
   864c0:	17ffffd6 	b	86418 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x48>
   864c4:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   864c8:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   864cc:	910de021 	add	x1, x1, #0x378
   864d0:	910fc000 	add	x0, x0, #0x3f0
   864d4:	528009c2 	mov	w2, #0x4e                  	// #78
   864d8:	97fffb22 	bl	85160 <assertion_failed>
   864dc:	17ffffd4 	b	8642c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x5c>
   864e0:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   864e4:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   864e8:	91106000 	add	x0, x0, #0x418
   864ec:	910de021 	add	x1, x1, #0x378
   864f0:	52800c02 	mov	w2, #0x60                  	// #96
   864f4:	97fffb1b 	bl	85160 <assertion_failed>
   864f8:	f9400680 	ldr	x0, [x20, #8]
   864fc:	f9000813 	str	x19, [x0, #16]
   86500:	17ffffd7 	b	8645c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x8c>
   86504:	d503201f 	nop
   86508:	d503201f 	nop
   8650c:	d503201f 	nop

0000000000086510 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   86510:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   86514:	910003fd 	mov	x29, sp
   86518:	f90013f5 	str	x21, [sp, #32]
   8651c:	aa0003f5 	mov	x21, x0
   86520:	d2800400 	mov	x0, #0x20                  	// #32
   86524:	a90153f3 	stp	x19, x20, [sp, #16]
   86528:	aa0103f4 	mov	x20, x1
   8652c:	f9001fe2 	str	x2, [sp, #56]
   86530:	97fff980 	bl	84b30 <operator new(unsigned long)>
   86534:	f9401fe2 	ldr	x2, [sp, #56]
   86538:	aa0003f3 	mov	x19, x0
   8653c:	5289a860 	mov	w0, #0x4d43                	// #19779
   86540:	72aa0980 	movk	w0, #0x504c, lsl #16
   86544:	b9000260 	str	w0, [x19]
   86548:	f94002a0 	ldr	x0, [x21]
   8654c:	f9000e62 	str	x2, [x19, #24]
   86550:	b40002b4 	cbz	x20, 865a4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x94>
   86554:	b4000360 	cbz	x0, 865c0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb0>
   86558:	b9400281 	ldr	w1, [x20]
   8655c:	5289a860 	mov	w0, #0x4d43                	// #19779
   86560:	72aa0980 	movk	w0, #0x504c, lsl #16
   86564:	6b00003f 	cmp	w1, w0
   86568:	540003a1 	b.ne	865dc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>  // b.any
   8656c:	f9400a80 	ldr	x0, [x20, #16]
   86570:	a9008274 	stp	x20, x0, [x19, #8]
   86574:	b40000e0 	cbz	x0, 86590 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x80>
   86578:	5289a861 	mov	w1, #0x4d43                	// #19779
   8657c:	72aa0981 	movk	w1, #0x504c, lsl #16
   86580:	b9400002 	ldr	w2, [x0]
   86584:	6b01005f 	cmp	w2, w1
   86588:	54000381 	b.ne	865f8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>  // b.any
   8658c:	f9000413 	str	x19, [x0, #8]
   86590:	f9000a93 	str	x19, [x20, #16]
   86594:	a94153f3 	ldp	x19, x20, [sp, #16]
   86598:	f94013f5 	ldr	x21, [sp, #32]
   8659c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   865a0:	d65f03c0 	ret
   865a4:	b50003c0 	cbnz	x0, 8661c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x10c>
   865a8:	f90002b3 	str	x19, [x21]
   865ac:	a900fe7f 	stp	xzr, xzr, [x19, #8]
   865b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   865b4:	f94013f5 	ldr	x21, [sp, #32]
   865b8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   865bc:	d65f03c0 	ret
   865c0:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   865c4:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   865c8:	910de021 	add	x1, x1, #0x378
   865cc:	910f4000 	add	x0, x0, #0x3d0
   865d0:	52800fa2 	mov	w2, #0x7d                  	// #125
   865d4:	97fffae3 	bl	85160 <assertion_failed>
   865d8:	17ffffe0 	b	86558 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x48>
   865dc:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   865e0:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   865e4:	910de021 	add	x1, x1, #0x378
   865e8:	91110000 	add	x0, x0, #0x440
   865ec:	52800fc2 	mov	w2, #0x7e                  	// #126
   865f0:	97fffadc 	bl	85160 <assertion_failed>
   865f4:	17ffffde 	b	8656c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x5c>
   865f8:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   865fc:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86600:	9111a000 	add	x0, x0, #0x468
   86604:	910de021 	add	x1, x1, #0x378
   86608:	528010a2 	mov	w2, #0x85                  	// #133
   8660c:	97fffad5 	bl	85160 <assertion_failed>
   86610:	f9400a80 	ldr	x0, [x20, #16]
   86614:	f9000413 	str	x19, [x0, #8]
   86618:	17ffffde 	b	86590 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x80>
   8661c:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86620:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86624:	910de021 	add	x1, x1, #0x378
   86628:	910e2000 	add	x0, x0, #0x388
   8662c:	52800e82 	mov	w2, #0x74                  	// #116
   86630:	97fffacc 	bl	85160 <assertion_failed>
   86634:	17ffffdd 	b	865a8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
   86638:	d503201f 	nop
   8663c:	d503201f 	nop

0000000000086640 <CPtrList::Remove(TPtrListElement*)>:
   86640:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86644:	910003fd 	mov	x29, sp
   86648:	a90153f3 	stp	x19, x20, [sp, #16]
   8664c:	aa0103f3 	mov	x19, x1
   86650:	aa0003f4 	mov	x20, x0
   86654:	b40005e1 	cbz	x1, 86710 <CPtrList::Remove(TPtrListElement*)+0xd0>
   86658:	5289a860 	mov	w0, #0x4d43                	// #19779
   8665c:	72aa0980 	movk	w0, #0x504c, lsl #16
   86660:	b9400261 	ldr	w1, [x19]
   86664:	6b00003f 	cmp	w1, w0
   86668:	54000621 	b.ne	8672c <CPtrList::Remove(TPtrListElement*)+0xec>  // b.any
   8666c:	f9400280 	ldr	x0, [x20]
   86670:	eb13001f 	cmp	x0, x19
   86674:	54000300 	b.eq	866d4 <CPtrList::Remove(TPtrListElement*)+0x94>  // b.none
   86678:	f9400660 	ldr	x0, [x19, #8]
   8667c:	b4000660 	cbz	x0, 86748 <CPtrList::Remove(TPtrListElement*)+0x108>
   86680:	b9400002 	ldr	w2, [x0]
   86684:	5289a861 	mov	w1, #0x4d43                	// #19779
   86688:	72aa0981 	movk	w1, #0x504c, lsl #16
   8668c:	6b01005f 	cmp	w2, w1
   86690:	540006c1 	b.ne	86768 <CPtrList::Remove(TPtrListElement*)+0x128>  // b.any
   86694:	f9400a61 	ldr	x1, [x19, #16]
   86698:	f9000801 	str	x1, [x0, #16]
   8669c:	b4000101 	cbz	x1, 866bc <CPtrList::Remove(TPtrListElement*)+0x7c>
   866a0:	b9400022 	ldr	w2, [x1]
   866a4:	5289a861 	mov	w1, #0x4d43                	// #19779
   866a8:	72aa0981 	movk	w1, #0x504c, lsl #16
   866ac:	6b01005f 	cmp	w2, w1
   866b0:	540007e1 	b.ne	867ac <CPtrList::Remove(TPtrListElement*)+0x16c>  // b.any
   866b4:	f9400a61 	ldr	x1, [x19, #16]
   866b8:	f9000420 	str	x0, [x1, #8]
   866bc:	aa1303e0 	mov	x0, x19
   866c0:	d2800401 	mov	x1, #0x20                  	// #32
   866c4:	b900027f 	str	wzr, [x19]
   866c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   866cc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   866d0:	17fff928 	b	84b70 <operator delete(void*, unsigned long)>
   866d4:	f9400a60 	ldr	x0, [x19, #16]
   866d8:	f9000280 	str	x0, [x20]
   866dc:	b4ffff00 	cbz	x0, 866bc <CPtrList::Remove(TPtrListElement*)+0x7c>
   866e0:	b9400002 	ldr	w2, [x0]
   866e4:	5289a861 	mov	w1, #0x4d43                	// #19779
   866e8:	72aa0981 	movk	w1, #0x504c, lsl #16
   866ec:	6b01005f 	cmp	w2, w1
   866f0:	540004c1 	b.ne	86788 <CPtrList::Remove(TPtrListElement*)+0x148>  // b.any
   866f4:	f900041f 	str	xzr, [x0, #8]
   866f8:	aa1303e0 	mov	x0, x19
   866fc:	d2800401 	mov	x1, #0x20                  	// #32
   86700:	b900027f 	str	wzr, [x19]
   86704:	a94153f3 	ldp	x19, x20, [sp, #16]
   86708:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8670c:	17fff919 	b	84b70 <operator delete(void*, unsigned long)>
   86710:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86714:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86718:	910de021 	add	x1, x1, #0x378
   8671c:	910e6000 	add	x0, x0, #0x398
   86720:	528011e2 	mov	w2, #0x8f                  	// #143
   86724:	97fffa8f 	bl	85160 <assertion_failed>
   86728:	17ffffcc 	b	86658 <CPtrList::Remove(TPtrListElement*)+0x18>
   8672c:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86730:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86734:	910de021 	add	x1, x1, #0x378
   86738:	910ea000 	add	x0, x0, #0x3a8
   8673c:	52801202 	mov	w2, #0x90                  	// #144
   86740:	97fffa88 	bl	85160 <assertion_failed>
   86744:	17ffffca 	b	8666c <CPtrList::Remove(TPtrListElement*)+0x2c>
   86748:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8674c:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86750:	91132000 	add	x0, x0, #0x4c8
   86754:	910de021 	add	x1, x1, #0x378
   86758:	528013c2 	mov	w2, #0x9e                  	// #158
   8675c:	97fffa81 	bl	85160 <assertion_failed>
   86760:	f9400660 	ldr	x0, [x19, #8]
   86764:	17ffffc7 	b	86680 <CPtrList::Remove(TPtrListElement*)+0x40>
   86768:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8676c:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86770:	91138000 	add	x0, x0, #0x4e0
   86774:	910de021 	add	x1, x1, #0x378
   86778:	528013e2 	mov	w2, #0x9f                  	// #159
   8677c:	97fffa79 	bl	85160 <assertion_failed>
   86780:	f9400660 	ldr	x0, [x19, #8]
   86784:	17ffffc4 	b	86694 <CPtrList::Remove(TPtrListElement*)+0x54>
   86788:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8678c:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86790:	91126000 	add	x0, x0, #0x498
   86794:	910de021 	add	x1, x1, #0x378
   86798:	52801302 	mov	w2, #0x98                  	// #152
   8679c:	97fffa71 	bl	85160 <assertion_failed>
   867a0:	f9400a60 	ldr	x0, [x19, #16]
   867a4:	f900041f 	str	xzr, [x0, #8]
   867a8:	17ffffd4 	b	866f8 <CPtrList::Remove(TPtrListElement*)+0xb8>
   867ac:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   867b0:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   867b4:	91126000 	add	x0, x0, #0x498
   867b8:	910de021 	add	x1, x1, #0x378
   867bc:	52801482 	mov	w2, #0xa4                  	// #164
   867c0:	97fffa68 	bl	85160 <assertion_failed>
   867c4:	f9400660 	ldr	x0, [x19, #8]
   867c8:	17ffffbb 	b	866b4 <CPtrList::Remove(TPtrListElement*)+0x74>
   867cc:	d503201f 	nop

00000000000867d0 <CPtrList::Find(void*)>:
   867d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   867d4:	910003fd 	mov	x29, sp
   867d8:	a90153f3 	stp	x19, x20, [sp, #16]
   867dc:	f9400013 	ldr	x19, [x0]
   867e0:	b4000453 	cbz	x19, 86868 <CPtrList::Find(void*)+0x98>
   867e4:	aa0103f4 	mov	x20, x1
   867e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   867ec:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   867f0:	910ea016 	add	x22, x0, #0x3a8
   867f4:	5289a875 	mov	w21, #0x4d43                	// #19779
   867f8:	72aa0995 	movk	w21, #0x504c, lsl #16
   867fc:	f9001bf7 	str	x23, [sp, #48]
   86800:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86804:	910de037 	add	x23, x1, #0x378
   86808:	14000006 	b	86820 <CPtrList::Find(void*)+0x50>
   8680c:	f9400e60 	ldr	x0, [x19, #24]
   86810:	eb14001f 	cmp	x0, x20
   86814:	540001a0 	b.eq	86848 <CPtrList::Find(void*)+0x78>  // b.none
   86818:	f9400a73 	ldr	x19, [x19, #16]
   8681c:	b4000233 	cbz	x19, 86860 <CPtrList::Find(void*)+0x90>
   86820:	b9400260 	ldr	w0, [x19]
   86824:	6b15001f 	cmp	w0, w21
   86828:	54ffff20 	b.eq	8680c <CPtrList::Find(void*)+0x3c>  // b.none
   8682c:	aa1603e0 	mov	x0, x22
   86830:	52801662 	mov	w2, #0xb3                  	// #179
   86834:	aa1703e1 	mov	x1, x23
   86838:	97fffa4a 	bl	85160 <assertion_failed>
   8683c:	f9400e60 	ldr	x0, [x19, #24]
   86840:	eb14001f 	cmp	x0, x20
   86844:	54fffea1 	b.ne	86818 <CPtrList::Find(void*)+0x48>  // b.any
   86848:	aa1303e0 	mov	x0, x19
   8684c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86850:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86854:	f9401bf7 	ldr	x23, [sp, #48]
   86858:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8685c:	d65f03c0 	ret
   86860:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86864:	f9401bf7 	ldr	x23, [sp, #48]
   86868:	d2800013 	mov	x19, #0x0                   	// #0
   8686c:	aa1303e0 	mov	x0, x19
   86870:	a94153f3 	ldp	x19, x20, [sp, #16]
   86874:	a8c47bfd 	ldp	x29, x30, [sp], #64
   86878:	d65f03c0 	ret
   8687c:	00000000 	.inst	0x00000000 ; undefined

0000000000086880 <CString::~CString()>:
   86880:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86884:	91148021 	add	x1, x1, #0x520
   86888:	f9400402 	ldr	x2, [x0, #8]
   8688c:	f9000001 	str	x1, [x0]
   86890:	b4000062 	cbz	x2, 8689c <CString::~CString()+0x1c>
   86894:	aa0203e0 	mov	x0, x2
   86898:	17fff8b2 	b	84b60 <operator delete[](void*)>
   8689c:	d65f03c0 	ret

00000000000868a0 <CString::~CString()>:
   868a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   868a4:	910003fd 	mov	x29, sp
   868a8:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   868ac:	91148021 	add	x1, x1, #0x520
   868b0:	f9000bf3 	str	x19, [sp, #16]
   868b4:	aa0003f3 	mov	x19, x0
   868b8:	f9400400 	ldr	x0, [x0, #8]
   868bc:	f9000261 	str	x1, [x19]
   868c0:	b4000040 	cbz	x0, 868c8 <CString::~CString()+0x28>
   868c4:	97fff8a7 	bl	84b60 <operator delete[](void*)>
   868c8:	aa1303e0 	mov	x0, x19
   868cc:	d2800401 	mov	x1, #0x20                  	// #32
   868d0:	f9400bf3 	ldr	x19, [sp, #16]
   868d4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   868d8:	17fff8a6 	b	84b70 <operator delete(void*, unsigned long)>
   868dc:	d503201f 	nop

00000000000868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>:
   868e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   868e4:	910003fd 	mov	x29, sp
   868e8:	a90153f3 	stp	x19, x20, [sp, #16]
   868ec:	f9400403 	ldr	x3, [x0, #8]
   868f0:	f9400c14 	ldr	x20, [x0, #24]
   868f4:	b9401002 	ldr	w2, [x0, #16]
   868f8:	cb030294 	sub	x20, x20, x3
   868fc:	8b010281 	add	x1, x20, x1
   86900:	91000423 	add	x3, x1, #0x1
   86904:	eb02007f 	cmp	x3, x2
   86908:	54000088 	b.hi	86918 <CString::ReserveSpace(unsigned long) [clone .part.0]+0x38>  // b.pmore
   8690c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86910:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86914:	d65f03c0 	ret
   86918:	a9025bf5 	stp	x21, x22, [sp, #32]
   8691c:	91010435 	add	x21, x1, #0x41
   86920:	aa0003f3 	mov	x19, x0
   86924:	aa1503e0 	mov	x0, x21
   86928:	97fff886 	bl	84b40 <operator new[](unsigned long)>
   8692c:	f9400e61 	ldr	x1, [x19, #24]
   86930:	aa0003f6 	mov	x22, x0
   86934:	3900003f 	strb	wzr, [x1]
   86938:	f9400661 	ldr	x1, [x19, #8]
   8693c:	94000579 	bl	87f20 <strcpy>
   86940:	f9400660 	ldr	x0, [x19, #8]
   86944:	b4000040 	cbz	x0, 8694c <CString::ReserveSpace(unsigned long) [clone .part.0]+0x6c>
   86948:	97fff886 	bl	84b60 <operator delete[](void*)>
   8694c:	8b1402d4 	add	x20, x22, x20
   86950:	f9000676 	str	x22, [x19, #8]
   86954:	b9001275 	str	w21, [x19, #16]
   86958:	f9000e74 	str	x20, [x19, #24]
   8695c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86960:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86964:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86968:	d65f03c0 	ret
   8696c:	d503201f 	nop

0000000000086970 <CString::CString()>:
   86970:	90000021 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86974:	91148021 	add	x1, x1, #0x520
   86978:	b900101f 	str	wzr, [x0, #16]
   8697c:	a9007c01 	stp	x1, xzr, [x0]
   86980:	d65f03c0 	ret
   86984:	d503201f 	nop
   86988:	d503201f 	nop
   8698c:	d503201f 	nop

0000000000086990 <CString::CString(char const*)>:
   86990:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86994:	910003fd 	mov	x29, sp
   86998:	90000022 	adrp	x2, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   8699c:	91148042 	add	x2, x2, #0x520
   869a0:	f9000bf3 	str	x19, [sp, #16]
   869a4:	aa0003f3 	mov	x19, x0
   869a8:	aa0103e0 	mov	x0, x1
   869ac:	f90017e1 	str	x1, [sp, #40]
   869b0:	f9000262 	str	x2, [x19]
   869b4:	940004ef 	bl	87d70 <strlen>
   869b8:	11000400 	add	w0, w0, #0x1
   869bc:	b9001260 	str	w0, [x19, #16]
   869c0:	97fff860 	bl	84b40 <operator new[](unsigned long)>
   869c4:	f9000660 	str	x0, [x19, #8]
   869c8:	f9400bf3 	ldr	x19, [sp, #16]
   869cc:	f94017e1 	ldr	x1, [sp, #40]
   869d0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   869d4:	14000553 	b	87f20 <strcpy>
   869d8:	d503201f 	nop
   869dc:	d503201f 	nop

00000000000869e0 <CString::operator char const*() const>:
   869e0:	f9400401 	ldr	x1, [x0, #8]
   869e4:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   869e8:	91034000 	add	x0, x0, #0xd0
   869ec:	f100003f 	cmp	x1, #0x0
   869f0:	9a810000 	csel	x0, x0, x1, eq  // eq = none
   869f4:	d65f03c0 	ret
   869f8:	d503201f 	nop
   869fc:	d503201f 	nop

0000000000086a00 <CString::operator=(char const*)>:
   86a00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86a04:	910003fd 	mov	x29, sp
   86a08:	f9000bf3 	str	x19, [sp, #16]
   86a0c:	aa0003f3 	mov	x19, x0
   86a10:	f9400400 	ldr	x0, [x0, #8]
   86a14:	b4000080 	cbz	x0, 86a24 <CString::operator=(char const*)+0x24>
   86a18:	f90017e1 	str	x1, [sp, #40]
   86a1c:	97fff851 	bl	84b60 <operator delete[](void*)>
   86a20:	f94017e1 	ldr	x1, [sp, #40]
   86a24:	aa0103e0 	mov	x0, x1
   86a28:	f90017e1 	str	x1, [sp, #40]
   86a2c:	940004d1 	bl	87d70 <strlen>
   86a30:	11000400 	add	w0, w0, #0x1
   86a34:	b9001260 	str	w0, [x19, #16]
   86a38:	97fff842 	bl	84b40 <operator new[](unsigned long)>
   86a3c:	f9000660 	str	x0, [x19, #8]
   86a40:	f94017e1 	ldr	x1, [sp, #40]
   86a44:	94000537 	bl	87f20 <strcpy>
   86a48:	f9400660 	ldr	x0, [x19, #8]
   86a4c:	f9400bf3 	ldr	x19, [sp, #16]
   86a50:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86a54:	d65f03c0 	ret
   86a58:	d503201f 	nop
   86a5c:	d503201f 	nop

0000000000086a60 <CString::operator=(CString const&)>:
   86a60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86a64:	910003fd 	mov	x29, sp
   86a68:	a90153f3 	stp	x19, x20, [sp, #16]
   86a6c:	aa0003f3 	mov	x19, x0
   86a70:	f9400400 	ldr	x0, [x0, #8]
   86a74:	f90013f5 	str	x21, [sp, #32]
   86a78:	aa0103f5 	mov	x21, x1
   86a7c:	b4000040 	cbz	x0, 86a84 <CString::operator=(CString const&)+0x24>
   86a80:	97fff838 	bl	84b60 <operator delete[](void*)>
   86a84:	f94006a0 	ldr	x0, [x21, #8]
   86a88:	90000034 	adrp	x20, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86a8c:	91034294 	add	x20, x20, #0xd0
   86a90:	f100001f 	cmp	x0, #0x0
   86a94:	9a800280 	csel	x0, x20, x0, eq  // eq = none
   86a98:	940004b6 	bl	87d70 <strlen>
   86a9c:	11000400 	add	w0, w0, #0x1
   86aa0:	b9001260 	str	w0, [x19, #16]
   86aa4:	97fff827 	bl	84b40 <operator new[](unsigned long)>
   86aa8:	f9000660 	str	x0, [x19, #8]
   86aac:	f94006a1 	ldr	x1, [x21, #8]
   86ab0:	f100003f 	cmp	x1, #0x0
   86ab4:	9a810281 	csel	x1, x20, x1, eq  // eq = none
   86ab8:	9400051a 	bl	87f20 <strcpy>
   86abc:	aa1303e0 	mov	x0, x19
   86ac0:	a94153f3 	ldp	x19, x20, [sp, #16]
   86ac4:	f94013f5 	ldr	x21, [sp, #32]
   86ac8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86acc:	d65f03c0 	ret

0000000000086ad0 <CString::GetLength() const>:
   86ad0:	f9400400 	ldr	x0, [x0, #8]
   86ad4:	b4000040 	cbz	x0, 86adc <CString::GetLength() const+0xc>
   86ad8:	140004a6 	b	87d70 <strlen>
   86adc:	d2800000 	mov	x0, #0x0                   	// #0
   86ae0:	d65f03c0 	ret
   86ae4:	d503201f 	nop
   86ae8:	d503201f 	nop
   86aec:	d503201f 	nop

0000000000086af0 <CString::Append(char const*)>:
   86af0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86af4:	910003fd 	mov	x29, sp
   86af8:	52800022 	mov	w2, #0x1                   	// #1
   86afc:	a90153f3 	stp	x19, x20, [sp, #16]
   86b00:	aa0003f3 	mov	x19, x0
   86b04:	f9400400 	ldr	x0, [x0, #8]
   86b08:	f90013f5 	str	x21, [sp, #32]
   86b0c:	aa0103f5 	mov	x21, x1
   86b10:	b9001262 	str	w2, [x19, #16]
   86b14:	b40000a0 	cbz	x0, 86b28 <CString::Append(char const*)+0x38>
   86b18:	94000496 	bl	87d70 <strlen>
   86b1c:	b9401261 	ldr	w1, [x19, #16]
   86b20:	0b000020 	add	w0, w1, w0
   86b24:	b9001260 	str	w0, [x19, #16]
   86b28:	aa1503e0 	mov	x0, x21
   86b2c:	94000491 	bl	87d70 <strlen>
   86b30:	b9401261 	ldr	w1, [x19, #16]
   86b34:	0b000020 	add	w0, w1, w0
   86b38:	b9001260 	str	w0, [x19, #16]
   86b3c:	97fff801 	bl	84b40 <operator new[](unsigned long)>
   86b40:	f9400661 	ldr	x1, [x19, #8]
   86b44:	aa0003f4 	mov	x20, x0
   86b48:	b40001a1 	cbz	x1, 86b7c <CString::Append(char const*)+0x8c>
   86b4c:	940004f5 	bl	87f20 <strcpy>
   86b50:	f9400660 	ldr	x0, [x19, #8]
   86b54:	b4000040 	cbz	x0, 86b5c <CString::Append(char const*)+0x6c>
   86b58:	97fff802 	bl	84b60 <operator delete[](void*)>
   86b5c:	aa1503e1 	mov	x1, x21
   86b60:	aa1403e0 	mov	x0, x20
   86b64:	9400050b 	bl	87f90 <strcat>
   86b68:	f94013f5 	ldr	x21, [sp, #32]
   86b6c:	f9000674 	str	x20, [x19, #8]
   86b70:	a94153f3 	ldp	x19, x20, [sp, #16]
   86b74:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86b78:	d65f03c0 	ret
   86b7c:	aa1503e1 	mov	x1, x21
   86b80:	3900001f 	strb	wzr, [x0]
   86b84:	aa1403e0 	mov	x0, x20
   86b88:	94000502 	bl	87f90 <strcat>
   86b8c:	f94013f5 	ldr	x21, [sp, #32]
   86b90:	f9000674 	str	x20, [x19, #8]
   86b94:	a94153f3 	ldp	x19, x20, [sp, #16]
   86b98:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86b9c:	d65f03c0 	ret

0000000000086ba0 <CString::Compare(char const*) const>:
   86ba0:	f9400400 	ldr	x0, [x0, #8]
   86ba4:	1400047f 	b	87da0 <strcmp>
   86ba8:	d503201f 	nop
   86bac:	d503201f 	nop

0000000000086bb0 <CString::Find(char) const>:
   86bb0:	f9400402 	ldr	x2, [x0, #8]
   86bb4:	13001c21 	sxtb	w1, w1
   86bb8:	39c00040 	ldrsb	w0, [x2]
   86bbc:	34000160 	cbz	w0, 86be8 <CString::Find(char) const+0x38>
   86bc0:	6b00003f 	cmp	w1, w0
   86bc4:	54000160 	b.eq	86bf0 <CString::Find(char) const+0x40>  // b.none
   86bc8:	52800024 	mov	w4, #0x1                   	// #1
   86bcc:	4b020084 	sub	w4, w4, w2
   86bd0:	14000003 	b	86bdc <CString::Find(char) const+0x2c>
   86bd4:	6b01007f 	cmp	w3, w1
   86bd8:	540000a0 	b.eq	86bec <CString::Find(char) const+0x3c>  // b.none
   86bdc:	0b020080 	add	w0, w4, w2
   86be0:	38c01c43 	ldrsb	w3, [x2, #1]!
   86be4:	35ffff83 	cbnz	w3, 86bd4 <CString::Find(char) const+0x24>
   86be8:	12800000 	mov	w0, #0xffffffff            	// #-1
   86bec:	d65f03c0 	ret
   86bf0:	52800000 	mov	w0, #0x0                   	// #0
   86bf4:	d65f03c0 	ret
   86bf8:	d503201f 	nop
   86bfc:	d503201f 	nop

0000000000086c00 <CString::PutChar(char, unsigned long)>:
   86c00:	b40002e2 	cbz	x2, 86c5c <CString::PutChar(char, unsigned long)+0x5c>
   86c04:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86c08:	910003fd 	mov	x29, sp
   86c0c:	f90013f5 	str	x21, [sp, #32]
   86c10:	13001c35 	sxtb	w21, w1
   86c14:	aa0203e1 	mov	x1, x2
   86c18:	a90153f3 	stp	x19, x20, [sp, #16]
   86c1c:	aa0203f3 	mov	x19, x2
   86c20:	aa0003f4 	mov	x20, x0
   86c24:	97ffff2f 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   86c28:	d1000661 	sub	x1, x19, #0x1
   86c2c:	d503201f 	nop
   86c30:	f9400e82 	ldr	x2, [x20, #24]
   86c34:	d1000421 	sub	x1, x1, #0x1
   86c38:	b100043f 	cmn	x1, #0x1
   86c3c:	91000440 	add	x0, x2, #0x1
   86c40:	f9000e80 	str	x0, [x20, #24]
   86c44:	39000055 	strb	w21, [x2]
   86c48:	54ffff41 	b.ne	86c30 <CString::PutChar(char, unsigned long)+0x30>  // b.any
   86c4c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86c50:	f94013f5 	ldr	x21, [sp, #32]
   86c54:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86c58:	d65f03c0 	ret
   86c5c:	d65f03c0 	ret

0000000000086c60 <CString::PutString(char const*)>:
   86c60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86c64:	910003fd 	mov	x29, sp
   86c68:	a90153f3 	stp	x19, x20, [sp, #16]
   86c6c:	aa0003f3 	mov	x19, x0
   86c70:	aa0103e0 	mov	x0, x1
   86c74:	f90013f5 	str	x21, [sp, #32]
   86c78:	aa0103f5 	mov	x21, x1
   86c7c:	9400043d 	bl	87d70 <strlen>
   86c80:	aa0003f4 	mov	x20, x0
   86c84:	b4000080 	cbz	x0, 86c94 <CString::PutString(char const*)+0x34>
   86c88:	aa0003e1 	mov	x1, x0
   86c8c:	aa1303e0 	mov	x0, x19
   86c90:	97ffff14 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   86c94:	aa1503e1 	mov	x1, x21
   86c98:	f9400e60 	ldr	x0, [x19, #24]
   86c9c:	940004a1 	bl	87f20 <strcpy>
   86ca0:	f9400e60 	ldr	x0, [x19, #24]
   86ca4:	f94013f5 	ldr	x21, [sp, #32]
   86ca8:	8b140000 	add	x0, x0, x20
   86cac:	f9000e60 	str	x0, [x19, #24]
   86cb0:	a94153f3 	ldp	x19, x20, [sp, #16]
   86cb4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86cb8:	d65f03c0 	ret
   86cbc:	d503201f 	nop

0000000000086cc0 <CString::Replace(char const*, char const*)>:
   86cc0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   86cc4:	910003fd 	mov	x29, sp
   86cc8:	a9025bf5 	stp	x21, x22, [sp, #32]
   86ccc:	52800016 	mov	w22, #0x0                   	// #0
   86cd0:	39c00023 	ldrsb	w3, [x1]
   86cd4:	350000a3 	cbnz	w3, 86ce8 <CString::Replace(char const*, char const*)+0x28>
   86cd8:	2a1603e0 	mov	w0, w22
   86cdc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86ce0:	a8c77bfd 	ldp	x29, x30, [sp], #112
   86ce4:	d65f03c0 	ret
   86ce8:	a90153f3 	stp	x19, x20, [sp, #16]
   86cec:	aa0003f4 	mov	x20, x0
   86cf0:	aa0103f5 	mov	x21, x1
   86cf4:	910143e0 	add	x0, sp, #0x50
   86cf8:	f9400681 	ldr	x1, [x20, #8]
   86cfc:	a90363f7 	stp	x23, x24, [sp, #48]
   86d00:	aa0203f7 	mov	x23, x2
   86d04:	f90023f9 	str	x25, [sp, #64]
   86d08:	97ffff22 	bl	86990 <CString::CString(char const*)>
   86d0c:	f9400680 	ldr	x0, [x20, #8]
   86d10:	b4000040 	cbz	x0, 86d18 <CString::Replace(char const*, char const*)+0x58>
   86d14:	97fff793 	bl	84b60 <operator delete[](void*)>
   86d18:	52800801 	mov	w1, #0x40                  	// #64
   86d1c:	d2800800 	mov	x0, #0x40                  	// #64
   86d20:	52800016 	mov	w22, #0x0                   	// #0
   86d24:	b9001281 	str	w1, [x20, #16]
   86d28:	97fff786 	bl	84b40 <operator new[](unsigned long)>
   86d2c:	f9402ff3 	ldr	x19, [sp, #88]
   86d30:	f9000680 	str	x0, [x20, #8]
   86d34:	f9000e80 	str	x0, [x20, #24]
   86d38:	39c002a1 	ldrsb	w1, [x21]
   86d3c:	aa1303e0 	mov	x0, x19
   86d40:	940004a4 	bl	87fd0 <strchr>
   86d44:	aa0003f8 	mov	x24, x0
   86d48:	b4000360 	cbz	x0, 86db4 <CString::Replace(char const*, char const*)+0xf4>
   86d4c:	eb00027f 	cmp	x19, x0
   86d50:	54000563 	b.cc	86dfc <CString::Replace(char const*, char const*)+0x13c>  // b.lo, b.ul, b.last
   86d54:	39c006a0 	ldrsb	w0, [x21, #1]
   86d58:	910006a5 	add	x5, x21, #0x1
   86d5c:	91000703 	add	x3, x24, #0x1
   86d60:	34000160 	cbz	w0, 86d8c <CString::Replace(char const*, char const*)+0xcc>
   86d64:	39c00701 	ldrsb	w1, [x24, #1]
   86d68:	6b00003f 	cmp	w1, w0
   86d6c:	540000a0 	b.eq	86d80 <CString::Replace(char const*, char const*)+0xc0>  // b.none
   86d70:	1400002f 	b	86e2c <CString::Replace(char const*, char const*)+0x16c>
   86d74:	39c00066 	ldrsb	w6, [x3]
   86d78:	6b0400df 	cmp	w6, w4
   86d7c:	54000581 	b.ne	86e2c <CString::Replace(char const*, char const*)+0x16c>  // b.any
   86d80:	38c01ca4 	ldrsb	w4, [x5, #1]!
   86d84:	91000463 	add	x3, x3, #0x1
   86d88:	35ffff64 	cbnz	w4, 86d74 <CString::Replace(char const*, char const*)+0xb4>
   86d8c:	aa1703e1 	mov	x1, x23
   86d90:	aa1403e0 	mov	x0, x20
   86d94:	aa0303f3 	mov	x19, x3
   86d98:	110006d6 	add	w22, w22, #0x1
   86d9c:	97ffffb1 	bl	86c60 <CString::PutString(char const*)>
   86da0:	39c002a1 	ldrsb	w1, [x21]
   86da4:	aa1303e0 	mov	x0, x19
   86da8:	9400048a 	bl	87fd0 <strchr>
   86dac:	aa0003f8 	mov	x24, x0
   86db0:	b5fffce0 	cbnz	x0, 86d4c <CString::Replace(char const*, char const*)+0x8c>
   86db4:	aa1303e1 	mov	x1, x19
   86db8:	aa1403e0 	mov	x0, x20
   86dbc:	97ffffa9 	bl	86c60 <CString::PutString(char const*)>
   86dc0:	f9400e81 	ldr	x1, [x20, #24]
   86dc4:	90000020 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   86dc8:	91148000 	add	x0, x0, #0x520
   86dcc:	3900003f 	strb	wzr, [x1]
   86dd0:	f9002be0 	str	x0, [sp, #80]
   86dd4:	f9402fe0 	ldr	x0, [sp, #88]
   86dd8:	b40003c0 	cbz	x0, 86e50 <CString::Replace(char const*, char const*)+0x190>
   86ddc:	97fff761 	bl	84b60 <operator delete[](void*)>
   86de0:	2a1603e0 	mov	w0, w22
   86de4:	a94153f3 	ldp	x19, x20, [sp, #16]
   86de8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86dec:	a94363f7 	ldp	x23, x24, [sp, #48]
   86df0:	f94023f9 	ldr	x25, [sp, #64]
   86df4:	a8c77bfd 	ldp	x29, x30, [sp], #112
   86df8:	d65f03c0 	ret
   86dfc:	d2800021 	mov	x1, #0x1                   	// #1
   86e00:	aa1403e0 	mov	x0, x20
   86e04:	38c01679 	ldrsb	w25, [x19], #1
   86e08:	97fffeb6 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   86e0c:	f9400e80 	ldr	x0, [x20, #24]
   86e10:	eb13031f 	cmp	x24, x19
   86e14:	91000401 	add	x1, x0, #0x1
   86e18:	f9000e81 	str	x1, [x20, #24]
   86e1c:	39000019 	strb	w25, [x0]
   86e20:	54fffee1 	b.ne	86dfc <CString::Replace(char const*, char const*)+0x13c>  // b.any
   86e24:	aa1803f3 	mov	x19, x24
   86e28:	17ffffcb 	b	86d54 <CString::Replace(char const*, char const*)+0x94>
   86e2c:	d2800021 	mov	x1, #0x1                   	// #1
   86e30:	aa1403e0 	mov	x0, x20
   86e34:	38c01678 	ldrsb	w24, [x19], #1
   86e38:	97fffeaa 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   86e3c:	f9400e80 	ldr	x0, [x20, #24]
   86e40:	91000401 	add	x1, x0, #0x1
   86e44:	f9000e81 	str	x1, [x20, #24]
   86e48:	39000018 	strb	w24, [x0]
   86e4c:	17ffffbb 	b	86d38 <CString::Replace(char const*, char const*)+0x78>
   86e50:	2a1603e0 	mov	w0, w22
   86e54:	a94153f3 	ldp	x19, x20, [sp, #16]
   86e58:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86e5c:	a94363f7 	ldp	x23, x24, [sp, #48]
   86e60:	f94023f9 	ldr	x25, [sp, #64]
   86e64:	a8c77bfd 	ldp	x29, x30, [sp], #112
   86e68:	d65f03c0 	ret
   86e6c:	d503201f 	nop

0000000000086e70 <CString::ReserveSpace(unsigned long)>:
   86e70:	b4000041 	cbz	x1, 86e78 <CString::ReserveSpace(unsigned long)+0x8>
   86e74:	17fffe9b 	b	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   86e78:	d65f03c0 	ret
   86e7c:	d503201f 	nop

0000000000086e80 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   86e80:	2a0203e2 	mov	w2, w2
   86e84:	12001c63 	and	w3, w3, #0xff
   86e88:	eb01005f 	cmp	x2, x1
   86e8c:	d2800024 	mov	x4, #0x1                   	// #1
   86e90:	540003e8 	b.hi	86f0c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x8c>  // b.pmore
   86e94:	d503201f 	nop
   86e98:	9b027c84 	mul	x4, x4, x2
   86e9c:	9ac40826 	udiv	x6, x1, x4
   86ea0:	eb06005f 	cmp	x2, x6
   86ea4:	aa0603e5 	mov	x5, x6
   86ea8:	54ffff89 	b.ls	86e98 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x18>  // b.plast
   86eac:	7100007f 	cmp	w3, #0x0
   86eb0:	52800408 	mov	w8, #0x20                  	// #32
   86eb4:	1a8813e8 	csel	w8, wzr, w8, ne  // ne = any
   86eb8:	12001d08 	and	w8, w8, #0xff
   86ebc:	aa0003e7 	mov	x7, x0
   86ec0:	1100dd08 	add	w8, w8, #0x37
   86ec4:	14000004 	b	86ed4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x54>
   86ec8:	9ac60825 	udiv	x5, x1, x6
   86ecc:	aa0603e4 	mov	x4, x6
   86ed0:	aa0503e6 	mov	x6, x5
   86ed4:	12001ca3 	and	w3, w5, #0xff
   86ed8:	f10024bf 	cmp	x5, #0x9
   86edc:	9b0484c1 	msub	x1, x6, x4, x1
   86ee0:	1100c065 	add	w5, w3, #0x30
   86ee4:	0b080063 	add	w3, w3, w8
   86ee8:	9ac20886 	udiv	x6, x4, x2
   86eec:	13001ca5 	sxtb	w5, w5
   86ef0:	13001c63 	sxtb	w3, w3
   86ef4:	1a858063 	csel	w3, w3, w5, hi  // hi = pmore
   86ef8:	eb04005f 	cmp	x2, x4
   86efc:	380014e3 	strb	w3, [x7], #1
   86f00:	54fffe49 	b.ls	86ec8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x48>  // b.plast
   86f04:	390000ff 	strb	wzr, [x7]
   86f08:	d65f03c0 	ret
   86f0c:	aa0103e5 	mov	x5, x1
   86f10:	aa0103e6 	mov	x6, x1
   86f14:	17ffffe6 	b	86eac <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x2c>
   86f18:	d503201f 	nop
   86f1c:	d503201f 	nop

0000000000086f20 <CString::ftoa(char*, double, unsigned int)>:
   86f20:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   86f24:	910003fd 	mov	x29, sp
   86f28:	1e602018 	fcmpe	d0, #0.0
   86f2c:	a9025bf5 	stp	x21, x22, [sp, #32]
   86f30:	aa0003f6 	mov	x22, x0
   86f34:	a90363f7 	stp	x23, x24, [sp, #48]
   86f38:	aa0003f7 	mov	x23, x0
   86f3c:	2a0103f8 	mov	w24, w1
   86f40:	54000085 	b.pl	86f50 <CString::ftoa(char*, double, unsigned int)+0x30>  // b.nfrst
   86f44:	1e614000 	fneg	d0, d0
   86f48:	528005a0 	mov	w0, #0x2d                  	// #45
   86f4c:	380016c0 	strb	w0, [x22], #1
   86f50:	d2e87e00 	mov	x0, #0x43f0000000000000    	// #4895412794951729152
   86f54:	9e670001 	fmov	d1, x0
   86f58:	1e612010 	fcmpe	d0, d1
   86f5c:	54000f2c 	b.gt	87140 <CString::ftoa(char*, double, unsigned int)+0x220>
   86f60:	a90153f3 	stp	x19, x20, [sp, #16]
   86f64:	9e790013 	fcvtzu	x19, d0
   86f68:	d2800020 	mov	x0, #0x1                   	// #1
   86f6c:	f100267f 	cmp	x19, #0x9
   86f70:	54000fa9 	b.ls	87164 <CString::ftoa(char*, double, unsigned int)+0x244>  // b.plast
   86f74:	d503201f 	nop
   86f78:	8b000800 	add	x0, x0, x0, lsl #2
   86f7c:	d37ff800 	lsl	x0, x0, #1
   86f80:	9ac00a62 	udiv	x2, x19, x0
   86f84:	f100245f 	cmp	x2, #0x9
   86f88:	54ffff88 	b.hi	86f78 <CString::ftoa(char*, double, unsigned int)+0x58>  // b.pmore
   86f8c:	b202e7e7 	mov	x7, #0xcccccccccccccccc    	// #-3689348814741910324
   86f90:	aa1603e5 	mov	x5, x22
   86f94:	aa1303e4 	mov	x4, x19
   86f98:	f29999a7 	movk	x7, #0xcccd
   86f9c:	14000003 	b	86fa8 <CString::ftoa(char*, double, unsigned int)+0x88>
   86fa0:	aa0203e0 	mov	x0, x2
   86fa4:	9ac20882 	udiv	x2, x4, x2
   86fa8:	12001c43 	and	w3, w2, #0xff
   86fac:	f100245f 	cmp	x2, #0x9
   86fb0:	1100c062 	add	w2, w3, #0x30
   86fb4:	11015c63 	add	w3, w3, #0x57
   86fb8:	13001c42 	sxtb	w2, w2
   86fbc:	13001c63 	sxtb	w3, w3
   86fc0:	1a828063 	csel	w3, w3, w2, hi  // hi = pmore
   86fc4:	9ac00886 	udiv	x6, x4, x0
   86fc8:	f100241f 	cmp	x0, #0x9
   86fcc:	380014a3 	strb	w3, [x5], #1
   86fd0:	9bc77c02 	umulh	x2, x0, x7
   86fd4:	d343fc42 	lsr	x2, x2, #3
   86fd8:	9b0090c4 	msub	x4, x6, x0, x4
   86fdc:	54fffe28 	b.hi	86fa0 <CString::ftoa(char*, double, unsigned int)+0x80>  // b.pmore
   86fe0:	390000bf 	strb	wzr, [x5]
   86fe4:	fd0027e0 	str	d0, [sp, #72]
   86fe8:	350000f8 	cbnz	w24, 87004 <CString::ftoa(char*, double, unsigned int)+0xe4>
   86fec:	aa1703e0 	mov	x0, x23
   86ff0:	a94153f3 	ldp	x19, x20, [sp, #16]
   86ff4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86ff8:	a94363f7 	ldp	x23, x24, [sp, #48]
   86ffc:	a8c77bfd 	ldp	x29, x30, [sp], #112
   87000:	d65f03c0 	ret
   87004:	aa1603e0 	mov	x0, x22
   87008:	52800274 	mov	w20, #0x13                  	// #19
   8700c:	94000359 	bl	87d70 <strlen>
   87010:	528005c1 	mov	w1, #0x2e                  	// #46
   87014:	71004f1f 	cmp	w24, #0x13
   87018:	1a949314 	csel	w20, w24, w20, ls  // ls = plast
   8701c:	8b0002d5 	add	x21, x22, x0
   87020:	7100071f 	cmp	w24, #0x1
   87024:	fd4027e0 	ldr	d0, [sp, #72]
   87028:	38206ac1 	strb	w1, [x22, x0]
   8702c:	910006b6 	add	x22, x21, #0x1
   87030:	54000a29 	b.ls	87174 <CString::ftoa(char*, double, unsigned int)+0x254>  // b.plast
   87034:	52800041 	mov	w1, #0x2                   	// #2
   87038:	d2800140 	mov	x0, #0xa                   	// #10
   8703c:	d503201f 	nop
   87040:	8b000800 	add	x0, x0, x0, lsl #2
   87044:	11000421 	add	w1, w1, #0x1
   87048:	6b14003f 	cmp	w1, w20
   8704c:	d37ff800 	lsl	x0, x0, #1
   87050:	54ffff89 	b.ls	87040 <CString::ftoa(char*, double, unsigned int)+0x120>  // b.plast
   87054:	9e630001 	ucvtf	d1, x0
   87058:	9e630262 	ucvtf	d2, x19
   8705c:	d2800020 	mov	x0, #0x1                   	// #1
   87060:	1e623800 	fsub	d0, d0, d2
   87064:	1e610800 	fmul	d0, d0, d1
   87068:	9e790003 	fcvtzu	x3, d0
   8706c:	f100247f 	cmp	x3, #0x9
   87070:	540007e9 	b.ls	8716c <CString::ftoa(char*, double, unsigned int)+0x24c>  // b.plast
   87074:	d503201f 	nop
   87078:	8b000800 	add	x0, x0, x0, lsl #2
   8707c:	d37ff800 	lsl	x0, x0, #1
   87080:	9ac00861 	udiv	x1, x3, x0
   87084:	f100243f 	cmp	x1, #0x9
   87088:	54ffff88 	b.hi	87078 <CString::ftoa(char*, double, unsigned int)+0x158>  // b.pmore
   8708c:	b202e7e6 	mov	x6, #0xcccccccccccccccc    	// #-3689348814741910324
   87090:	910163e4 	add	x4, sp, #0x58
   87094:	f29999a6 	movk	x6, #0xcccd
   87098:	14000003 	b	870a4 <CString::ftoa(char*, double, unsigned int)+0x184>
   8709c:	aa0103e0 	mov	x0, x1
   870a0:	9ac10861 	udiv	x1, x3, x1
   870a4:	12001c22 	and	w2, w1, #0xff
   870a8:	f100243f 	cmp	x1, #0x9
   870ac:	1100c041 	add	w1, w2, #0x30
   870b0:	11015c42 	add	w2, w2, #0x57
   870b4:	13001c21 	sxtb	w1, w1
   870b8:	13001c42 	sxtb	w2, w2
   870bc:	1a818042 	csel	w2, w2, w1, hi  // hi = pmore
   870c0:	9ac00865 	udiv	x5, x3, x0
   870c4:	f100241f 	cmp	x0, #0x9
   870c8:	38001482 	strb	w2, [x4], #1
   870cc:	9bc67c01 	umulh	x1, x0, x6
   870d0:	d343fc21 	lsr	x1, x1, #3
   870d4:	9b008ca3 	msub	x3, x5, x0, x3
   870d8:	54fffe28 	b.hi	8709c <CString::ftoa(char*, double, unsigned int)+0x17c>  // b.pmore
   870dc:	910163e0 	add	x0, sp, #0x58
   870e0:	3900009f 	strb	wzr, [x4]
   870e4:	94000323 	bl	87d70 <strlen>
   870e8:	4b000280 	sub	w0, w20, w0
   870ec:	51000403 	sub	w3, w0, #0x1
   870f0:	34000160 	cbz	w0, 8711c <CString::ftoa(char*, double, unsigned int)+0x1fc>
   870f4:	91000861 	add	x1, x3, #0x2
   870f8:	aa1603e0 	mov	x0, x22
   870fc:	52800602 	mov	w2, #0x30                  	// #48
   87100:	8b0102a1 	add	x1, x21, x1
   87104:	d503201f 	nop
   87108:	38001402 	strb	w2, [x0], #1
   8710c:	eb00003f 	cmp	x1, x0
   87110:	54ffffc1 	b.ne	87108 <CString::ftoa(char*, double, unsigned int)+0x1e8>  // b.any
   87114:	91000463 	add	x3, x3, #0x1
   87118:	8b0302d6 	add	x22, x22, x3
   8711c:	910163e1 	add	x1, sp, #0x58
   87120:	aa1603e0 	mov	x0, x22
   87124:	9400037f 	bl	87f20 <strcpy>
   87128:	aa1703e0 	mov	x0, x23
   8712c:	a94153f3 	ldp	x19, x20, [sp, #16]
   87130:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87134:	a94363f7 	ldp	x23, x24, [sp, #48]
   87138:	a8c77bfd 	ldp	x29, x30, [sp], #112
   8713c:	d65f03c0 	ret
   87140:	aa1603e0 	mov	x0, x22
   87144:	f0000001 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   87148:	9114c021 	add	x1, x1, #0x530
   8714c:	94000375 	bl	87f20 <strcpy>
   87150:	aa1703e0 	mov	x0, x23
   87154:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87158:	a94363f7 	ldp	x23, x24, [sp, #48]
   8715c:	a8c77bfd 	ldp	x29, x30, [sp], #112
   87160:	d65f03c0 	ret
   87164:	aa1303e2 	mov	x2, x19
   87168:	17ffff89 	b	86f8c <CString::ftoa(char*, double, unsigned int)+0x6c>
   8716c:	aa0303e1 	mov	x1, x3
   87170:	17ffffc7 	b	8708c <CString::ftoa(char*, double, unsigned int)+0x16c>
   87174:	1e649001 	fmov	d1, #1.000000000000000000e+01
   87178:	17ffffb8 	b	87058 <CString::ftoa(char*, double, unsigned int)+0x138>
   8717c:	d503201f 	nop

0000000000087180 <CString::FormatV(char const*, std::__va_list)>:
   87180:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   87184:	910003fd 	mov	x29, sp
   87188:	a90153f3 	stp	x19, x20, [sp, #16]
   8718c:	a9025bf5 	stp	x21, x22, [sp, #32]
   87190:	a9046bf9 	stp	x25, x26, [sp, #64]
   87194:	aa0103f9 	mov	x25, x1
   87198:	aa0003fa 	mov	x26, x0
   8719c:	29430455 	ldp	w21, w1, [x2, #24]
   871a0:	f9003be2 	str	x2, [sp, #112]
   871a4:	f9400054 	ldr	x20, [x2]
   871a8:	a90363f7 	stp	x23, x24, [sp, #48]
   871ac:	f9400442 	ldr	x2, [x2, #8]
   871b0:	a90573fb 	stp	x27, x28, [sp, #80]
   871b4:	b90067e1 	str	w1, [sp, #100]
   871b8:	f90037e2 	str	x2, [sp, #104]
   871bc:	f9400400 	ldr	x0, [x0, #8]
   871c0:	b4000040 	cbz	x0, 871c8 <CString::FormatV(char const*, std::__va_list)+0x48>
   871c4:	97fff667 	bl	84b60 <operator delete[](void*)>
   871c8:	52800801 	mov	w1, #0x40                  	// #64
   871cc:	b202e7f6 	mov	x22, #0xcccccccccccccccc    	// #-3689348814741910324
   871d0:	d2800800 	mov	x0, #0x40                  	// #64
   871d4:	f29999b6 	movk	x22, #0xcccd
   871d8:	b9001341 	str	w1, [x26, #16]
   871dc:	97fff659 	bl	84b40 <operator new[](unsigned long)>
   871e0:	f9000740 	str	x0, [x26, #8]
   871e4:	f9000f40 	str	x0, [x26, #24]
   871e8:	39c00333 	ldrsb	w19, [x25]
   871ec:	34000d33 	cbz	w19, 87390 <CString::FormatV(char const*, std::__va_list)+0x210>
   871f0:	7100967f 	cmp	w19, #0x25
   871f4:	9100073b 	add	x27, x25, #0x1
   871f8:	54001841 	b.ne	87500 <CString::FormatV(char const*, std::__va_list)+0x380>  // b.any
   871fc:	39c0073c 	ldrsb	w28, [x25, #1]
   87200:	7100979f 	cmp	w28, #0x25
   87204:	54001900 	b.eq	87524 <CString::FormatV(char const*, std::__va_list)+0x3a4>  // b.none
   87208:	7100b79f 	cmp	w28, #0x2d
   8720c:	52800017 	mov	w23, #0x0                   	// #0
   87210:	54000081 	b.ne	87220 <CString::FormatV(char const*, std::__va_list)+0xa0>  // b.any
   87214:	39c00b3c 	ldrsb	w28, [x25, #2]
   87218:	91000b3b 	add	x27, x25, #0x2
   8721c:	52800037 	mov	w23, #0x1                   	// #1
   87220:	7100c39f 	cmp	w28, #0x30
   87224:	91000779 	add	x25, x27, #0x1
   87228:	52800018 	mov	w24, #0x0                   	// #0
   8722c:	540000c1 	b.ne	87244 <CString::FormatV(char const*, std::__va_list)+0xc4>  // b.any
   87230:	91000b60 	add	x0, x27, #0x2
   87234:	39c0077c 	ldrsb	w28, [x27, #1]
   87238:	52800038 	mov	w24, #0x1                   	// #1
   8723c:	aa1903fb 	mov	x27, x25
   87240:	aa0003f9 	mov	x25, x0
   87244:	5100c380 	sub	w0, w28, #0x30
   87248:	12001c01 	and	w1, w0, #0xff
   8724c:	7100243f 	cmp	w1, #0x9
   87250:	54002388 	b.hi	876c0 <CString::FormatV(char const*, std::__va_list)+0x540>  // b.pmore
   87254:	d2800013 	mov	x19, #0x0                   	// #0
   87258:	14000002 	b	87260 <CString::FormatV(char const*, std::__va_list)+0xe0>
   8725c:	aa0203fb 	mov	x27, x2
   87260:	39c0077c 	ldrsb	w28, [x27, #1]
   87264:	8b130a73 	add	x19, x19, x19, lsl #2
   87268:	93407c00 	sxtw	x0, w0
   8726c:	91000762 	add	x2, x27, #0x1
   87270:	8b130413 	add	x19, x0, x19, lsl #1
   87274:	5100c380 	sub	w0, w28, #0x30
   87278:	12001c01 	and	w1, w0, #0xff
   8727c:	7100243f 	cmp	w1, #0x9
   87280:	54fffee9 	b.ls	8725c <CString::FormatV(char const*, std::__va_list)+0xdc>  // b.plast
   87284:	91000b79 	add	x25, x27, #0x2
   87288:	7100bb9f 	cmp	w28, #0x2e
   8728c:	540015e0 	b.eq	87548 <CString::FormatV(char const*, std::__va_list)+0x3c8>  // b.none
   87290:	39c00040 	ldrsb	w0, [x2]
   87294:	528000c1 	mov	w1, #0x6                   	// #6
   87298:	7101b01f 	cmp	w0, #0x6c
   8729c:	52800008 	mov	w8, #0x0                   	// #0
   872a0:	540000a1 	b.ne	872b4 <CString::FormatV(char const*, std::__va_list)+0x134>  // b.any
   872a4:	39c00440 	ldrsb	w0, [x2, #1]
   872a8:	52800028 	mov	w8, #0x1                   	// #1
   872ac:	aa1903e2 	mov	x2, x25
   872b0:	91000739 	add	x25, x25, #0x1
   872b4:	7101a41f 	cmp	w0, #0x69
   872b8:	54001ce0 	b.eq	87654 <CString::FormatV(char const*, std::__va_list)+0x4d4>  // b.none
   872bc:	54000d2d 	b.le	87460 <CString::FormatV(char const*, std::__va_list)+0x2e0>
   872c0:	7101cc1f 	cmp	w0, #0x73
   872c4:	54001aa0 	b.eq	87618 <CString::FormatV(char const*, std::__va_list)+0x498>  // b.none
   872c8:	54000a2c 	b.gt	8740c <CString::FormatV(char const*, std::__va_list)+0x28c>
   872cc:	7101bc1f 	cmp	w0, #0x6f
   872d0:	d2800103 	mov	x3, #0x8                   	// #8
   872d4:	54000701 	b.ne	873b4 <CString::FormatV(char const*, std::__va_list)+0x234>  // b.any
   872d8:	34000a88 	cbz	w8, 87428 <CString::FormatV(char const*, std::__va_list)+0x2a8>
   872dc:	d503201f 	nop
   872e0:	37f816b5 	tbnz	w21, #31, 875b4 <CString::FormatV(char const*, std::__va_list)+0x434>
   872e4:	aa1403e1 	mov	x1, x20
   872e8:	91003e82 	add	x2, x20, #0xf
   872ec:	f9400029 	ldr	x9, [x1]
   872f0:	927df054 	and	x20, x2, #0xfffffffffffffff8
   872f4:	eb03013f 	cmp	x9, x3
   872f8:	d2800021 	mov	x1, #0x1                   	// #1
   872fc:	54000a62 	b.cs	87448 <CString::FormatV(char const*, std::__va_list)+0x2c8>  // b.hs, b.nlast
   87300:	aa0903e2 	mov	x2, x9
   87304:	aa0903e8 	mov	x8, x9
   87308:	7101601f 	cmp	w0, #0x58
   8730c:	5280040b 	mov	w11, #0x20                  	// #32
   87310:	1a8b03eb 	csel	w11, wzr, w11, eq  // eq = none
   87314:	12001d6b 	and	w11, w11, #0xff
   87318:	910203ea 	add	x10, sp, #0x80
   8731c:	1100dd6b 	add	w11, w11, #0x37
   87320:	14000004 	b	87330 <CString::FormatV(char const*, std::__va_list)+0x1b0>
   87324:	9ac80922 	udiv	x2, x9, x8
   87328:	aa0803e1 	mov	x1, x8
   8732c:	aa0203e8 	mov	x8, x2
   87330:	12001c40 	and	w0, w2, #0xff
   87334:	f100245f 	cmp	x2, #0x9
   87338:	9b01a509 	msub	x9, x8, x1, x9
   8733c:	1100c002 	add	w2, w0, #0x30
   87340:	0b0b0000 	add	w0, w0, w11
   87344:	9ac30828 	udiv	x8, x1, x3
   87348:	13001c42 	sxtb	w2, w2
   8734c:	13001c00 	sxtb	w0, w0
   87350:	1a828000 	csel	w0, w0, w2, hi  // hi = pmore
   87354:	eb01007f 	cmp	x3, x1
   87358:	38001540 	strb	w0, [x10], #1
   8735c:	54fffe49 	b.ls	87324 <CString::FormatV(char const*, std::__va_list)+0x1a4>  // b.plast
   87360:	910203e0 	add	x0, sp, #0x80
   87364:	3900015f 	strb	wzr, [x10]
   87368:	94000282 	bl	87d70 <strlen>
   8736c:	aa0003fb 	mov	x27, x0
   87370:	35001817 	cbnz	w23, 87670 <CString::FormatV(char const*, std::__va_list)+0x4f0>
   87374:	eb13001f 	cmp	x0, x19
   87378:	54001aa3 	b.cc	876cc <CString::FormatV(char const*, std::__va_list)+0x54c>  // b.lo, b.ul, b.last
   8737c:	910203e1 	add	x1, sp, #0x80
   87380:	aa1a03e0 	mov	x0, x26
   87384:	97fffe37 	bl	86c60 <CString::PutString(char const*)>
   87388:	39c00333 	ldrsb	w19, [x25]
   8738c:	35fff333 	cbnz	w19, 871f0 <CString::FormatV(char const*, std::__va_list)+0x70>
   87390:	f9400f40 	ldr	x0, [x26, #24]
   87394:	3900001f 	strb	wzr, [x0]
   87398:	a94153f3 	ldp	x19, x20, [sp, #16]
   8739c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   873a0:	a94363f7 	ldp	x23, x24, [sp, #48]
   873a4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   873a8:	a94573fb 	ldp	x27, x28, [sp, #80]
   873ac:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   873b0:	d65f03c0 	ret
   873b4:	7101c01f 	cmp	w0, #0x70
   873b8:	d2800203 	mov	x3, #0x10                  	// #16
   873bc:	54fff8e0 	b.eq	872d8 <CString::FormatV(char const*, std::__va_list)+0x158>  // b.none
   873c0:	d2800021 	mov	x1, #0x1                   	// #1
   873c4:	aa1a03e0 	mov	x0, x26
   873c8:	f9003fe2 	str	x2, [sp, #120]
   873cc:	97fffd45 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   873d0:	f9400f43 	ldr	x3, [x26, #24]
   873d4:	d2800021 	mov	x1, #0x1                   	// #1
   873d8:	528004a6 	mov	w6, #0x25                  	// #37
   873dc:	aa1a03e0 	mov	x0, x26
   873e0:	f9403fe2 	ldr	x2, [sp, #120]
   873e4:	8b010067 	add	x7, x3, x1
   873e8:	f9000f47 	str	x7, [x26, #24]
   873ec:	39000066 	strb	w6, [x3]
   873f0:	39c00053 	ldrsb	w19, [x2]
   873f4:	97fffd3b 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   873f8:	f9400f40 	ldr	x0, [x26, #24]
   873fc:	91000401 	add	x1, x0, #0x1
   87400:	f9000f41 	str	x1, [x26, #24]
   87404:	39000013 	strb	w19, [x0]
   87408:	17ffff78 	b	871e8 <CString::FormatV(char const*, std::__va_list)+0x68>
   8740c:	7101d41f 	cmp	w0, #0x75
   87410:	d2800143 	mov	x3, #0xa                   	// #10
   87414:	54fff620 	b.eq	872d8 <CString::FormatV(char const*, std::__va_list)+0x158>  // b.none
   87418:	7101e01f 	cmp	w0, #0x78
   8741c:	d2800203 	mov	x3, #0x10                  	// #16
   87420:	54fffd01 	b.ne	873c0 <CString::FormatV(char const*, std::__va_list)+0x240>  // b.any
   87424:	35fff5e8 	cbnz	w8, 872e0 <CString::FormatV(char const*, std::__va_list)+0x160>
   87428:	37f80b75 	tbnz	w21, #31, 87594 <CString::FormatV(char const*, std::__va_list)+0x414>
   8742c:	91002e82 	add	x2, x20, #0xb
   87430:	aa1403e1 	mov	x1, x20
   87434:	927df054 	and	x20, x2, #0xfffffffffffffff8
   87438:	b9400029 	ldr	w9, [x1]
   8743c:	d2800021 	mov	x1, #0x1                   	// #1
   87440:	eb03013f 	cmp	x9, x3
   87444:	54fff5e3 	b.cc	87300 <CString::FormatV(char const*, std::__va_list)+0x180>  // b.lo, b.ul, b.last
   87448:	9b037c21 	mul	x1, x1, x3
   8744c:	9ac10928 	udiv	x8, x9, x1
   87450:	eb08007f 	cmp	x3, x8
   87454:	aa0803e2 	mov	x2, x8
   87458:	54ffff89 	b.ls	87448 <CString::FormatV(char const*, std::__va_list)+0x2c8>  // b.plast
   8745c:	17ffffab 	b	87308 <CString::FormatV(char const*, std::__va_list)+0x188>
   87460:	71018c1f 	cmp	w0, #0x63
   87464:	54000ba0 	b.eq	875d8 <CString::FormatV(char const*, std::__va_list)+0x458>  // b.none
   87468:	5400044d 	b.le	874f0 <CString::FormatV(char const*, std::__va_list)+0x370>
   8746c:	7101901f 	cmp	w0, #0x64
   87470:	54000f20 	b.eq	87654 <CString::FormatV(char const*, std::__va_list)+0x4d4>  // b.none
   87474:	7101981f 	cmp	w0, #0x66
   87478:	54fffa41 	b.ne	873c0 <CString::FormatV(char const*, std::__va_list)+0x240>  // b.any
   8747c:	b94067e0 	ldr	w0, [sp, #100]
   87480:	37f81c40 	tbnz	w0, #31, 87808 <CString::FormatV(char const*, std::__va_list)+0x688>
   87484:	91003e80 	add	x0, x20, #0xf
   87488:	aa1403e2 	mov	x2, x20
   8748c:	927df014 	and	x20, x0, #0xfffffffffffffff8
   87490:	fd400040 	ldr	d0, [x2]
   87494:	910203e0 	add	x0, sp, #0x80
   87498:	97fffea2 	bl	86f20 <CString::ftoa(char*, double, unsigned int)>
   8749c:	910203e0 	add	x0, sp, #0x80
   874a0:	94000234 	bl	87d70 <strlen>
   874a4:	aa0003fb 	mov	x27, x0
   874a8:	35001cf7 	cbnz	w23, 87844 <CString::FormatV(char const*, std::__va_list)+0x6c4>
   874ac:	eb13001f 	cmp	x0, x19
   874b0:	54fff662 	b.cs	8737c <CString::FormatV(char const*, std::__va_list)+0x1fc>  // b.hs, b.nlast
   874b4:	cb000273 	sub	x19, x19, x0
   874b8:	aa1a03e0 	mov	x0, x26
   874bc:	aa1303e1 	mov	x1, x19
   874c0:	97fffd08 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   874c4:	d1000660 	sub	x0, x19, #0x1
   874c8:	52800403 	mov	w3, #0x20                  	// #32
   874cc:	d503201f 	nop
   874d0:	f9400f41 	ldr	x1, [x26, #24]
   874d4:	d1000400 	sub	x0, x0, #0x1
   874d8:	b100041f 	cmn	x0, #0x1
   874dc:	91000422 	add	x2, x1, #0x1
   874e0:	f9000f42 	str	x2, [x26, #24]
   874e4:	39000023 	strb	w3, [x1]
   874e8:	54ffff41 	b.ne	874d0 <CString::FormatV(char const*, std::__va_list)+0x350>  // b.any
   874ec:	17ffffa4 	b	8737c <CString::FormatV(char const*, std::__va_list)+0x1fc>
   874f0:	7101601f 	cmp	w0, #0x58
   874f4:	d2800203 	mov	x3, #0x10                  	// #16
   874f8:	54ffef00 	b.eq	872d8 <CString::FormatV(char const*, std::__va_list)+0x158>  // b.none
   874fc:	17ffffb1 	b	873c0 <CString::FormatV(char const*, std::__va_list)+0x240>
   87500:	d2800021 	mov	x1, #0x1                   	// #1
   87504:	aa1a03e0 	mov	x0, x26
   87508:	97fffcf6 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8750c:	f9400f40 	ldr	x0, [x26, #24]
   87510:	aa1b03f9 	mov	x25, x27
   87514:	91000401 	add	x1, x0, #0x1
   87518:	f9000f41 	str	x1, [x26, #24]
   8751c:	39000013 	strb	w19, [x0]
   87520:	17ffff32 	b	871e8 <CString::FormatV(char const*, std::__va_list)+0x68>
   87524:	d2800021 	mov	x1, #0x1                   	// #1
   87528:	aa1a03e0 	mov	x0, x26
   8752c:	97fffced 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   87530:	f9400f40 	ldr	x0, [x26, #24]
   87534:	91000b39 	add	x25, x25, #0x2
   87538:	91000401 	add	x1, x0, #0x1
   8753c:	f9000f41 	str	x1, [x26, #24]
   87540:	3900001c 	strb	w28, [x0]
   87544:	17ffff29 	b	871e8 <CString::FormatV(char const*, std::__va_list)+0x68>
   87548:	39c00440 	ldrsb	w0, [x2, #1]
   8754c:	52800001 	mov	w1, #0x0                   	// #0
   87550:	5100c002 	sub	w2, w0, #0x30
   87554:	12001c42 	and	w2, w2, #0xff
   87558:	7100245f 	cmp	w2, #0x9
   8755c:	54000069 	b.ls	87568 <CString::FormatV(char const*, std::__va_list)+0x3e8>  // b.plast
   87560:	14000168 	b	87b00 <CString::FormatV(char const*, std::__va_list)+0x980>
   87564:	aa0203f9 	mov	x25, x2
   87568:	0b010821 	add	w1, w1, w1, lsl #2
   8756c:	91000722 	add	x2, x25, #0x1
   87570:	0b010401 	add	w1, w0, w1, lsl #1
   87574:	39c00720 	ldrsb	w0, [x25, #1]
   87578:	5100c021 	sub	w1, w1, #0x30
   8757c:	5100c003 	sub	w3, w0, #0x30
   87580:	12001c63 	and	w3, w3, #0xff
   87584:	7100247f 	cmp	w3, #0x9
   87588:	54fffee9 	b.ls	87564 <CString::FormatV(char const*, std::__va_list)+0x3e4>  // b.plast
   8758c:	91000b39 	add	x25, x25, #0x2
   87590:	17ffff42 	b	87298 <CString::FormatV(char const*, std::__va_list)+0x118>
   87594:	110022a2 	add	w2, w21, #0x8
   87598:	7100005f 	cmp	w2, #0x0
   8759c:	5400184d 	b.le	878a4 <CString::FormatV(char const*, std::__va_list)+0x724>
   875a0:	91002e88 	add	x8, x20, #0xb
   875a4:	aa1403e1 	mov	x1, x20
   875a8:	2a0203f5 	mov	w21, w2
   875ac:	927df114 	and	x20, x8, #0xfffffffffffffff8
   875b0:	17ffffa2 	b	87438 <CString::FormatV(char const*, std::__va_list)+0x2b8>
   875b4:	110022a2 	add	w2, w21, #0x8
   875b8:	7100005f 	cmp	w2, #0x0
   875bc:	540016ad 	b.le	87890 <CString::FormatV(char const*, std::__va_list)+0x710>
   875c0:	aa1403e1 	mov	x1, x20
   875c4:	91003e88 	add	x8, x20, #0xf
   875c8:	2a0203f5 	mov	w21, w2
   875cc:	927df114 	and	x20, x8, #0xfffffffffffffff8
   875d0:	f9400029 	ldr	x9, [x1]
   875d4:	17ffff48 	b	872f4 <CString::FormatV(char const*, std::__va_list)+0x174>
   875d8:	37f82075 	tbnz	w21, #31, 879e4 <CString::FormatV(char const*, std::__va_list)+0x864>
   875dc:	91002e81 	add	x1, x20, #0xb
   875e0:	aa1403e0 	mov	x0, x20
   875e4:	927df034 	and	x20, x1, #0xfffffffffffffff8
   875e8:	39c0001b 	ldrsb	w27, [x0]
   875ec:	350020f7 	cbnz	w23, 87a08 <CString::FormatV(char const*, std::__va_list)+0x888>
   875f0:	f100067f 	cmp	x19, #0x1
   875f4:	540028c8 	b.hi	87b0c <CString::FormatV(char const*, std::__va_list)+0x98c>  // b.pmore
   875f8:	d2800021 	mov	x1, #0x1                   	// #1
   875fc:	aa1a03e0 	mov	x0, x26
   87600:	97fffcb8 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   87604:	f9400f40 	ldr	x0, [x26, #24]
   87608:	91000401 	add	x1, x0, #0x1
   8760c:	f9000f41 	str	x1, [x26, #24]
   87610:	3900001b 	strb	w27, [x0]
   87614:	17fffef5 	b	871e8 <CString::FormatV(char const*, std::__va_list)+0x68>
   87618:	37f81a95 	tbnz	w21, #31, 87968 <CString::FormatV(char const*, std::__va_list)+0x7e8>
   8761c:	91003e81 	add	x1, x20, #0xf
   87620:	aa1403e0 	mov	x0, x20
   87624:	927df034 	and	x20, x1, #0xfffffffffffffff8
   87628:	f940001c 	ldr	x28, [x0]
   8762c:	aa1c03e0 	mov	x0, x28
   87630:	940001d0 	bl	87d70 <strlen>
   87634:	aa0003fb 	mov	x27, x0
   87638:	35001b17 	cbnz	w23, 87998 <CString::FormatV(char const*, std::__va_list)+0x818>
   8763c:	eb13001f 	cmp	x0, x19
   87640:	54002843 	b.cc	87b48 <CString::FormatV(char const*, std::__va_list)+0x9c8>  // b.lo, b.ul, b.last
   87644:	aa1c03e1 	mov	x1, x28
   87648:	aa1a03e0 	mov	x0, x26
   8764c:	97fffd85 	bl	86c60 <CString::PutString(char const*)>
   87650:	17fffee6 	b	871e8 <CString::FormatV(char const*, std::__va_list)+0x68>
   87654:	340005e8 	cbz	w8, 87710 <CString::FormatV(char const*, std::__va_list)+0x590>
   87658:	37f813f5 	tbnz	w21, #31, 878d4 <CString::FormatV(char const*, std::__va_list)+0x754>
   8765c:	aa1403e0 	mov	x0, x20
   87660:	91003e81 	add	x1, x20, #0xf
   87664:	927df034 	and	x20, x1, #0xfffffffffffffff8
   87668:	f9400002 	ldr	x2, [x0]
   8766c:	1400002e 	b	87724 <CString::FormatV(char const*, std::__va_list)+0x5a4>
   87670:	910203e1 	add	x1, sp, #0x80
   87674:	aa1a03e0 	mov	x0, x26
   87678:	97fffd7a 	bl	86c60 <CString::PutString(char const*)>
   8767c:	eb13037f 	cmp	x27, x19
   87680:	54ffdb42 	b.cs	871e8 <CString::FormatV(char const*, std::__va_list)+0x68>  // b.hs, b.nlast
   87684:	cb1b0273 	sub	x19, x19, x27
   87688:	aa1a03e0 	mov	x0, x26
   8768c:	aa1303e1 	mov	x1, x19
   87690:	97fffc94 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   87694:	d1000660 	sub	x0, x19, #0x1
   87698:	52800403 	mov	w3, #0x20                  	// #32
   8769c:	d503201f 	nop
   876a0:	f9400f41 	ldr	x1, [x26, #24]
   876a4:	d1000400 	sub	x0, x0, #0x1
   876a8:	b100041f 	cmn	x0, #0x1
   876ac:	91000422 	add	x2, x1, #0x1
   876b0:	f9000f42 	str	x2, [x26, #24]
   876b4:	39000023 	strb	w3, [x1]
   876b8:	54ffff41 	b.ne	876a0 <CString::FormatV(char const*, std::__va_list)+0x520>  // b.any
   876bc:	17fffecb 	b	871e8 <CString::FormatV(char const*, std::__va_list)+0x68>
   876c0:	aa1b03e2 	mov	x2, x27
   876c4:	d2800013 	mov	x19, #0x0                   	// #0
   876c8:	17fffef0 	b	87288 <CString::FormatV(char const*, std::__va_list)+0x108>
   876cc:	cb000273 	sub	x19, x19, x0
   876d0:	7100031f 	cmp	w24, #0x0
   876d4:	aa1a03e0 	mov	x0, x26
   876d8:	52800402 	mov	w2, #0x20                  	// #32
   876dc:	aa1303e1 	mov	x1, x19
   876e0:	5280061b 	mov	w27, #0x30                  	// #48
   876e4:	1a82137b 	csel	w27, w27, w2, ne  // ne = any
   876e8:	97fffc7e 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   876ec:	d1000660 	sub	x0, x19, #0x1
   876f0:	f9400f41 	ldr	x1, [x26, #24]
   876f4:	d1000400 	sub	x0, x0, #0x1
   876f8:	b100041f 	cmn	x0, #0x1
   876fc:	91000422 	add	x2, x1, #0x1
   87700:	f9000f42 	str	x2, [x26, #24]
   87704:	3900003b 	strb	w27, [x1]
   87708:	54ffff41 	b.ne	876f0 <CString::FormatV(char const*, std::__va_list)+0x570>  // b.any
   8770c:	17ffff1c 	b	8737c <CString::FormatV(char const*, std::__va_list)+0x1fc>
   87710:	37f80d35 	tbnz	w21, #31, 878b4 <CString::FormatV(char const*, std::__va_list)+0x734>
   87714:	91002e81 	add	x1, x20, #0xb
   87718:	aa1403e0 	mov	x0, x20
   8771c:	927df034 	and	x20, x1, #0xfffffffffffffff8
   87720:	b9800002 	ldrsw	x2, [x0]
   87724:	5280001b 	mov	w27, #0x0                   	// #0
   87728:	b6f80062 	tbz	x2, #63, 87734 <CString::FormatV(char const*, std::__va_list)+0x5b4>
   8772c:	cb0203e2 	neg	x2, x2
   87730:	5280003b 	mov	w27, #0x1                   	// #1
   87734:	f100245f 	cmp	x2, #0x9
   87738:	aa0203e3 	mov	x3, x2
   8773c:	d2800020 	mov	x0, #0x1                   	// #1
   87740:	5400200d 	b.le	87b40 <CString::FormatV(char const*, std::__va_list)+0x9c0>
   87744:	d503201f 	nop
   87748:	8b000800 	add	x0, x0, x0, lsl #2
   8774c:	d37ff800 	lsl	x0, x0, #1
   87750:	9ac00841 	udiv	x1, x2, x0
   87754:	f100243f 	cmp	x1, #0x9
   87758:	54ffff88 	b.hi	87748 <CString::FormatV(char const*, std::__va_list)+0x5c8>  // b.pmore
   8775c:	910203e9 	add	x9, sp, #0x80
   87760:	14000003 	b	8776c <CString::FormatV(char const*, std::__va_list)+0x5ec>
   87764:	aa0103e0 	mov	x0, x1
   87768:	9ac10861 	udiv	x1, x3, x1
   8776c:	12001c22 	and	w2, w1, #0xff
   87770:	f100243f 	cmp	x1, #0x9
   87774:	1100c048 	add	w8, w2, #0x30
   87778:	11015c41 	add	w1, w2, #0x57
   8777c:	13001c21 	sxtb	w1, w1
   87780:	13001d02 	sxtb	w2, w8
   87784:	1a828021 	csel	w1, w1, w2, hi  // hi = pmore
   87788:	9ac0086a 	udiv	x10, x3, x0
   8778c:	38001521 	strb	w1, [x9], #1
   87790:	f100241f 	cmp	x0, #0x9
   87794:	9bd67c01 	umulh	x1, x0, x22
   87798:	d343fc21 	lsr	x1, x1, #3
   8779c:	9b008d43 	msub	x3, x10, x0, x3
   877a0:	54fffe28 	b.hi	87764 <CString::FormatV(char const*, std::__va_list)+0x5e4>  // b.pmore
   877a4:	910203e0 	add	x0, sp, #0x80
   877a8:	3900013f 	strb	wzr, [x9]
   877ac:	94000171 	bl	87d70 <strlen>
   877b0:	aa0003fc 	mov	x28, x0
   877b4:	35000a3b 	cbnz	w27, 878f8 <CString::FormatV(char const*, std::__va_list)+0x778>
   877b8:	34001837 	cbz	w23, 87abc <CString::FormatV(char const*, std::__va_list)+0x93c>
   877bc:	910203e1 	add	x1, sp, #0x80
   877c0:	aa1a03e0 	mov	x0, x26
   877c4:	97fffd27 	bl	86c60 <CString::PutString(char const*)>
   877c8:	eb13039f 	cmp	x28, x19
   877cc:	54ffd0e2 	b.cs	871e8 <CString::FormatV(char const*, std::__va_list)+0x68>  // b.hs, b.nlast
   877d0:	cb1c0273 	sub	x19, x19, x28
   877d4:	aa1a03e0 	mov	x0, x26
   877d8:	aa1303e1 	mov	x1, x19
   877dc:	97fffc41 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   877e0:	d1000660 	sub	x0, x19, #0x1
   877e4:	52800403 	mov	w3, #0x20                  	// #32
   877e8:	f9400f41 	ldr	x1, [x26, #24]
   877ec:	d1000400 	sub	x0, x0, #0x1
   877f0:	b100041f 	cmn	x0, #0x1
   877f4:	91000422 	add	x2, x1, #0x1
   877f8:	f9000f42 	str	x2, [x26, #24]
   877fc:	39000023 	strb	w3, [x1]
   87800:	54ffff41 	b.ne	877e8 <CString::FormatV(char const*, std::__va_list)+0x668>  // b.any
   87804:	17fffe79 	b	871e8 <CString::FormatV(char const*, std::__va_list)+0x68>
   87808:	b94067e0 	ldr	w0, [sp, #100]
   8780c:	11004000 	add	w0, w0, #0x10
   87810:	7100001f 	cmp	w0, #0x0
   87814:	5400136d 	b.le	87a80 <CString::FormatV(char const*, std::__va_list)+0x900>
   87818:	aa1403e2 	mov	x2, x20
   8781c:	91003e83 	add	x3, x20, #0xf
   87820:	b90067e0 	str	w0, [sp, #100]
   87824:	910203e0 	add	x0, sp, #0x80
   87828:	927df074 	and	x20, x3, #0xfffffffffffffff8
   8782c:	fd400040 	ldr	d0, [x2]
   87830:	97fffdbc 	bl	86f20 <CString::ftoa(char*, double, unsigned int)>
   87834:	910203e0 	add	x0, sp, #0x80
   87838:	9400014e 	bl	87d70 <strlen>
   8783c:	aa0003fb 	mov	x27, x0
   87840:	34ffe377 	cbz	w23, 874ac <CString::FormatV(char const*, std::__va_list)+0x32c>
   87844:	910203e1 	add	x1, sp, #0x80
   87848:	aa1a03e0 	mov	x0, x26
   8784c:	97fffd05 	bl	86c60 <CString::PutString(char const*)>
   87850:	eb13037f 	cmp	x27, x19
   87854:	54ffcca2 	b.cs	871e8 <CString::FormatV(char const*, std::__va_list)+0x68>  // b.hs, b.nlast
   87858:	cb1b0273 	sub	x19, x19, x27
   8785c:	aa1a03e0 	mov	x0, x26
   87860:	aa1303e1 	mov	x1, x19
   87864:	97fffc1f 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   87868:	d1000660 	sub	x0, x19, #0x1
   8786c:	52800403 	mov	w3, #0x20                  	// #32
   87870:	f9400f41 	ldr	x1, [x26, #24]
   87874:	d1000400 	sub	x0, x0, #0x1
   87878:	b100041f 	cmn	x0, #0x1
   8787c:	91000422 	add	x2, x1, #0x1
   87880:	f9000f42 	str	x2, [x26, #24]
   87884:	39000023 	strb	w3, [x1]
   87888:	54ffff41 	b.ne	87870 <CString::FormatV(char const*, std::__va_list)+0x6f0>  // b.any
   8788c:	17fffe57 	b	871e8 <CString::FormatV(char const*, std::__va_list)+0x68>
   87890:	f94037e1 	ldr	x1, [sp, #104]
   87894:	8b35c021 	add	x1, x1, w21, sxtw
   87898:	2a0203f5 	mov	w21, w2
   8789c:	f9400029 	ldr	x9, [x1]
   878a0:	17fffe95 	b	872f4 <CString::FormatV(char const*, std::__va_list)+0x174>
   878a4:	f94037e1 	ldr	x1, [sp, #104]
   878a8:	8b35c021 	add	x1, x1, w21, sxtw
   878ac:	2a0203f5 	mov	w21, w2
   878b0:	17fffee2 	b	87438 <CString::FormatV(char const*, std::__va_list)+0x2b8>
   878b4:	110022a1 	add	w1, w21, #0x8
   878b8:	7100003f 	cmp	w1, #0x0
   878bc:	5400162d 	b.le	87b80 <CString::FormatV(char const*, std::__va_list)+0xa00>
   878c0:	91002e82 	add	x2, x20, #0xb
   878c4:	aa1403e0 	mov	x0, x20
   878c8:	2a0103f5 	mov	w21, w1
   878cc:	927df054 	and	x20, x2, #0xfffffffffffffff8
   878d0:	17ffff94 	b	87720 <CString::FormatV(char const*, std::__va_list)+0x5a0>
   878d4:	110022a1 	add	w1, w21, #0x8
   878d8:	7100003f 	cmp	w1, #0x0
   878dc:	540015ad 	b.le	87b90 <CString::FormatV(char const*, std::__va_list)+0xa10>
   878e0:	91003e82 	add	x2, x20, #0xf
   878e4:	aa1403e0 	mov	x0, x20
   878e8:	2a0103f5 	mov	w21, w1
   878ec:	927df054 	and	x20, x2, #0xfffffffffffffff8
   878f0:	f9400002 	ldr	x2, [x0]
   878f4:	17ffff8c 	b	87724 <CString::FormatV(char const*, std::__va_list)+0x5a4>
   878f8:	9100041c 	add	x28, x0, #0x1
   878fc:	35000cf7 	cbnz	w23, 87a98 <CString::FormatV(char const*, std::__va_list)+0x918>
   87900:	35001538 	cbnz	w24, 87ba4 <CString::FormatV(char const*, std::__va_list)+0xa24>
   87904:	eb13039f 	cmp	x28, x19
   87908:	540001e2 	b.cs	87944 <CString::FormatV(char const*, std::__va_list)+0x7c4>  // b.hs, b.nlast
   8790c:	cb1c0273 	sub	x19, x19, x28
   87910:	aa1a03e0 	mov	x0, x26
   87914:	aa1303e1 	mov	x1, x19
   87918:	97fffbf2 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8791c:	d1000660 	sub	x0, x19, #0x1
   87920:	52800403 	mov	w3, #0x20                  	// #32
   87924:	f9400f41 	ldr	x1, [x26, #24]
   87928:	d1000400 	sub	x0, x0, #0x1
   8792c:	b100041f 	cmn	x0, #0x1
   87930:	91000422 	add	x2, x1, #0x1
   87934:	f9000f42 	str	x2, [x26, #24]
   87938:	39000023 	strb	w3, [x1]
   8793c:	54ffff41 	b.ne	87924 <CString::FormatV(char const*, std::__va_list)+0x7a4>  // b.any
   87940:	34ffd1fb 	cbz	w27, 8737c <CString::FormatV(char const*, std::__va_list)+0x1fc>
   87944:	d2800021 	mov	x1, #0x1                   	// #1
   87948:	aa1a03e0 	mov	x0, x26
   8794c:	97fffbe5 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   87950:	f9400f40 	ldr	x0, [x26, #24]
   87954:	91000401 	add	x1, x0, #0x1
   87958:	f9000f41 	str	x1, [x26, #24]
   8795c:	528005a1 	mov	w1, #0x2d                  	// #45
   87960:	39000001 	strb	w1, [x0]
   87964:	17fffe86 	b	8737c <CString::FormatV(char const*, std::__va_list)+0x1fc>
   87968:	110022a1 	add	w1, w21, #0x8
   8796c:	7100003f 	cmp	w1, #0x0
   87970:	5400078d 	b.le	87a60 <CString::FormatV(char const*, std::__va_list)+0x8e0>
   87974:	aa1403e0 	mov	x0, x20
   87978:	91003e82 	add	x2, x20, #0xf
   8797c:	f940001c 	ldr	x28, [x0]
   87980:	2a0103f5 	mov	w21, w1
   87984:	927df054 	and	x20, x2, #0xfffffffffffffff8
   87988:	aa1c03e0 	mov	x0, x28
   8798c:	940000f9 	bl	87d70 <strlen>
   87990:	aa0003fb 	mov	x27, x0
   87994:	34ffe557 	cbz	w23, 8763c <CString::FormatV(char const*, std::__va_list)+0x4bc>
   87998:	aa1c03e1 	mov	x1, x28
   8799c:	aa1a03e0 	mov	x0, x26
   879a0:	97fffcb0 	bl	86c60 <CString::PutString(char const*)>
   879a4:	eb13037f 	cmp	x27, x19
   879a8:	54ffc202 	b.cs	871e8 <CString::FormatV(char const*, std::__va_list)+0x68>  // b.hs, b.nlast
   879ac:	cb1b0273 	sub	x19, x19, x27
   879b0:	aa1a03e0 	mov	x0, x26
   879b4:	aa1303e1 	mov	x1, x19
   879b8:	97fffbca 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   879bc:	d1000660 	sub	x0, x19, #0x1
   879c0:	52800403 	mov	w3, #0x20                  	// #32
   879c4:	f9400f41 	ldr	x1, [x26, #24]
   879c8:	d1000400 	sub	x0, x0, #0x1
   879cc:	b100041f 	cmn	x0, #0x1
   879d0:	91000422 	add	x2, x1, #0x1
   879d4:	f9000f42 	str	x2, [x26, #24]
   879d8:	39000023 	strb	w3, [x1]
   879dc:	54ffff41 	b.ne	879c4 <CString::FormatV(char const*, std::__va_list)+0x844>  // b.any
   879e0:	17fffe02 	b	871e8 <CString::FormatV(char const*, std::__va_list)+0x68>
   879e4:	110022a1 	add	w1, w21, #0x8
   879e8:	7100003f 	cmp	w1, #0x0
   879ec:	5400042d 	b.le	87a70 <CString::FormatV(char const*, std::__va_list)+0x8f0>
   879f0:	aa1403e0 	mov	x0, x20
   879f4:	91002e82 	add	x2, x20, #0xb
   879f8:	2a0103f5 	mov	w21, w1
   879fc:	927df054 	and	x20, x2, #0xfffffffffffffff8
   87a00:	39c0001b 	ldrsb	w27, [x0]
   87a04:	34ffdf77 	cbz	w23, 875f0 <CString::FormatV(char const*, std::__va_list)+0x470>
   87a08:	d2800021 	mov	x1, #0x1                   	// #1
   87a0c:	aa1a03e0 	mov	x0, x26
   87a10:	97fffbb4 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   87a14:	f9400f40 	ldr	x0, [x26, #24]
   87a18:	f100067f 	cmp	x19, #0x1
   87a1c:	91000401 	add	x1, x0, #0x1
   87a20:	f9000f41 	str	x1, [x26, #24]
   87a24:	3900001b 	strb	w27, [x0]
   87a28:	54ffbe09 	b.ls	871e8 <CString::FormatV(char const*, std::__va_list)+0x68>  // b.plast
   87a2c:	d1000661 	sub	x1, x19, #0x1
   87a30:	aa1a03e0 	mov	x0, x26
   87a34:	97fffbab 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   87a38:	d1000a73 	sub	x19, x19, #0x2
   87a3c:	52800402 	mov	w2, #0x20                  	// #32
   87a40:	f9400f40 	ldr	x0, [x26, #24]
   87a44:	d1000673 	sub	x19, x19, #0x1
   87a48:	b100067f 	cmn	x19, #0x1
   87a4c:	91000401 	add	x1, x0, #0x1
   87a50:	f9000f41 	str	x1, [x26, #24]
   87a54:	39000002 	strb	w2, [x0]
   87a58:	54ffff41 	b.ne	87a40 <CString::FormatV(char const*, std::__va_list)+0x8c0>  // b.any
   87a5c:	17fffde3 	b	871e8 <CString::FormatV(char const*, std::__va_list)+0x68>
   87a60:	f94037e0 	ldr	x0, [sp, #104]
   87a64:	8b35c000 	add	x0, x0, w21, sxtw
   87a68:	2a0103f5 	mov	w21, w1
   87a6c:	17fffeef 	b	87628 <CString::FormatV(char const*, std::__va_list)+0x4a8>
   87a70:	f94037e0 	ldr	x0, [sp, #104]
   87a74:	8b35c000 	add	x0, x0, w21, sxtw
   87a78:	2a0103f5 	mov	w21, w1
   87a7c:	17fffedb 	b	875e8 <CString::FormatV(char const*, std::__va_list)+0x468>
   87a80:	f9403be2 	ldr	x2, [sp, #112]
   87a84:	b94067e3 	ldr	w3, [sp, #100]
   87a88:	b90067e0 	str	w0, [sp, #100]
   87a8c:	f9400842 	ldr	x2, [x2, #16]
   87a90:	8b23c042 	add	x2, x2, w3, sxtw
   87a94:	17fffe7f 	b	87490 <CString::FormatV(char const*, std::__va_list)+0x310>
   87a98:	d2800021 	mov	x1, #0x1                   	// #1
   87a9c:	aa1a03e0 	mov	x0, x26
   87aa0:	97fffb90 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   87aa4:	f9400f40 	ldr	x0, [x26, #24]
   87aa8:	91000401 	add	x1, x0, #0x1
   87aac:	f9000f41 	str	x1, [x26, #24]
   87ab0:	528005a1 	mov	w1, #0x2d                  	// #45
   87ab4:	39000001 	strb	w1, [x0]
   87ab8:	17ffff41 	b	877bc <CString::FormatV(char const*, std::__va_list)+0x63c>
   87abc:	34000878 	cbz	w24, 87bc8 <CString::FormatV(char const*, std::__va_list)+0xa48>
   87ac0:	eb13039f 	cmp	x28, x19
   87ac4:	54ffc5c2 	b.cs	8737c <CString::FormatV(char const*, std::__va_list)+0x1fc>  // b.hs, b.nlast
   87ac8:	cb1c0273 	sub	x19, x19, x28
   87acc:	aa1a03e0 	mov	x0, x26
   87ad0:	aa1303e1 	mov	x1, x19
   87ad4:	97fffb83 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   87ad8:	d1000660 	sub	x0, x19, #0x1
   87adc:	52800603 	mov	w3, #0x30                  	// #48
   87ae0:	f9400f41 	ldr	x1, [x26, #24]
   87ae4:	d1000400 	sub	x0, x0, #0x1
   87ae8:	b100041f 	cmn	x0, #0x1
   87aec:	91000422 	add	x2, x1, #0x1
   87af0:	f9000f42 	str	x2, [x26, #24]
   87af4:	39000023 	strb	w3, [x1]
   87af8:	54ffff41 	b.ne	87ae0 <CString::FormatV(char const*, std::__va_list)+0x960>  // b.any
   87afc:	17fffe20 	b	8737c <CString::FormatV(char const*, std::__va_list)+0x1fc>
   87b00:	aa1903e2 	mov	x2, x25
   87b04:	91000739 	add	x25, x25, #0x1
   87b08:	17fffde4 	b	87298 <CString::FormatV(char const*, std::__va_list)+0x118>
   87b0c:	d1000661 	sub	x1, x19, #0x1
   87b10:	aa1a03e0 	mov	x0, x26
   87b14:	97fffb73 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   87b18:	d1000a73 	sub	x19, x19, #0x2
   87b1c:	52800402 	mov	w2, #0x20                  	// #32
   87b20:	f9400f40 	ldr	x0, [x26, #24]
   87b24:	d1000673 	sub	x19, x19, #0x1
   87b28:	b100067f 	cmn	x19, #0x1
   87b2c:	91000401 	add	x1, x0, #0x1
   87b30:	f9000f41 	str	x1, [x26, #24]
   87b34:	39000002 	strb	w2, [x0]
   87b38:	54ffff41 	b.ne	87b20 <CString::FormatV(char const*, std::__va_list)+0x9a0>  // b.any
   87b3c:	17fffeaf 	b	875f8 <CString::FormatV(char const*, std::__va_list)+0x478>
   87b40:	aa0203e1 	mov	x1, x2
   87b44:	17ffff06 	b	8775c <CString::FormatV(char const*, std::__va_list)+0x5dc>
   87b48:	cb000273 	sub	x19, x19, x0
   87b4c:	aa1a03e0 	mov	x0, x26
   87b50:	aa1303e1 	mov	x1, x19
   87b54:	97fffb63 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   87b58:	d1000660 	sub	x0, x19, #0x1
   87b5c:	52800403 	mov	w3, #0x20                  	// #32
   87b60:	f9400f41 	ldr	x1, [x26, #24]
   87b64:	d1000400 	sub	x0, x0, #0x1
   87b68:	b100041f 	cmn	x0, #0x1
   87b6c:	91000422 	add	x2, x1, #0x1
   87b70:	f9000f42 	str	x2, [x26, #24]
   87b74:	39000023 	strb	w3, [x1]
   87b78:	54ffff41 	b.ne	87b60 <CString::FormatV(char const*, std::__va_list)+0x9e0>  // b.any
   87b7c:	17fffeb2 	b	87644 <CString::FormatV(char const*, std::__va_list)+0x4c4>
   87b80:	f94037e0 	ldr	x0, [sp, #104]
   87b84:	8b35c000 	add	x0, x0, w21, sxtw
   87b88:	2a0103f5 	mov	w21, w1
   87b8c:	17fffee5 	b	87720 <CString::FormatV(char const*, std::__va_list)+0x5a0>
   87b90:	f94037e0 	ldr	x0, [sp, #104]
   87b94:	8b35c000 	add	x0, x0, w21, sxtw
   87b98:	2a0103f5 	mov	w21, w1
   87b9c:	f9400002 	ldr	x2, [x0]
   87ba0:	17fffee1 	b	87724 <CString::FormatV(char const*, std::__va_list)+0x5a4>
   87ba4:	d2800021 	mov	x1, #0x1                   	// #1
   87ba8:	aa1a03e0 	mov	x0, x26
   87bac:	97fffb4d 	bl	868e0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   87bb0:	f9400f40 	ldr	x0, [x26, #24]
   87bb4:	91000401 	add	x1, x0, #0x1
   87bb8:	f9000f41 	str	x1, [x26, #24]
   87bbc:	528005a1 	mov	w1, #0x2d                  	// #45
   87bc0:	39000001 	strb	w1, [x0]
   87bc4:	17ffffbf 	b	87ac0 <CString::FormatV(char const*, std::__va_list)+0x940>
   87bc8:	eb13001f 	cmp	x0, x19
   87bcc:	54ffbd82 	b.cs	8737c <CString::FormatV(char const*, std::__va_list)+0x1fc>  // b.hs, b.nlast
   87bd0:	17ffff4f 	b	8790c <CString::FormatV(char const*, std::__va_list)+0x78c>
   87bd4:	d503201f 	nop
   87bd8:	d503201f 	nop
   87bdc:	d503201f 	nop

0000000000087be0 <CString::Format(char const*, ...)>:
   87be0:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
   87be4:	910403e8 	add	x8, sp, #0x100
   87be8:	910403eb 	add	x11, sp, #0x100
   87bec:	910003fd 	mov	x29, sp
   87bf0:	910343ea 	add	x10, sp, #0xd0
   87bf4:	128005e9 	mov	w9, #0xffffffd0            	// #-48
   87bf8:	a9032fe8 	stp	x8, x11, [sp, #48]
   87bfc:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   87c00:	f90023ea 	str	x10, [sp, #64]
   87c04:	b9004be9 	str	w9, [sp, #72]
   87c08:	b9004fe8 	str	w8, [sp, #76]
   87c0c:	a9432fea 	ldp	x10, x11, [sp, #48]
   87c10:	a94427e8 	ldp	x8, x9, [sp, #64]
   87c14:	a90d0fe2 	stp	x2, x3, [sp, #208]
   87c18:	910043e2 	add	x2, sp, #0x10
   87c1c:	a9012fea 	stp	x10, x11, [sp, #16]
   87c20:	a90227e8 	stp	x8, x9, [sp, #32]
   87c24:	3d8017e0 	str	q0, [sp, #80]
   87c28:	3d801be1 	str	q1, [sp, #96]
   87c2c:	3d801fe2 	str	q2, [sp, #112]
   87c30:	3d8023e3 	str	q3, [sp, #128]
   87c34:	3d8027e4 	str	q4, [sp, #144]
   87c38:	3d802be5 	str	q5, [sp, #160]
   87c3c:	3d802fe6 	str	q6, [sp, #176]
   87c40:	3d8033e7 	str	q7, [sp, #192]
   87c44:	a90e17e4 	stp	x4, x5, [sp, #224]
   87c48:	a90f1fe6 	stp	x6, x7, [sp, #240]
   87c4c:	97fffd4d 	bl	87180 <CString::FormatV(char const*, std::__va_list)>
   87c50:	a8d07bfd 	ldp	x29, x30, [sp], #256
   87c54:	d65f03c0 	ret
	...

0000000000087c60 <memset>:
   87c60:	f240041f 	tst	x0, #0x3
   87c64:	aa0003e3 	mov	x3, x0
   87c68:	fa4f0840 	ccmp	x2, #0xf, #0x0, eq  // eq = none
   87c6c:	54000128 	b.hi	87c90 <memset+0x30>  // b.pmore
   87c70:	13001c21 	sxtb	w1, w1
   87c74:	8b020064 	add	x4, x3, x2
   87c78:	b40000a2 	cbz	x2, 87c8c <memset+0x2c>
   87c7c:	d503201f 	nop
   87c80:	38001461 	strb	w1, [x3], #1
   87c84:	eb04007f 	cmp	x3, x4
   87c88:	54ffffc1 	b.ne	87c80 <memset+0x20>  // b.any
   87c8c:	d65f03c0 	ret
   87c90:	d1004045 	sub	x5, x2, #0x10
   87c94:	2a012024 	orr	w4, w1, w1, lsl #8
   87c98:	927ceca5 	and	x5, x5, #0xfffffffffffffff0
   87c9c:	910040a5 	add	x5, x5, #0x10
   87ca0:	2a044084 	orr	w4, w4, w4, lsl #16
   87ca4:	8b050005 	add	x5, x0, x5
   87ca8:	29001064 	stp	w4, w4, [x3]
   87cac:	91004063 	add	x3, x3, #0x10
   87cb0:	b81f8064 	stur	w4, [x3, #-8]
   87cb4:	eb0300bf 	cmp	x5, x3
   87cb8:	b81fc064 	stur	w4, [x3, #-4]
   87cbc:	54ffff61 	b.ne	87ca8 <memset+0x48>  // b.any
   87cc0:	92400c42 	and	x2, x2, #0xf
   87cc4:	17ffffeb 	b	87c70 <memset+0x10>
   87cc8:	d503201f 	nop
   87ccc:	d503201f 	nop

0000000000087cd0 <memmove>:
   87cd0:	eb01001f 	cmp	x0, x1
   87cd4:	54000089 	b.ls	87ce4 <memmove+0x14>  // b.plast
   87cd8:	8b020023 	add	x3, x1, x2
   87cdc:	eb03001f 	cmp	x0, x3
   87ce0:	54000043 	b.cc	87ce8 <memmove+0x18>  // b.lo, b.ul, b.last
   87ce4:	14000175 	b	882b8 <memcpy>
   87ce8:	d1000443 	sub	x3, x2, #0x1
   87cec:	b40000c2 	cbz	x2, 87d04 <memmove+0x34>
   87cf0:	38e36822 	ldrsb	w2, [x1, x3]
   87cf4:	38236802 	strb	w2, [x0, x3]
   87cf8:	d1000463 	sub	x3, x3, #0x1
   87cfc:	b100047f 	cmn	x3, #0x1
   87d00:	54ffff81 	b.ne	87cf0 <memmove+0x20>  // b.any
   87d04:	d65f03c0 	ret
   87d08:	d503201f 	nop
   87d0c:	d503201f 	nop

0000000000087d10 <memcmp>:
   87d10:	b4000202 	cbz	x2, 87d50 <memcmp+0x40>
   87d14:	39400004 	ldrb	w4, [x0]
   87d18:	39400023 	ldrb	w3, [x1]
   87d1c:	6b03009f 	cmp	w4, w3
   87d20:	540001c8 	b.hi	87d58 <memcmp+0x48>  // b.pmore
   87d24:	540001e3 	b.cc	87d60 <memcmp+0x50>  // b.lo, b.ul, b.last
   87d28:	d2800023 	mov	x3, #0x1                   	// #1
   87d2c:	14000007 	b	87d48 <memcmp+0x38>
   87d30:	38636805 	ldrb	w5, [x0, x3]
   87d34:	38636824 	ldrb	w4, [x1, x3]
   87d38:	91000463 	add	x3, x3, #0x1
   87d3c:	6b0400bf 	cmp	w5, w4
   87d40:	540000c8 	b.hi	87d58 <memcmp+0x48>  // b.pmore
   87d44:	540000e3 	b.cc	87d60 <memcmp+0x50>  // b.lo, b.ul, b.last
   87d48:	eb02007f 	cmp	x3, x2
   87d4c:	54ffff21 	b.ne	87d30 <memcmp+0x20>  // b.any
   87d50:	52800000 	mov	w0, #0x0                   	// #0
   87d54:	d65f03c0 	ret
   87d58:	52800020 	mov	w0, #0x1                   	// #1
   87d5c:	d65f03c0 	ret
   87d60:	12800000 	mov	w0, #0xffffffff            	// #-1
   87d64:	d65f03c0 	ret
   87d68:	d503201f 	nop
   87d6c:	d503201f 	nop

0000000000087d70 <strlen>:
   87d70:	aa0003e2 	mov	x2, x0
   87d74:	39c00000 	ldrsb	w0, [x0]
   87d78:	340000c0 	cbz	w0, 87d90 <strlen+0x20>
   87d7c:	d2800000 	mov	x0, #0x0                   	// #0
   87d80:	91000400 	add	x0, x0, #0x1
   87d84:	38e06841 	ldrsb	w1, [x2, x0]
   87d88:	35ffffc1 	cbnz	w1, 87d80 <strlen+0x10>
   87d8c:	d65f03c0 	ret
   87d90:	d2800000 	mov	x0, #0x0                   	// #0
   87d94:	d65f03c0 	ret
   87d98:	d503201f 	nop
   87d9c:	d503201f 	nop

0000000000087da0 <strcmp>:
   87da0:	39c00003 	ldrsb	w3, [x0]
   87da4:	39c00024 	ldrsb	w4, [x1]
   87da8:	340001e3 	cbz	w3, 87de4 <strcmp+0x44>
   87dac:	340001c4 	cbz	w4, 87de4 <strcmp+0x44>
   87db0:	6b03009f 	cmp	w4, w3
   87db4:	5400022b 	b.lt	87df8 <strcmp+0x58>  // b.tstop
   87db8:	5400024c 	b.gt	87e00 <strcmp+0x60>
   87dbc:	d2800022 	mov	x2, #0x1                   	// #1
   87dc0:	14000006 	b	87dd8 <strcmp+0x38>
   87dc4:	34000104 	cbz	w4, 87de4 <strcmp+0x44>
   87dc8:	6b04007f 	cmp	w3, w4
   87dcc:	91000442 	add	x2, x2, #0x1
   87dd0:	5400014c 	b.gt	87df8 <strcmp+0x58>
   87dd4:	5400016b 	b.lt	87e00 <strcmp+0x60>  // b.tstop
   87dd8:	38e26803 	ldrsb	w3, [x0, x2]
   87ddc:	38e26824 	ldrsb	w4, [x1, x2]
   87de0:	35ffff23 	cbnz	w3, 87dc4 <strcmp+0x24>
   87de4:	6b04007f 	cmp	w3, w4
   87de8:	52800021 	mov	w1, #0x1                   	// #1
   87dec:	5a9fa3e0 	csetm	w0, lt  // lt = tstop
   87df0:	1a81d000 	csel	w0, w0, w1, le
   87df4:	d65f03c0 	ret
   87df8:	52800020 	mov	w0, #0x1                   	// #1
   87dfc:	d65f03c0 	ret
   87e00:	12800000 	mov	w0, #0xffffffff            	// #-1
   87e04:	d65f03c0 	ret
   87e08:	d503201f 	nop
   87e0c:	d503201f 	nop

0000000000087e10 <strcasecmp>:
   87e10:	d2800005 	mov	x5, #0x0                   	// #0
   87e14:	14000008 	b	87e34 <strcasecmp+0x24>
   87e18:	710068df 	cmp	w6, #0x1a
   87e1c:	51008083 	sub	w3, w4, #0x20
   87e20:	1a843063 	csel	w3, w3, w4, cc  // cc = lo, ul, last
   87e24:	6b03005f 	cmp	w2, w3
   87e28:	34000183 	cbz	w3, 87e58 <strcasecmp+0x48>
   87e2c:	5400026c 	b.gt	87e78 <strcasecmp+0x68>
   87e30:	5400028b 	b.lt	87e80 <strcasecmp+0x70>  // b.tstop
   87e34:	38e56802 	ldrsb	w2, [x0, x5]
   87e38:	38e56824 	ldrsb	w4, [x1, x5]
   87e3c:	910004a5 	add	x5, x5, #0x1
   87e40:	51018446 	sub	w6, w2, #0x61
   87e44:	51008043 	sub	w3, w2, #0x20
   87e48:	710068df 	cmp	w6, #0x1a
   87e4c:	1a823062 	csel	w2, w3, w2, cc  // cc = lo, ul, last
   87e50:	51018486 	sub	w6, w4, #0x61
   87e54:	35fffe22 	cbnz	w2, 87e18 <strcasecmp+0x8>
   87e58:	51008080 	sub	w0, w4, #0x20
   87e5c:	710068df 	cmp	w6, #0x1a
   87e60:	1a843004 	csel	w4, w0, w4, cc  // cc = lo, ul, last
   87e64:	52800021 	mov	w1, #0x1                   	// #1
   87e68:	6b02009f 	cmp	w4, w2
   87e6c:	5a9fd3e0 	csetm	w0, gt
   87e70:	1a81a000 	csel	w0, w0, w1, ge  // ge = tcont
   87e74:	d65f03c0 	ret
   87e78:	52800020 	mov	w0, #0x1                   	// #1
   87e7c:	d65f03c0 	ret
   87e80:	12800000 	mov	w0, #0xffffffff            	// #-1
   87e84:	d65f03c0 	ret
   87e88:	d503201f 	nop
   87e8c:	d503201f 	nop

0000000000087e90 <strncmp>:
   87e90:	b40002c2 	cbz	x2, 87ee8 <strncmp+0x58>
   87e94:	39c00004 	ldrsb	w4, [x0]
   87e98:	39c00025 	ldrsb	w5, [x1]
   87e9c:	340002c4 	cbz	w4, 87ef4 <strncmp+0x64>
   87ea0:	340002a5 	cbz	w5, 87ef4 <strncmp+0x64>
   87ea4:	6b05009f 	cmp	w4, w5
   87ea8:	5400030c 	b.gt	87f08 <strncmp+0x78>
   87eac:	5400032b 	b.lt	87f10 <strncmp+0x80>  // b.tstop
   87eb0:	8b020022 	add	x2, x1, x2
   87eb4:	14000009 	b	87ed8 <strncmp+0x48>
   87eb8:	39c00004 	ldrsb	w4, [x0]
   87ebc:	340001a4 	cbz	w4, 87ef0 <strncmp+0x60>
   87ec0:	39c00065 	ldrsb	w5, [x3]
   87ec4:	aa0303e1 	mov	x1, x3
   87ec8:	34000165 	cbz	w5, 87ef4 <strncmp+0x64>
   87ecc:	6b05009f 	cmp	w4, w5
   87ed0:	540001cc 	b.gt	87f08 <strncmp+0x78>
   87ed4:	540001eb 	b.lt	87f10 <strncmp+0x80>  // b.tstop
   87ed8:	91000423 	add	x3, x1, #0x1
   87edc:	91000400 	add	x0, x0, #0x1
   87ee0:	eb03005f 	cmp	x2, x3
   87ee4:	54fffea1 	b.ne	87eb8 <strncmp+0x28>  // b.any
   87ee8:	52800000 	mov	w0, #0x0                   	// #0
   87eec:	d65f03c0 	ret
   87ef0:	39c00425 	ldrsb	w5, [x1, #1]
   87ef4:	6b05009f 	cmp	w4, w5
   87ef8:	52800021 	mov	w1, #0x1                   	// #1
   87efc:	5a9fa3e0 	csetm	w0, lt  // lt = tstop
   87f00:	1a81d000 	csel	w0, w0, w1, le
   87f04:	d65f03c0 	ret
   87f08:	52800020 	mov	w0, #0x1                   	// #1
   87f0c:	d65f03c0 	ret
   87f10:	12800000 	mov	w0, #0xffffffff            	// #-1
   87f14:	d65f03c0 	ret
   87f18:	d503201f 	nop
   87f1c:	d503201f 	nop

0000000000087f20 <strcpy>:
   87f20:	39c00022 	ldrsb	w2, [x1]
   87f24:	aa0003e3 	mov	x3, x0
   87f28:	340000a2 	cbz	w2, 87f3c <strcpy+0x1c>
   87f2c:	d503201f 	nop
   87f30:	38001462 	strb	w2, [x3], #1
   87f34:	38c01c22 	ldrsb	w2, [x1, #1]!
   87f38:	35ffffc2 	cbnz	w2, 87f30 <strcpy+0x10>
   87f3c:	3900007f 	strb	wzr, [x3]
   87f40:	d65f03c0 	ret
   87f44:	d503201f 	nop
   87f48:	d503201f 	nop
   87f4c:	d503201f 	nop

0000000000087f50 <strncpy>:
   87f50:	b4000182 	cbz	x2, 87f80 <strncpy+0x30>
   87f54:	39c00024 	ldrsb	w4, [x1]
   87f58:	34000164 	cbz	w4, 87f84 <strncpy+0x34>
   87f5c:	8b020002 	add	x2, x0, x2
   87f60:	aa0003e3 	mov	x3, x0
   87f64:	14000003 	b	87f70 <strncpy+0x20>
   87f68:	39c00024 	ldrsb	w4, [x1]
   87f6c:	340000e4 	cbz	w4, 87f88 <strncpy+0x38>
   87f70:	38001464 	strb	w4, [x3], #1
   87f74:	eb03005f 	cmp	x2, x3
   87f78:	91000421 	add	x1, x1, #0x1
   87f7c:	54ffff61 	b.ne	87f68 <strncpy+0x18>  // b.any
   87f80:	d65f03c0 	ret
   87f84:	aa0003e3 	mov	x3, x0
   87f88:	3900007f 	strb	wzr, [x3]
   87f8c:	d65f03c0 	ret

0000000000087f90 <strcat>:
   87f90:	39c00003 	ldrsb	w3, [x0]
   87f94:	aa0003e2 	mov	x2, x0
   87f98:	34000083 	cbz	w3, 87fa8 <strcat+0x18>
   87f9c:	d503201f 	nop
   87fa0:	38c01c43 	ldrsb	w3, [x2, #1]!
   87fa4:	35ffffe3 	cbnz	w3, 87fa0 <strcat+0x10>
   87fa8:	39c00023 	ldrsb	w3, [x1]
   87fac:	34000083 	cbz	w3, 87fbc <strcat+0x2c>
   87fb0:	38001443 	strb	w3, [x2], #1
   87fb4:	38c01c23 	ldrsb	w3, [x1, #1]!
   87fb8:	35ffffc3 	cbnz	w3, 87fb0 <strcat+0x20>
   87fbc:	3900005f 	strb	wzr, [x2]
   87fc0:	d65f03c0 	ret
   87fc4:	d503201f 	nop
   87fc8:	d503201f 	nop
   87fcc:	d503201f 	nop

0000000000087fd0 <strchr>:
   87fd0:	39c00002 	ldrsb	w2, [x0]
   87fd4:	34000102 	cbz	w2, 87ff4 <strchr+0x24>
   87fd8:	6b02003f 	cmp	w1, w2
   87fdc:	54000081 	b.ne	87fec <strchr+0x1c>  // b.any
   87fe0:	14000006 	b	87ff8 <strchr+0x28>
   87fe4:	6b01005f 	cmp	w2, w1
   87fe8:	54000080 	b.eq	87ff8 <strchr+0x28>  // b.none
   87fec:	38c01c02 	ldrsb	w2, [x0, #1]!
   87ff0:	35ffffa2 	cbnz	w2, 87fe4 <strchr+0x14>
   87ff4:	d2800000 	mov	x0, #0x0                   	// #0
   87ff8:	d65f03c0 	ret
   87ffc:	d503201f 	nop

0000000000088000 <strstr>:
   88000:	39c00002 	ldrsb	w2, [x0]
   88004:	39c00025 	ldrsb	w5, [x1]
   88008:	350000c2 	cbnz	w2, 88020 <strstr+0x20>
   8800c:	710000bf 	cmp	w5, #0x0
   88010:	9a9f0000 	csel	x0, x0, xzr, eq  // eq = none
   88014:	d65f03c0 	ret
   88018:	38c01c02 	ldrsb	w2, [x0, #1]!
   8801c:	340001c2 	cbz	w2, 88054 <strstr+0x54>
   88020:	34ffffa5 	cbz	w5, 88014 <strstr+0x14>
   88024:	39c00002 	ldrsb	w2, [x0]
   88028:	6b05005f 	cmp	w2, w5
   8802c:	54ffff61 	b.ne	88018 <strstr+0x18>  // b.any
   88030:	d2800002 	mov	x2, #0x0                   	// #0
   88034:	14000004 	b	88044 <strstr+0x44>
   88038:	38e26804 	ldrsb	w4, [x0, x2]
   8803c:	6b03009f 	cmp	w4, w3
   88040:	54fffec1 	b.ne	88018 <strstr+0x18>  // b.any
   88044:	91000442 	add	x2, x2, #0x1
   88048:	38e26823 	ldrsb	w3, [x1, x2]
   8804c:	35ffff63 	cbnz	w3, 88038 <strstr+0x38>
   88050:	d65f03c0 	ret
   88054:	d2800000 	mov	x0, #0x0                   	// #0
   88058:	d65f03c0 	ret
   8805c:	d503201f 	nop

0000000000088060 <strtok_r>:
   88060:	aa0003e7 	mov	x7, x0
   88064:	b40004a0 	cbz	x0, 880f8 <strtok_r+0x98>
   88068:	39c000e4 	ldrsb	w4, [x7]
   8806c:	34000504 	cbz	w4, 8810c <strtok_r+0xac>
   88070:	39c00026 	ldrsb	w6, [x1]
   88074:	d503201f 	nop
   88078:	34000126 	cbz	w6, 8809c <strtok_r+0x3c>
   8807c:	6b0400df 	cmp	w6, w4
   88080:	54000300 	b.eq	880e0 <strtok_r+0x80>  // b.none
   88084:	aa0103e5 	mov	x5, x1
   88088:	14000003 	b	88094 <strtok_r+0x34>
   8808c:	6b04007f 	cmp	w3, w4
   88090:	54000280 	b.eq	880e0 <strtok_r+0x80>  // b.none
   88094:	38c01ca3 	ldrsb	w3, [x5, #1]!
   88098:	35ffffa3 	cbnz	w3, 8808c <strtok_r+0x2c>
   8809c:	34000384 	cbz	w4, 8810c <strtok_r+0xac>
   880a0:	aa0703e8 	mov	x8, x7
   880a4:	d503201f 	nop
   880a8:	34000126 	cbz	w6, 880cc <strtok_r+0x6c>
   880ac:	6b06009f 	cmp	w4, w6
   880b0:	540001c0 	b.eq	880e8 <strtok_r+0x88>  // b.none
   880b4:	aa0103e5 	mov	x5, x1
   880b8:	14000003 	b	880c4 <strtok_r+0x64>
   880bc:	6b04007f 	cmp	w3, w4
   880c0:	54000140 	b.eq	880e8 <strtok_r+0x88>  // b.none
   880c4:	38c01ca3 	ldrsb	w3, [x5, #1]!
   880c8:	35ffffa3 	cbnz	w3, 880bc <strtok_r+0x5c>
   880cc:	38c01d04 	ldrsb	w4, [x8, #1]!
   880d0:	35fffec4 	cbnz	w4, 880a8 <strtok_r+0x48>
   880d4:	aa0703e0 	mov	x0, x7
   880d8:	f9000048 	str	x8, [x2]
   880dc:	d65f03c0 	ret
   880e0:	38c01ce4 	ldrsb	w4, [x7, #1]!
   880e4:	17ffffe5 	b	88078 <strtok_r+0x18>
   880e8:	aa0703e0 	mov	x0, x7
   880ec:	3800151f 	strb	wzr, [x8], #1
   880f0:	f9000048 	str	x8, [x2]
   880f4:	17fffffa 	b	880dc <strtok_r+0x7c>
   880f8:	f9400047 	ldr	x7, [x2]
   880fc:	d2800000 	mov	x0, #0x0                   	// #0
   88100:	b4fffee7 	cbz	x7, 880dc <strtok_r+0x7c>
   88104:	39c000e4 	ldrsb	w4, [x7]
   88108:	35fffb44 	cbnz	w4, 88070 <strtok_r+0x10>
   8810c:	d2800000 	mov	x0, #0x0                   	// #0
   88110:	f900005f 	str	xzr, [x2]
   88114:	d65f03c0 	ret
   88118:	d503201f 	nop
   8811c:	d503201f 	nop

0000000000088120 <strtoul>:
   88120:	aa0003e5 	mov	x5, x0
   88124:	b4000041 	cbz	x1, 8812c <strtoul+0xc>
   88128:	f9000020 	str	x0, [x1]
   8812c:	51000843 	sub	w3, w2, #0x2
   88130:	d2800000 	mov	x0, #0x0                   	// #0
   88134:	7100887f 	cmp	w3, #0x22
   88138:	7a408844 	ccmp	w2, #0x0, #0x4, hi  // hi = pmore
   8813c:	54000941 	b.ne	88264 <strtoul+0x144>  // b.any
   88140:	39c000a3 	ldrsb	w3, [x5]
   88144:	51002464 	sub	w4, w3, #0x9
   88148:	7100807f 	cmp	w3, #0x20
   8814c:	12001c84 	and	w4, w4, #0xff
   88150:	54000060 	b.eq	8815c <strtoul+0x3c>  // b.none
   88154:	7100109f 	cmp	w4, #0x4
   88158:	54000068 	b.hi	88164 <strtoul+0x44>  // b.pmore
   8815c:	910004a5 	add	x5, x5, #0x1
   88160:	17fffff8 	b	88140 <strtoul+0x20>
   88164:	7100ac7f 	cmp	w3, #0x2b
   88168:	540002a0 	b.eq	881bc <strtoul+0x9c>  // b.none
   8816c:	7100b47f 	cmp	w3, #0x2d
   88170:	52800009 	mov	w9, #0x0                   	// #0
   88174:	540002a1 	b.ne	881c8 <strtoul+0xa8>  // b.any
   88178:	39c004a3 	ldrsb	w3, [x5, #1]
   8817c:	52800029 	mov	w9, #0x1                   	// #1
   88180:	910004a5 	add	x5, x5, #0x1
   88184:	7100c07f 	cmp	w3, #0x30
   88188:	54000241 	b.ne	881d0 <strtoul+0xb0>  // b.any
   8818c:	39c004a3 	ldrsb	w3, [x5, #1]
   88190:	910004a4 	add	x4, x5, #0x1
   88194:	121a7860 	and	w0, w3, #0xffffffdf
   88198:	7101601f 	cmp	w0, #0x58
   8819c:	54000661 	b.ne	88268 <strtoul+0x148>  // b.any
   881a0:	721b785f 	tst	w2, #0xffffffef
   881a4:	d2800000 	mov	x0, #0x0                   	// #0
   881a8:	540005e1 	b.ne	88264 <strtoul+0x144>  // b.any
   881ac:	39c008a3 	ldrsb	w3, [x5, #2]
   881b0:	52800202 	mov	w2, #0x10                  	// #16
   881b4:	910008a5 	add	x5, x5, #0x2
   881b8:	14000009 	b	881dc <strtoul+0xbc>
   881bc:	39c004a3 	ldrsb	w3, [x5, #1]
   881c0:	52800009 	mov	w9, #0x0                   	// #0
   881c4:	910004a5 	add	x5, x5, #0x1
   881c8:	7100c07f 	cmp	w3, #0x30
   881cc:	54fffe00 	b.eq	8818c <strtoul+0x6c>  // b.none
   881d0:	7100005f 	cmp	w2, #0x0
   881d4:	52800140 	mov	w0, #0xa                   	// #10
   881d8:	1a801042 	csel	w2, w2, w0, ne  // ne = any
   881dc:	7100bc7f 	cmp	w3, #0x2f
   881e0:	2a0303e4 	mov	w4, w3
   881e4:	5400058d 	b.le	88294 <strtoul+0x174>
   881e8:	52800027 	mov	w7, #0x1                   	// #1
   881ec:	d2800006 	mov	x6, #0x0                   	// #0
   881f0:	93407c48 	sxtw	x8, w2
   881f4:	1400000a 	b	8821c <strtoul+0xfc>
   881f8:	9b060100 	madd	x0, x8, x6, x0
   881fc:	52800007 	mov	w7, #0x0                   	// #0
   88200:	eb06001f 	cmp	x0, x6
   88204:	aa0003e6 	mov	x6, x0
   88208:	540003a3 	b.cc	8827c <strtoul+0x15c>  // b.lo, b.ul, b.last
   8820c:	38c01ca4 	ldrsb	w4, [x5, #1]!
   88210:	7100bc9f 	cmp	w4, #0x2f
   88214:	2a0403e3 	mov	w3, w4
   88218:	540003ad 	b.le	8828c <strtoul+0x16c>
   8821c:	51018463 	sub	w3, w3, #0x61
   88220:	51008080 	sub	w0, w4, #0x20
   88224:	7100687f 	cmp	w3, #0x1a
   88228:	1a843004 	csel	w4, w0, w4, cc  // cc = lo, ul, last
   8822c:	51001c80 	sub	w0, w4, #0x7
   88230:	7101009f 	cmp	w4, #0x40
   88234:	1a84c004 	csel	w4, w0, w4, gt
   88238:	5100c084 	sub	w4, w4, #0x30
   8823c:	6b02009f 	cmp	w4, w2
   88240:	93407c80 	sxtw	x0, w4
   88244:	54fffdab 	b.lt	881f8 <strtoul+0xd8>  // b.tstop
   88248:	520000e2 	eor	w2, w7, #0x1
   8824c:	aa0603e0 	mov	x0, x6
   88250:	0a090042 	and	w2, w2, w9
   88254:	b4000041 	cbz	x1, 8825c <strtoul+0x13c>
   88258:	f9000025 	str	x5, [x1]
   8825c:	7100005f 	cmp	w2, #0x0
   88260:	da800400 	cneg	x0, x0, ne  // ne = any
   88264:	d65f03c0 	ret
   88268:	7100005f 	cmp	w2, #0x0
   8826c:	52800100 	mov	w0, #0x8                   	// #8
   88270:	1a801042 	csel	w2, w2, w0, ne  // ne = any
   88274:	aa0403e5 	mov	x5, x4
   88278:	17ffffd9 	b	881dc <strtoul+0xbc>
   8827c:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   88280:	b4ffff21 	cbz	x1, 88264 <strtoul+0x144>
   88284:	f9000025 	str	x5, [x1]
   88288:	d65f03c0 	ret
   8828c:	52800022 	mov	w2, #0x1                   	// #1
   88290:	17fffff0 	b	88250 <strtoul+0x130>
   88294:	d2800000 	mov	x0, #0x0                   	// #0
   88298:	b4fffe61 	cbz	x1, 88264 <strtoul+0x144>
   8829c:	f9000025 	str	x5, [x1]
   882a0:	17fffffa 	b	88288 <strtoul+0x168>
   882a4:	d503201f 	nop
   882a8:	d503201f 	nop
   882ac:	d503201f 	nop

00000000000882b0 <char2int>:
   882b0:	13001c00 	sxtb	w0, w0
   882b4:	d65f03c0 	ret

00000000000882b8 <memcpy>:
   882b8:	aa0003e8 	mov	x8, x0
   882bc:	f101fc5f 	cmp	x2, #0x7f
   882c0:	540001c9 	b.ls	882f8 <memcpy+0x40>  // b.plast
   882c4:	f240083f 	tst	x1, #0x7
   882c8:	54000181 	b.ne	882f8 <memcpy+0x40>  // b.any
   882cc:	f240083f 	tst	x1, #0x7
   882d0:	54000141 	b.ne	882f8 <memcpy+0x40>  // b.any
   882d4:	d2800803 	mov	x3, #0x40                  	// #64
   882d8:	a8c11424 	ldp	x4, x5, [x1], #16
   882dc:	a8c11c26 	ldp	x6, x7, [x1], #16
   882e0:	d1008042 	sub	x2, x2, #0x20
   882e4:	a8811404 	stp	x4, x5, [x0], #16
   882e8:	a8811c06 	stp	x6, x7, [x0], #16
   882ec:	f8a36821 	prfm	pldl1strm, [x1, x3]
   882f0:	f1007c5f 	cmp	x2, #0x1f
   882f4:	54ffff28 	b.hi	882d8 <memcpy+0x20>  // b.pmore
   882f8:	f100005f 	cmp	x2, #0x0
   882fc:	540000a0 	b.eq	88310 <memcpy+0x58>  // b.none
   88300:	38401423 	ldrb	w3, [x1], #1
   88304:	f1000442 	subs	x2, x2, #0x1
   88308:	38001403 	strb	w3, [x0], #1
   8830c:	54ffffa1 	b.ne	88300 <memcpy+0x48>  // b.any
   88310:	aa0803e0 	mov	x0, x8
   88314:	d65f03c0 	ret
	...

0000000000088800 <VectorTable>:
   88800:	140001ef 	b	88fbc <SynchronousStub>
   88804:	d503201f 	nop
   88808:	d503201f 	nop
   8880c:	d503201f 	nop
   88810:	d503201f 	nop
   88814:	d503201f 	nop
   88818:	d503201f 	nop
   8881c:	d503201f 	nop
   88820:	d503201f 	nop
   88824:	d503201f 	nop
   88828:	d503201f 	nop
   8882c:	d503201f 	nop
   88830:	d503201f 	nop
   88834:	d503201f 	nop
   88838:	d503201f 	nop
   8883c:	d503201f 	nop
   88840:	d503201f 	nop
   88844:	d503201f 	nop
   88848:	d503201f 	nop
   8884c:	d503201f 	nop
   88850:	d503201f 	nop
   88854:	d503201f 	nop
   88858:	d503201f 	nop
   8885c:	d503201f 	nop
   88860:	d503201f 	nop
   88864:	d503201f 	nop
   88868:	d503201f 	nop
   8886c:	d503201f 	nop
   88870:	d503201f 	nop
   88874:	d503201f 	nop
   88878:	d503201f 	nop
   8887c:	d503201f 	nop
   88880:	140001eb 	b	8902c <IRQStub>
   88884:	d503201f 	nop
   88888:	d503201f 	nop
   8888c:	d503201f 	nop
   88890:	d503201f 	nop
   88894:	d503201f 	nop
   88898:	d503201f 	nop
   8889c:	d503201f 	nop
   888a0:	d503201f 	nop
   888a4:	d503201f 	nop
   888a8:	d503201f 	nop
   888ac:	d503201f 	nop
   888b0:	d503201f 	nop
   888b4:	d503201f 	nop
   888b8:	d503201f 	nop
   888bc:	d503201f 	nop
   888c0:	d503201f 	nop
   888c4:	d503201f 	nop
   888c8:	d503201f 	nop
   888cc:	d503201f 	nop
   888d0:	d503201f 	nop
   888d4:	d503201f 	nop
   888d8:	d503201f 	nop
   888dc:	d503201f 	nop
   888e0:	d503201f 	nop
   888e4:	d503201f 	nop
   888e8:	d503201f 	nop
   888ec:	d503201f 	nop
   888f0:	d503201f 	nop
   888f4:	d503201f 	nop
   888f8:	d503201f 	nop
   888fc:	d503201f 	nop
   88900:	140001f5 	b	890d4 <FIQStub>
   88904:	d503201f 	nop
   88908:	d503201f 	nop
   8890c:	d503201f 	nop
   88910:	d503201f 	nop
   88914:	d503201f 	nop
   88918:	d503201f 	nop
   8891c:	d503201f 	nop
   88920:	d503201f 	nop
   88924:	d503201f 	nop
   88928:	d503201f 	nop
   8892c:	d503201f 	nop
   88930:	d503201f 	nop
   88934:	d503201f 	nop
   88938:	d503201f 	nop
   8893c:	d503201f 	nop
   88940:	d503201f 	nop
   88944:	d503201f 	nop
   88948:	d503201f 	nop
   8894c:	d503201f 	nop
   88950:	d503201f 	nop
   88954:	d503201f 	nop
   88958:	d503201f 	nop
   8895c:	d503201f 	nop
   88960:	d503201f 	nop
   88964:	d503201f 	nop
   88968:	d503201f 	nop
   8896c:	d503201f 	nop
   88970:	d503201f 	nop
   88974:	d503201f 	nop
   88978:	d503201f 	nop
   8897c:	d503201f 	nop
   88980:	1400019d 	b	88ff4 <SErrorStub>
   88984:	d503201f 	nop
   88988:	d503201f 	nop
   8898c:	d503201f 	nop
   88990:	d503201f 	nop
   88994:	d503201f 	nop
   88998:	d503201f 	nop
   8899c:	d503201f 	nop
   889a0:	d503201f 	nop
   889a4:	d503201f 	nop
   889a8:	d503201f 	nop
   889ac:	d503201f 	nop
   889b0:	d503201f 	nop
   889b4:	d503201f 	nop
   889b8:	d503201f 	nop
   889bc:	d503201f 	nop
   889c0:	d503201f 	nop
   889c4:	d503201f 	nop
   889c8:	d503201f 	nop
   889cc:	d503201f 	nop
   889d0:	d503201f 	nop
   889d4:	d503201f 	nop
   889d8:	d503201f 	nop
   889dc:	d503201f 	nop
   889e0:	d503201f 	nop
   889e4:	d503201f 	nop
   889e8:	d503201f 	nop
   889ec:	d503201f 	nop
   889f0:	d503201f 	nop
   889f4:	d503201f 	nop
   889f8:	d503201f 	nop
   889fc:	d503201f 	nop
   88a00:	1400016f 	b	88fbc <SynchronousStub>
   88a04:	d503201f 	nop
   88a08:	d503201f 	nop
   88a0c:	d503201f 	nop
   88a10:	d503201f 	nop
   88a14:	d503201f 	nop
   88a18:	d503201f 	nop
   88a1c:	d503201f 	nop
   88a20:	d503201f 	nop
   88a24:	d503201f 	nop
   88a28:	d503201f 	nop
   88a2c:	d503201f 	nop
   88a30:	d503201f 	nop
   88a34:	d503201f 	nop
   88a38:	d503201f 	nop
   88a3c:	d503201f 	nop
   88a40:	d503201f 	nop
   88a44:	d503201f 	nop
   88a48:	d503201f 	nop
   88a4c:	d503201f 	nop
   88a50:	d503201f 	nop
   88a54:	d503201f 	nop
   88a58:	d503201f 	nop
   88a5c:	d503201f 	nop
   88a60:	d503201f 	nop
   88a64:	d503201f 	nop
   88a68:	d503201f 	nop
   88a6c:	d503201f 	nop
   88a70:	d503201f 	nop
   88a74:	d503201f 	nop
   88a78:	d503201f 	nop
   88a7c:	d503201f 	nop
   88a80:	1400016b 	b	8902c <IRQStub>
   88a84:	d503201f 	nop
   88a88:	d503201f 	nop
   88a8c:	d503201f 	nop
   88a90:	d503201f 	nop
   88a94:	d503201f 	nop
   88a98:	d503201f 	nop
   88a9c:	d503201f 	nop
   88aa0:	d503201f 	nop
   88aa4:	d503201f 	nop
   88aa8:	d503201f 	nop
   88aac:	d503201f 	nop
   88ab0:	d503201f 	nop
   88ab4:	d503201f 	nop
   88ab8:	d503201f 	nop
   88abc:	d503201f 	nop
   88ac0:	d503201f 	nop
   88ac4:	d503201f 	nop
   88ac8:	d503201f 	nop
   88acc:	d503201f 	nop
   88ad0:	d503201f 	nop
   88ad4:	d503201f 	nop
   88ad8:	d503201f 	nop
   88adc:	d503201f 	nop
   88ae0:	d503201f 	nop
   88ae4:	d503201f 	nop
   88ae8:	d503201f 	nop
   88aec:	d503201f 	nop
   88af0:	d503201f 	nop
   88af4:	d503201f 	nop
   88af8:	d503201f 	nop
   88afc:	d503201f 	nop
   88b00:	14000175 	b	890d4 <FIQStub>
   88b04:	d503201f 	nop
   88b08:	d503201f 	nop
   88b0c:	d503201f 	nop
   88b10:	d503201f 	nop
   88b14:	d503201f 	nop
   88b18:	d503201f 	nop
   88b1c:	d503201f 	nop
   88b20:	d503201f 	nop
   88b24:	d503201f 	nop
   88b28:	d503201f 	nop
   88b2c:	d503201f 	nop
   88b30:	d503201f 	nop
   88b34:	d503201f 	nop
   88b38:	d503201f 	nop
   88b3c:	d503201f 	nop
   88b40:	d503201f 	nop
   88b44:	d503201f 	nop
   88b48:	d503201f 	nop
   88b4c:	d503201f 	nop
   88b50:	d503201f 	nop
   88b54:	d503201f 	nop
   88b58:	d503201f 	nop
   88b5c:	d503201f 	nop
   88b60:	d503201f 	nop
   88b64:	d503201f 	nop
   88b68:	d503201f 	nop
   88b6c:	d503201f 	nop
   88b70:	d503201f 	nop
   88b74:	d503201f 	nop
   88b78:	d503201f 	nop
   88b7c:	d503201f 	nop
   88b80:	1400011d 	b	88ff4 <SErrorStub>
   88b84:	d503201f 	nop
   88b88:	d503201f 	nop
   88b8c:	d503201f 	nop
   88b90:	d503201f 	nop
   88b94:	d503201f 	nop
   88b98:	d503201f 	nop
   88b9c:	d503201f 	nop
   88ba0:	d503201f 	nop
   88ba4:	d503201f 	nop
   88ba8:	d503201f 	nop
   88bac:	d503201f 	nop
   88bb0:	d503201f 	nop
   88bb4:	d503201f 	nop
   88bb8:	d503201f 	nop
   88bbc:	d503201f 	nop
   88bc0:	d503201f 	nop
   88bc4:	d503201f 	nop
   88bc8:	d503201f 	nop
   88bcc:	d503201f 	nop
   88bd0:	d503201f 	nop
   88bd4:	d503201f 	nop
   88bd8:	d503201f 	nop
   88bdc:	d503201f 	nop
   88be0:	d503201f 	nop
   88be4:	d503201f 	nop
   88be8:	d503201f 	nop
   88bec:	d503201f 	nop
   88bf0:	d503201f 	nop
   88bf4:	d503201f 	nop
   88bf8:	d503201f 	nop
   88bfc:	d503201f 	nop
   88c00:	14000160 	b	89180 <HVCStub>
   88c04:	d503201f 	nop
   88c08:	d503201f 	nop
   88c0c:	d503201f 	nop
   88c10:	d503201f 	nop
   88c14:	d503201f 	nop
   88c18:	d503201f 	nop
   88c1c:	d503201f 	nop
   88c20:	d503201f 	nop
   88c24:	d503201f 	nop
   88c28:	d503201f 	nop
   88c2c:	d503201f 	nop
   88c30:	d503201f 	nop
   88c34:	d503201f 	nop
   88c38:	d503201f 	nop
   88c3c:	d503201f 	nop
   88c40:	d503201f 	nop
   88c44:	d503201f 	nop
   88c48:	d503201f 	nop
   88c4c:	d503201f 	nop
   88c50:	d503201f 	nop
   88c54:	d503201f 	nop
   88c58:	d503201f 	nop
   88c5c:	d503201f 	nop
   88c60:	d503201f 	nop
   88c64:	d503201f 	nop
   88c68:	d503201f 	nop
   88c6c:	d503201f 	nop
   88c70:	d503201f 	nop
   88c74:	d503201f 	nop
   88c78:	d503201f 	nop
   88c7c:	d503201f 	nop
   88c80:	140000c1 	b	88f84 <UnexpectedStub>
   88c84:	d503201f 	nop
   88c88:	d503201f 	nop
   88c8c:	d503201f 	nop
   88c90:	d503201f 	nop
   88c94:	d503201f 	nop
   88c98:	d503201f 	nop
   88c9c:	d503201f 	nop
   88ca0:	d503201f 	nop
   88ca4:	d503201f 	nop
   88ca8:	d503201f 	nop
   88cac:	d503201f 	nop
   88cb0:	d503201f 	nop
   88cb4:	d503201f 	nop
   88cb8:	d503201f 	nop
   88cbc:	d503201f 	nop
   88cc0:	d503201f 	nop
   88cc4:	d503201f 	nop
   88cc8:	d503201f 	nop
   88ccc:	d503201f 	nop
   88cd0:	d503201f 	nop
   88cd4:	d503201f 	nop
   88cd8:	d503201f 	nop
   88cdc:	d503201f 	nop
   88ce0:	d503201f 	nop
   88ce4:	d503201f 	nop
   88ce8:	d503201f 	nop
   88cec:	d503201f 	nop
   88cf0:	d503201f 	nop
   88cf4:	d503201f 	nop
   88cf8:	d503201f 	nop
   88cfc:	d503201f 	nop
   88d00:	140000a1 	b	88f84 <UnexpectedStub>
   88d04:	d503201f 	nop
   88d08:	d503201f 	nop
   88d0c:	d503201f 	nop
   88d10:	d503201f 	nop
   88d14:	d503201f 	nop
   88d18:	d503201f 	nop
   88d1c:	d503201f 	nop
   88d20:	d503201f 	nop
   88d24:	d503201f 	nop
   88d28:	d503201f 	nop
   88d2c:	d503201f 	nop
   88d30:	d503201f 	nop
   88d34:	d503201f 	nop
   88d38:	d503201f 	nop
   88d3c:	d503201f 	nop
   88d40:	d503201f 	nop
   88d44:	d503201f 	nop
   88d48:	d503201f 	nop
   88d4c:	d503201f 	nop
   88d50:	d503201f 	nop
   88d54:	d503201f 	nop
   88d58:	d503201f 	nop
   88d5c:	d503201f 	nop
   88d60:	d503201f 	nop
   88d64:	d503201f 	nop
   88d68:	d503201f 	nop
   88d6c:	d503201f 	nop
   88d70:	d503201f 	nop
   88d74:	d503201f 	nop
   88d78:	d503201f 	nop
   88d7c:	d503201f 	nop
   88d80:	14000081 	b	88f84 <UnexpectedStub>
   88d84:	d503201f 	nop
   88d88:	d503201f 	nop
   88d8c:	d503201f 	nop
   88d90:	d503201f 	nop
   88d94:	d503201f 	nop
   88d98:	d503201f 	nop
   88d9c:	d503201f 	nop
   88da0:	d503201f 	nop
   88da4:	d503201f 	nop
   88da8:	d503201f 	nop
   88dac:	d503201f 	nop
   88db0:	d503201f 	nop
   88db4:	d503201f 	nop
   88db8:	d503201f 	nop
   88dbc:	d503201f 	nop
   88dc0:	d503201f 	nop
   88dc4:	d503201f 	nop
   88dc8:	d503201f 	nop
   88dcc:	d503201f 	nop
   88dd0:	d503201f 	nop
   88dd4:	d503201f 	nop
   88dd8:	d503201f 	nop
   88ddc:	d503201f 	nop
   88de0:	d503201f 	nop
   88de4:	d503201f 	nop
   88de8:	d503201f 	nop
   88dec:	d503201f 	nop
   88df0:	d503201f 	nop
   88df4:	d503201f 	nop
   88df8:	d503201f 	nop
   88dfc:	d503201f 	nop
   88e00:	14000061 	b	88f84 <UnexpectedStub>
   88e04:	d503201f 	nop
   88e08:	d503201f 	nop
   88e0c:	d503201f 	nop
   88e10:	d503201f 	nop
   88e14:	d503201f 	nop
   88e18:	d503201f 	nop
   88e1c:	d503201f 	nop
   88e20:	d503201f 	nop
   88e24:	d503201f 	nop
   88e28:	d503201f 	nop
   88e2c:	d503201f 	nop
   88e30:	d503201f 	nop
   88e34:	d503201f 	nop
   88e38:	d503201f 	nop
   88e3c:	d503201f 	nop
   88e40:	d503201f 	nop
   88e44:	d503201f 	nop
   88e48:	d503201f 	nop
   88e4c:	d503201f 	nop
   88e50:	d503201f 	nop
   88e54:	d503201f 	nop
   88e58:	d503201f 	nop
   88e5c:	d503201f 	nop
   88e60:	d503201f 	nop
   88e64:	d503201f 	nop
   88e68:	d503201f 	nop
   88e6c:	d503201f 	nop
   88e70:	d503201f 	nop
   88e74:	d503201f 	nop
   88e78:	d503201f 	nop
   88e7c:	d503201f 	nop
   88e80:	14000041 	b	88f84 <UnexpectedStub>
   88e84:	d503201f 	nop
   88e88:	d503201f 	nop
   88e8c:	d503201f 	nop
   88e90:	d503201f 	nop
   88e94:	d503201f 	nop
   88e98:	d503201f 	nop
   88e9c:	d503201f 	nop
   88ea0:	d503201f 	nop
   88ea4:	d503201f 	nop
   88ea8:	d503201f 	nop
   88eac:	d503201f 	nop
   88eb0:	d503201f 	nop
   88eb4:	d503201f 	nop
   88eb8:	d503201f 	nop
   88ebc:	d503201f 	nop
   88ec0:	d503201f 	nop
   88ec4:	d503201f 	nop
   88ec8:	d503201f 	nop
   88ecc:	d503201f 	nop
   88ed0:	d503201f 	nop
   88ed4:	d503201f 	nop
   88ed8:	d503201f 	nop
   88edc:	d503201f 	nop
   88ee0:	d503201f 	nop
   88ee4:	d503201f 	nop
   88ee8:	d503201f 	nop
   88eec:	d503201f 	nop
   88ef0:	d503201f 	nop
   88ef4:	d503201f 	nop
   88ef8:	d503201f 	nop
   88efc:	d503201f 	nop
   88f00:	14000021 	b	88f84 <UnexpectedStub>
   88f04:	d503201f 	nop
   88f08:	d503201f 	nop
   88f0c:	d503201f 	nop
   88f10:	d503201f 	nop
   88f14:	d503201f 	nop
   88f18:	d503201f 	nop
   88f1c:	d503201f 	nop
   88f20:	d503201f 	nop
   88f24:	d503201f 	nop
   88f28:	d503201f 	nop
   88f2c:	d503201f 	nop
   88f30:	d503201f 	nop
   88f34:	d503201f 	nop
   88f38:	d503201f 	nop
   88f3c:	d503201f 	nop
   88f40:	d503201f 	nop
   88f44:	d503201f 	nop
   88f48:	d503201f 	nop
   88f4c:	d503201f 	nop
   88f50:	d503201f 	nop
   88f54:	d503201f 	nop
   88f58:	d503201f 	nop
   88f5c:	d503201f 	nop
   88f60:	d503201f 	nop
   88f64:	d503201f 	nop
   88f68:	d503201f 	nop
   88f6c:	d503201f 	nop
   88f70:	d503201f 	nop
   88f74:	d503201f 	nop
   88f78:	d503201f 	nop
   88f7c:	d503201f 	nop
   88f80:	14000001 	b	88f84 <UnexpectedStub>

0000000000088f84 <UnexpectedStub>:
   88f84:	d5385200 	mrs	x0, esr_el1
   88f88:	d5384001 	mrs	x1, spsr_el1
   88f8c:	aa1e03e2 	mov	x2, x30
   88f90:	d5384023 	mrs	x3, elr_el1
   88f94:	d5384104 	mrs	x4, sp_el0
   88f98:	910003e5 	mov	x5, sp
   88f9c:	d5386006 	mrs	x6, far_el1
   88fa0:	f81f0fe6 	str	x6, [sp, #-16]!
   88fa4:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   88fa8:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   88fac:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   88fb0:	d2800000 	mov	x0, #0x0                   	// #0
   88fb4:	910003e1 	mov	x1, sp
   88fb8:	1400017a 	b	895a0 <ExceptionHandler>

0000000000088fbc <SynchronousStub>:
   88fbc:	d5385200 	mrs	x0, esr_el1
   88fc0:	d5384001 	mrs	x1, spsr_el1
   88fc4:	aa1e03e2 	mov	x2, x30
   88fc8:	d5384023 	mrs	x3, elr_el1
   88fcc:	d5384104 	mrs	x4, sp_el0
   88fd0:	910003e5 	mov	x5, sp
   88fd4:	d5386006 	mrs	x6, far_el1
   88fd8:	f81f0fe6 	str	x6, [sp, #-16]!
   88fdc:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   88fe0:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   88fe4:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   88fe8:	d2800020 	mov	x0, #0x1                   	// #1
   88fec:	910003e1 	mov	x1, sp
   88ff0:	1400016c 	b	895a0 <ExceptionHandler>

0000000000088ff4 <SErrorStub>:
   88ff4:	d5385200 	mrs	x0, esr_el1
   88ff8:	d5384001 	mrs	x1, spsr_el1
   88ffc:	aa1e03e2 	mov	x2, x30
   89000:	d5384023 	mrs	x3, elr_el1
   89004:	d5384104 	mrs	x4, sp_el0
   89008:	910003e5 	mov	x5, sp
   8900c:	d5386006 	mrs	x6, far_el1
   89010:	f81f0fe6 	str	x6, [sp, #-16]!
   89014:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   89018:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   8901c:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   89020:	d2800040 	mov	x0, #0x2                   	// #2
   89024:	910003e1 	mov	x1, sp
   89028:	1400015e 	b	895a0 <ExceptionHandler>

000000000008902c <IRQStub>:
   8902c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   89030:	d538403d 	mrs	x29, elr_el1
   89034:	d538401e 	mrs	x30, spsr_el1
   89038:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8903c:	d50341ff 	msr	daifclr, #0x1
   89040:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
   89044:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
   89048:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
   8904c:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
   89050:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
   89054:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
   89058:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
   8905c:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
   89060:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
   89064:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
   89068:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
   8906c:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
   89070:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
   89074:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
   89078:	f81f0fe0 	str	x0, [sp, #-16]!
   8907c:	97ffee79 	bl	84a60 <InterruptHandler>
   89080:	f84107e0 	ldr	x0, [sp], #16
   89084:	a8c10be1 	ldp	x1, x2, [sp], #16
   89088:	a8c113e3 	ldp	x3, x4, [sp], #16
   8908c:	a8c11be5 	ldp	x5, x6, [sp], #16
   89090:	a8c123e7 	ldp	x7, x8, [sp], #16
   89094:	a8c12be9 	ldp	x9, x10, [sp], #16
   89098:	a8c133eb 	ldp	x11, x12, [sp], #16
   8909c:	a8c13bed 	ldp	x13, x14, [sp], #16
   890a0:	a8c143ef 	ldp	x15, x16, [sp], #16
   890a4:	a8c14bf1 	ldp	x17, x18, [sp], #16
   890a8:	a8c153f3 	ldp	x19, x20, [sp], #16
   890ac:	a8c15bf5 	ldp	x21, x22, [sp], #16
   890b0:	a8c163f7 	ldp	x23, x24, [sp], #16
   890b4:	a8c16bf9 	ldp	x25, x26, [sp], #16
   890b8:	a8c173fb 	ldp	x27, x28, [sp], #16
   890bc:	d50341df 	msr	daifset, #0x1
   890c0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   890c4:	d518403d 	msr	elr_el1, x29
   890c8:	d518401e 	msr	spsr_el1, x30
   890cc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   890d0:	d69f03e0 	eret

00000000000890d4 <FIQStub>:
   890d4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   890d8:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
   890dc:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
   890e0:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
   890e4:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
   890e8:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
   890ec:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
   890f0:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
   890f4:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
   890f8:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
   890fc:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
   89100:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
   89104:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
   89108:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
   8910c:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
   89110:	f81f0fe0 	str	x0, [sp, #-16]!
   89114:	58000422 	ldr	x2, 89198 <HVCStub+0x18>
   89118:	f9400041 	ldr	x1, [x2]
   8911c:	f100003f 	cmp	x1, #0x0
   89120:	54000280 	b.eq	89170 <FIQStub+0x9c>  // b.none
   89124:	f9400440 	ldr	x0, [x2, #8]
   89128:	d63f0020 	blr	x1
   8912c:	f84107e0 	ldr	x0, [sp], #16
   89130:	a8c10be1 	ldp	x1, x2, [sp], #16
   89134:	a8c113e3 	ldp	x3, x4, [sp], #16
   89138:	a8c11be5 	ldp	x5, x6, [sp], #16
   8913c:	a8c123e7 	ldp	x7, x8, [sp], #16
   89140:	a8c12be9 	ldp	x9, x10, [sp], #16
   89144:	a8c133eb 	ldp	x11, x12, [sp], #16
   89148:	a8c13bed 	ldp	x13, x14, [sp], #16
   8914c:	a8c143ef 	ldp	x15, x16, [sp], #16
   89150:	a8c14bf1 	ldp	x17, x18, [sp], #16
   89154:	a8c153f3 	ldp	x19, x20, [sp], #16
   89158:	a8c15bf5 	ldp	x21, x22, [sp], #16
   8915c:	a8c163f7 	ldp	x23, x24, [sp], #16
   89160:	a8c16bf9 	ldp	x25, x26, [sp], #16
   89164:	a8c173fb 	ldp	x27, x28, [sp], #16
   89168:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8916c:	d69f03e0 	eret
   89170:	58000181 	ldr	x1, 891a0 <HVCStub+0x20>
   89174:	52800000 	mov	w0, #0x0                   	// #0
   89178:	b9000020 	str	w0, [x1]
   8917c:	17ffffec 	b	8912c <FIQStub+0x58>

0000000000089180 <HVCStub>:
   89180:	d53c4000 	mrs	x0, spsr_el2
   89184:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   89188:	d2800121 	mov	x1, #0x9                   	// #9
   8918c:	aa010000 	orr	x0, x0, x1
   89190:	d51c4000 	msr	spsr_el2, x0
   89194:	d69f03e0 	eret
   89198:	0008a9e0 	.word	0x0008a9e0
   8919c:	00000000 	.word	0x00000000
   891a0:	fe00b20c 	.word	0xfe00b20c
	...

00000000000891b0 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   891b0:	b9000001 	str	w1, [x0]
   891b4:	39001002 	strb	w2, [x0, #4]
   891b8:	d65f03c0 	ret
   891bc:	d503201f 	nop

00000000000891c0 <CBcmMailBox::~CBcmMailBox()>:
   891c0:	d65f03c0 	ret
   891c4:	d503201f 	nop
   891c8:	d503201f 	nop
   891cc:	d503201f 	nop

00000000000891d0 <CBcmMailBox::Flush()>:
   891d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   891d4:	910003fd 	mov	x29, sp
   891d8:	a90153f3 	stp	x19, x20, [sp, #16]
   891dc:	d2971313 	mov	x19, #0xb898                	// #47256
   891e0:	f2bfc013 	movk	x19, #0xfe00, lsl #16
   891e4:	b9400260 	ldr	w0, [x19]
   891e8:	37f00120 	tbnz	w0, #30, 8920c <CBcmMailBox::Flush()+0x3c>
   891ec:	d2971014 	mov	x20, #0xb880                	// #47232
   891f0:	f2bfc014 	movk	x20, #0xfe00, lsl #16
   891f4:	d503201f 	nop
   891f8:	b9400281 	ldr	w1, [x20]
   891fc:	52800280 	mov	w0, #0x14                  	// #20
   89200:	97ffe848 	bl	83320 <CTimer::SimpleMsDelay(unsigned int)>
   89204:	b9400260 	ldr	w0, [x19]
   89208:	36f7ff80 	tbz	w0, #30, 891f8 <CBcmMailBox::Flush()+0x28>
   8920c:	a94153f3 	ldp	x19, x20, [sp, #16]
   89210:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89214:	d65f03c0 	ret
   89218:	d503201f 	nop
   8921c:	d503201f 	nop

0000000000089220 <CBcmMailBox::Read()>:
   89220:	b9400004 	ldr	w4, [x0]
   89224:	d2971301 	mov	x1, #0xb898                	// #47256
   89228:	f2bfc001 	movk	x1, #0xfe00, lsl #16
   8922c:	d2971003 	mov	x3, #0xb880                	// #47232
   89230:	f2bfc003 	movk	x3, #0xfe00, lsl #16
   89234:	d503201f 	nop
   89238:	b9400020 	ldr	w0, [x1]
   8923c:	37f7ffe0 	tbnz	w0, #30, 89238 <CBcmMailBox::Read()+0x18>
   89240:	b9400060 	ldr	w0, [x3]
   89244:	12000c02 	and	w2, w0, #0xf
   89248:	6b04005f 	cmp	w2, w4
   8924c:	54ffff61 	b.ne	89238 <CBcmMailBox::Read()+0x18>  // b.any
   89250:	121c6c00 	and	w0, w0, #0xfffffff0
   89254:	d65f03c0 	ret
   89258:	d503201f 	nop
   8925c:	d503201f 	nop

0000000000089260 <CBcmMailBox::Write(unsigned int)>:
   89260:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89264:	910003fd 	mov	x29, sp
   89268:	a90153f3 	stp	x19, x20, [sp, #16]
   8926c:	2a0103f3 	mov	w19, w1
   89270:	aa0003f4 	mov	x20, x0
   89274:	d2971701 	mov	x1, #0xb8b8                	// #47288
   89278:	f2bfc001 	movk	x1, #0xfe00, lsl #16
   8927c:	d503201f 	nop
   89280:	b9400020 	ldr	w0, [x1]
   89284:	37ffffe0 	tbnz	w0, #31, 89280 <CBcmMailBox::Write(unsigned int)+0x20>
   89288:	f2400e7f 	tst	x19, #0xf
   8928c:	54000121 	b.ne	892b0 <CBcmMailBox::Write(unsigned int)+0x50>  // b.any
   89290:	b9400281 	ldr	w1, [x20]
   89294:	d2971400 	mov	x0, #0xb8a0                	// #47264
   89298:	f2bfc000 	movk	x0, #0xfe00, lsl #16
   8929c:	2a010273 	orr	w19, w19, w1
   892a0:	b9000013 	str	w19, [x0]
   892a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   892a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   892ac:	d65f03c0 	ret
   892b0:	b0000001 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   892b4:	b0000000 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   892b8:	91150021 	add	x1, x1, #0x540
   892bc:	91154000 	add	x0, x0, #0x550
   892c0:	52800c42 	mov	w2, #0x62                  	// #98
   892c4:	97ffefa7 	bl	85160 <assertion_failed>
   892c8:	b9400281 	ldr	w1, [x20]
   892cc:	d2971400 	mov	x0, #0xb8a0                	// #47264
   892d0:	f2bfc000 	movk	x0, #0xfe00, lsl #16
   892d4:	2a010273 	orr	w19, w19, w1
   892d8:	b9000013 	str	w19, [x0]
   892dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   892e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   892e4:	d65f03c0 	ret
   892e8:	d503201f 	nop
   892ec:	d503201f 	nop

00000000000892f0 <CBcmMailBox::WriteRead(unsigned int)>:
   892f0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   892f4:	910003fd 	mov	x29, sp
   892f8:	a90153f3 	stp	x19, x20, [sp, #16]
   892fc:	aa0003f4 	mov	x20, x0
   89300:	39401000 	ldrb	w0, [x0, #4]
   89304:	a9025bf5 	stp	x21, x22, [sp, #32]
   89308:	2a0103f6 	mov	w22, w1
   8930c:	35000080 	cbnz	w0, 8931c <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   89310:	b0000000 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   89314:	b94b0800 	ldr	w0, [x0, #2824]
   89318:	350005a0 	cbnz	w0, 893cc <CBcmMailBox::WriteRead(unsigned int)+0xdc>
   8931c:	d2971313 	mov	x19, #0xb898                	// #47256
   89320:	f2bfc013 	movk	x19, #0xfe00, lsl #16
   89324:	b9400260 	ldr	w0, [x19]
   89328:	d2971015 	mov	x21, #0xb880                	// #47232
   8932c:	f2bfc015 	movk	x21, #0xfe00, lsl #16
   89330:	37f000e0 	tbnz	w0, #30, 8934c <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   89334:	d503201f 	nop
   89338:	b94002a1 	ldr	w1, [x21]
   8933c:	52800280 	mov	w0, #0x14                  	// #20
   89340:	97ffe7f8 	bl	83320 <CTimer::SimpleMsDelay(unsigned int)>
   89344:	b9400260 	ldr	w0, [x19]
   89348:	36f7ff80 	tbz	w0, #30, 89338 <CBcmMailBox::WriteRead(unsigned int)+0x48>
   8934c:	2a1603e1 	mov	w1, w22
   89350:	aa1403e0 	mov	x0, x20
   89354:	97ffffc3 	bl	89260 <CBcmMailBox::Write(unsigned int)>
   89358:	b9400283 	ldr	w3, [x20]
   8935c:	d2971301 	mov	x1, #0xb898                	// #47256
   89360:	f2bfc001 	movk	x1, #0xfe00, lsl #16
   89364:	d2971004 	mov	x4, #0xb880                	// #47232
   89368:	f2bfc004 	movk	x4, #0xfe00, lsl #16
   8936c:	d503201f 	nop
   89370:	b9400020 	ldr	w0, [x1]
   89374:	37f7ffe0 	tbnz	w0, #30, 89370 <CBcmMailBox::WriteRead(unsigned int)+0x80>
   89378:	b9400080 	ldr	w0, [x4]
   8937c:	12000c02 	and	w2, w0, #0xf
   89380:	6b03005f 	cmp	w2, w3
   89384:	54ffff61 	b.ne	89370 <CBcmMailBox::WriteRead(unsigned int)+0x80>  // b.any
   89388:	39401281 	ldrb	w1, [x20, #4]
   8938c:	121c6c00 	and	w0, w0, #0xfffffff0
   89390:	35000081 	cbnz	w1, 893a0 <CBcmMailBox::WriteRead(unsigned int)+0xb0>
   89394:	b0000001 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   89398:	b94b0821 	ldr	w1, [x1, #2824]
   8939c:	350000a1 	cbnz	w1, 893b0 <CBcmMailBox::WriteRead(unsigned int)+0xc0>
   893a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   893a4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   893a8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   893ac:	d65f03c0 	ret
   893b0:	b9003fe0 	str	w0, [sp, #60]
   893b4:	97ffea17 	bl	83c10 <LeaveCritical>
   893b8:	b9403fe0 	ldr	w0, [sp, #60]
   893bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   893c0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   893c4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   893c8:	d65f03c0 	ret
   893cc:	97ffe9d9 	bl	83b30 <EnterCritical>
   893d0:	17ffffd3 	b	8931c <CBcmMailBox::WriteRead(unsigned int)+0x2c>
	...

00000000000893e0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   893e0:	b0000000 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   893e4:	b90b081f 	str	wzr, [x0, #2824]
   893e8:	d65f03c0 	ret
   893ec:	00000000 	.inst	0x00000000 ; undefined

00000000000893f0 <CExceptionHandler::CExceptionHandler()>:
   893f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   893f4:	910003fd 	mov	x29, sp
   893f8:	a90153f3 	stp	x19, x20, [sp, #16]
   893fc:	b0000013 	adrp	x19, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   89400:	aa0003f4 	mov	x20, x0
   89404:	f9458a60 	ldr	x0, [x19, #2832]
   89408:	b50000a0 	cbnz	x0, 8941c <CExceptionHandler::CExceptionHandler()+0x2c>
   8940c:	f9058a74 	str	x20, [x19, #2832]
   89410:	a94153f3 	ldp	x19, x20, [sp, #16]
   89414:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89418:	d65f03c0 	ret
   8941c:	b0000001 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   89420:	90000000 	adrp	x0, 89000 <SErrorStub+0xc>
   89424:	9115c021 	add	x1, x1, #0x570
   89428:	912e0000 	add	x0, x0, #0xb80
   8942c:	52800562 	mov	w2, #0x2b                  	// #43
   89430:	97ffef4c 	bl	85160 <assertion_failed>
   89434:	17fffff6 	b	8940c <CExceptionHandler::CExceptionHandler()+0x1c>
   89438:	d503201f 	nop
   8943c:	d503201f 	nop

0000000000089440 <CExceptionHandler::~CExceptionHandler()>:
   89440:	b0000000 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   89444:	f905881f 	str	xzr, [x0, #2832]
   89448:	d65f03c0 	ret
   8944c:	d503201f 	nop

0000000000089450 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   89450:	d101c3ff 	sub	sp, sp, #0x70
   89454:	a9027bfd 	stp	x29, x30, [sp, #32]
   89458:	910083fd 	add	x29, sp, #0x20
   8945c:	a90353f3 	stp	x19, x20, [sp, #48]
   89460:	aa0203f3 	mov	x19, x2
   89464:	a9045bf5 	stp	x21, x22, [sp, #64]
   89468:	a90563f7 	stp	x23, x24, [sp, #80]
   8946c:	2a0103f7 	mov	w23, w1
   89470:	f90033f9 	str	x25, [sp, #96]
   89474:	b40005e2 	cbz	x2, 89530 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   89478:	f9400660 	ldr	x0, [x19, #8]
   8947c:	f9401278 	ldr	x24, [x19, #32]
   89480:	92400c00 	and	x0, x0, #0xf
   89484:	f100141f 	cmp	x0, #0x5
   89488:	54000041 	b.ne	89490 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x40>  // b.any
   8948c:	f9401678 	ldr	x24, [x19, #40]
   89490:	d2800019 	mov	x25, #0x0                   	// #0
   89494:	f9400267 	ldr	x7, [x19]
   89498:	531a7cf6 	lsr	w22, w7, #26
   8949c:	924060f4 	and	x20, x7, #0x1ffffff
   894a0:	d10082c1 	sub	x1, x22, #0x20
   894a4:	d100d2c0 	sub	x0, x22, #0x34
   894a8:	f100143f 	cmp	x1, #0x5
   894ac:	fa418800 	ccmp	x0, #0x1, #0x0, hi  // hi = pmore
   894b0:	54000048 	b.hi	894b8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x68>  // b.pmore
   894b4:	f9401a79 	ldr	x25, [x19, #48]
   894b8:	b0000015 	adrp	x21, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   894bc:	9115a2b5 	add	x21, x21, #0x568
   894c0:	aa1503e1 	mov	x1, x21
   894c4:	aa1803e0 	mov	x0, x24
   894c8:	97fff01a 	bl	85530 <debug_stacktrace(unsigned long const*, char const*)>
   894cc:	97fff261 	bl	85e50 <CLogger::Get()>
   894d0:	f9400665 	ldr	x5, [x19, #8]
   894d4:	b0000004 	adrp	x4, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   894d8:	9127e084 	add	x4, x4, #0x9f8
   894dc:	f90003f9 	str	x25, [sp]
   894e0:	b0000003 	adrp	x3, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   894e4:	aa1503e1 	mov	x1, x21
   894e8:	f9400a68 	ldr	x8, [x19, #16]
   894ec:	aa1403e7 	mov	x7, x20
   894f0:	aa1603e6 	mov	x6, x22
   894f4:	91166063 	add	x3, x3, #0x598
   894f8:	52800002 	mov	w2, #0x0                   	// #0
   894fc:	f90007f8 	str	x24, [sp, #8]
   89500:	f8775884 	ldr	x4, [x4, w23, uxtw #3]
   89504:	f9000fe5 	str	x5, [sp, #24]
   89508:	f9400e65 	ldr	x5, [x19, #24]
   8950c:	f9000be8 	str	x8, [sp, #16]
   89510:	97fff18c 	bl	85b40 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89514:	a9427bfd 	ldp	x29, x30, [sp, #32]
   89518:	a94353f3 	ldp	x19, x20, [sp, #48]
   8951c:	a9445bf5 	ldp	x21, x22, [sp, #64]
   89520:	a94563f7 	ldp	x23, x24, [sp, #80]
   89524:	f94033f9 	ldr	x25, [sp, #96]
   89528:	9101c3ff 	add	sp, sp, #0x70
   8952c:	d65f03c0 	ret
   89530:	b0000001 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   89534:	b0000000 	adrp	x0, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   89538:	9115c021 	add	x1, x1, #0x570
   8953c:	91162000 	add	x0, x0, #0x588
   89540:	528006c2 	mov	w2, #0x36                  	// #54
   89544:	97ffef07 	bl	85160 <assertion_failed>
   89548:	17ffffcc 	b	89478 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   8954c:	d503201f 	nop

0000000000089550 <CExceptionHandler::Get()>:
   89550:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89554:	910003fd 	mov	x29, sp
   89558:	f9000bf3 	str	x19, [sp, #16]
   8955c:	b0000013 	adrp	x19, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   89560:	f9458a60 	ldr	x0, [x19, #2832]
   89564:	b4000080 	cbz	x0, 89574 <CExceptionHandler::Get()+0x24>
   89568:	f9400bf3 	ldr	x19, [sp, #16]
   8956c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89570:	d65f03c0 	ret
   89574:	b0000001 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   89578:	90000000 	adrp	x0, 89000 <SErrorStub+0xc>
   8957c:	9133a000 	add	x0, x0, #0xce8
   89580:	9115c021 	add	x1, x1, #0x570
   89584:	52800a82 	mov	w2, #0x54                  	// #84
   89588:	97ffeef6 	bl	85160 <assertion_failed>
   8958c:	f9458a60 	ldr	x0, [x19, #2832]
   89590:	17fffff6 	b	89568 <CExceptionHandler::Get()+0x18>
   89594:	d503201f 	nop
   89598:	d503201f 	nop
   8959c:	d503201f 	nop

00000000000895a0 <ExceptionHandler>:
   895a0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   895a4:	910003fd 	mov	x29, sp
   895a8:	a90153f3 	stp	x19, x20, [sp, #16]
   895ac:	aa0003f4 	mov	x20, x0
   895b0:	f90013f5 	str	x21, [sp, #32]
   895b4:	aa0103f5 	mov	x21, x1
   895b8:	97ffecc6 	bl	848d0 <CInterruptSystem::DisableFIQ()>
   895bc:	d50341ff 	msr	daifclr, #0x1
   895c0:	b0000013 	adrp	x19, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   895c4:	f9458a60 	ldr	x0, [x19, #2832]
   895c8:	b40000e0 	cbz	x0, 895e4 <ExceptionHandler+0x44>
   895cc:	aa1503e2 	mov	x2, x21
   895d0:	2a1403e1 	mov	w1, w20
   895d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   895d8:	f94013f5 	ldr	x21, [sp, #32]
   895dc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   895e0:	17ffff9c 	b	89450 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   895e4:	b0000001 	adrp	x1, 8a000 <vtable for CVirtualGPIOPin+0x2a8>
   895e8:	90000000 	adrp	x0, 89000 <SErrorStub+0xc>
   895ec:	9133a000 	add	x0, x0, #0xce8
   895f0:	9115c021 	add	x1, x1, #0x570
   895f4:	52800a82 	mov	w2, #0x54                  	// #84
   895f8:	97ffeeda 	bl	85160 <assertion_failed>
   895fc:	f9458a60 	ldr	x0, [x19, #2832]
   89600:	17fffff3 	b	895cc <ExceptionHandler+0x2c>
